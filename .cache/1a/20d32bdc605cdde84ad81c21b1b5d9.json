{"id":"RsyB","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\elliptic\\package.json","includedInParent":true,"mtime":1598465911326},{"name":"hash.js","loc":{"line":3,"column":19},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\elliptic\\lib\\elliptic\\eddsa\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash.js"},{"name":"../curves","loc":{"line":4,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\elliptic\\lib\\elliptic\\eddsa\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\elliptic\\lib\\elliptic\\curves.js"},{"name":"../utils","loc":{"line":5,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\elliptic\\lib\\elliptic\\eddsa\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\elliptic\\lib\\elliptic\\utils.js"},{"name":"./key","loc":{"line":8,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\elliptic\\lib\\elliptic\\eddsa\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\elliptic\\lib\\elliptic\\eddsa\\key.js"},{"name":"./signature","loc":{"line":9,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\elliptic\\lib\\elliptic\\eddsa\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\elliptic\\lib\\elliptic\\eddsa\\signature.js"}],"generated":{"js":"var $RsyB$exports = {};\nvar $RsyB$var$hash = $parcel$require(\"RsyB\", \"hash.js\");\nvar $RsyB$var$curves = $parcel$require(\"RsyB\", \"../curves\");\nvar $RsyB$var$utils = $parcel$require(\"RsyB\", \"../utils\");\nvar $RsyB$var$assert = $RsyB$var$utils.assert;\nvar $RsyB$var$parseBytes = $RsyB$var$utils.parseBytes;\nvar $RsyB$var$KeyPair = $parcel$require(\"RsyB\", \"./key\");\nvar $RsyB$var$Signature = $parcel$require(\"RsyB\", \"./signature\");\n\nfunction $RsyB$var$EDDSA(curve) {\n  $RsyB$var$assert(curve === 'ed25519', 'only tested with ed25519 so far');\n  if (!(this instanceof $RsyB$var$EDDSA)) return new $RsyB$var$EDDSA(curve);\n  var curve = $RsyB$var$curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = $RsyB$var$hash.sha512;\n}\n\n$RsyB$exports = $RsyB$var$EDDSA;\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\n\n$RsyB$var$EDDSA.prototype.sign = function sign(message, secret) {\n  message = $RsyB$var$parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({\n    R: R,\n    S: S,\n    Rencoded: Rencoded\n  });\n};\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\n\n\n$RsyB$var$EDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = $RsyB$var$parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\n$RsyB$var$EDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n\n  for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);\n\n  return $RsyB$var$utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\n$RsyB$var$EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return $RsyB$var$KeyPair.fromPublic(this, pub);\n};\n\n$RsyB$var$EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return $RsyB$var$KeyPair.fromSecret(this, secret);\n};\n\n$RsyB$var$EDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof $RsyB$var$Signature) return sig;\n  return new $RsyB$var$Signature(this, sig);\n};\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\n\n\n$RsyB$var$EDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\n$RsyB$var$EDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = $RsyB$var$utils.parseBytes(bytes);\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n  var y = $RsyB$var$utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\n$RsyB$var$EDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\n$RsyB$var$EDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return $RsyB$var$utils.intFromLE(bytes);\n};\n\n$RsyB$var$EDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};"},"sourceMaps":null,"error":null,"hash":"c2d29d01b2bedfe01a5b8aeaaef892ea","cacheData":{"env":{},"imports":{"$require$hash.js":["hash.js","*"],"$require$../curves":["../curves","*"],"$require$../utils":["../utils","*"],"$require$./key":["./key","*"],"$require$./signature":["./signature","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}