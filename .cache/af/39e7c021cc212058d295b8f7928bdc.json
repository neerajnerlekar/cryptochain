{"id":"KNil","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\package.json","includedInParent":true,"mtime":1598465887062},{"name":"util-deprecate","loc":{"line":60,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\_stream_writable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\util-deprecate\\browser.js"},{"name":"./internal/streams/stream","loc":{"line":66,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\_stream_writable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\internal\\streams\\stream-browser.js"},{"name":"buffer","loc":{"line":70,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\_stream_writable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\buffer\\index.js"},{"name":"./internal/streams/destroy","loc":{"line":82,"column":26},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\_stream_writable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\internal\\streams\\destroy.js"},{"name":"./internal/streams/state","loc":{"line":84,"column":23},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\_stream_writable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\internal\\streams\\state.js"},{"name":"../errors","loc":{"line":87,"column":29},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\_stream_writable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\errors-browser.js"},{"name":"inherits","loc":{"line":99,"column":8},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\_stream_writable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\inherits\\inherits_browser.js"},{"name":"./_stream_duplex","loc":{"line":230,"column":29},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\_stream_writable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\_stream_duplex.js"},{"name":"process","parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\lib\\_stream_writable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\process\\browser.js"}],"generated":{"js":"\nvar $KNil$exports = {};\nvar $KNil$var$process = $parcel$require(\"KNil\", \"process\");\n$KNil$exports = $KNil$var$Writable;\n/* <replacement> */\n\nfunction $KNil$var$WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction $KNil$var$CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    $KNil$var$onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar $KNil$var$Duplex;\n/*</replacement>*/\n\n$KNil$var$Writable.WritableState = $KNil$var$WritableState;\n/*<replacement>*/\n\nvar $KNil$var$internalUtil = {\n  deprecate: $parcel$require(\"KNil\", \"util-deprecate\")\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar $KNil$var$Stream = $parcel$require(\"KNil\", \"./internal/streams/stream\");\n/*</replacement>*/\n\nvar $KNil$var$Buffer = $parcel$require(\"KNil\", \"buffer\").Buffer;\n\nvar $KNil$var$OurUint8Array = $parcel$global.Uint8Array || function () {};\n\nfunction $KNil$var$_uint8ArrayToBuffer(chunk) {\n  return $KNil$var$Buffer.from(chunk);\n}\n\nfunction $KNil$var$_isUint8Array(obj) {\n  return $KNil$var$Buffer.isBuffer(obj) || obj instanceof $KNil$var$OurUint8Array;\n}\n\nvar $KNil$var$destroyImpl = $parcel$require(\"KNil\", \"./internal/streams/destroy\");\nvar $KNil$var$_require = $parcel$require(\"KNil\", \"./internal/streams/state\"),\n    $KNil$var$getHighWaterMark = $KNil$var$_require.getHighWaterMark;\nvar $KNil$var$_require$codes = $parcel$require(\"KNil\", \"../errors\").codes,\n    $KNil$var$ERR_INVALID_ARG_TYPE = $KNil$var$_require$codes.ERR_INVALID_ARG_TYPE,\n    $KNil$var$ERR_METHOD_NOT_IMPLEMENTED = $KNil$var$_require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    $KNil$var$ERR_MULTIPLE_CALLBACK = $KNil$var$_require$codes.ERR_MULTIPLE_CALLBACK,\n    $KNil$var$ERR_STREAM_CANNOT_PIPE = $KNil$var$_require$codes.ERR_STREAM_CANNOT_PIPE,\n    $KNil$var$ERR_STREAM_DESTROYED = $KNil$var$_require$codes.ERR_STREAM_DESTROYED,\n    $KNil$var$ERR_STREAM_NULL_VALUES = $KNil$var$_require$codes.ERR_STREAM_NULL_VALUES,\n    $KNil$var$ERR_STREAM_WRITE_AFTER_END = $KNil$var$_require$codes.ERR_STREAM_WRITE_AFTER_END,\n    $KNil$var$ERR_UNKNOWN_ENCODING = $KNil$var$_require$codes.ERR_UNKNOWN_ENCODING;\nvar $KNil$var$errorOrDestroy = $KNil$var$destroyImpl.errorOrDestroy;\n$parcel$require(\"KNil\", \"inherits\")($KNil$var$Writable, $KNil$var$Stream);\n\nfunction $KNil$var$nop() {}\n\nfunction $KNil$var$WritableState(options, stream, isDuplex) {\n  $KNil$var$Duplex = $KNil$var$Duplex || $parcel$require(\"KNil\", \"./_stream_duplex\");\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $KNil$var$Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = $KNil$var$getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    $KNil$var$onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new $KNil$var$CorkedRequest(this);\n}\n\n$KNil$var$WritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty($KNil$var$WritableState.prototype, 'buffer', {\n      get: $KNil$var$internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar $KNil$var$realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  $KNil$var$realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty($KNil$var$Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if ($KNil$var$realHasInstance.call(this, object)) return true;\n      if (this !== $KNil$var$Writable) return false;\n      return object && object._writableState instanceof $KNil$var$WritableState;\n    }\n  });\n} else {\n  $KNil$var$realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction $KNil$var$Writable(options) {\n  $KNil$var$Duplex = $KNil$var$Duplex || $parcel$require(\"KNil\", \"./_stream_duplex\"); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof $KNil$var$Duplex;\n  if (!isDuplex && !$KNil$var$realHasInstance.call($KNil$var$Writable, this)) return new $KNil$var$Writable(options);\n  this._writableState = new $KNil$var$WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  $KNil$var$Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\n$KNil$var$Writable.prototype.pipe = function () {\n  $KNil$var$errorOrDestroy(this, new $KNil$var$ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction $KNil$var$writeAfterEnd(stream, cb) {\n  var er = new $KNil$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  $KNil$var$errorOrDestroy(stream, er);\n  $KNil$var$process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction $KNil$var$validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new $KNil$var$ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new $KNil$var$ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    $KNil$var$errorOrDestroy(stream, er);\n    $KNil$var$process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\n$KNil$var$Writable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && $KNil$var$_isUint8Array(chunk);\n\n  if (isBuf && !$KNil$var$Buffer.isBuffer(chunk)) {\n    chunk = $KNil$var$_uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = $KNil$var$nop;\n  if (state.ending) $KNil$var$writeAfterEnd(this, cb);else if (isBuf || $KNil$var$validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = $KNil$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\n$KNil$var$Writable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\n$KNil$var$Writable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $KNil$var$clearBuffer(this, state);\n  }\n};\n\n$KNil$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new $KNil$var$ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty($KNil$var$Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction $KNil$var$decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = $KNil$var$Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty($KNil$var$Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction $KNil$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = $KNil$var$decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    $KNil$var$doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction $KNil$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new $KNil$var$ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction $KNil$var$onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    $KNil$var$process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    $KNil$var$process.nextTick($KNil$var$finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    $KNil$var$errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    $KNil$var$errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    $KNil$var$finishMaybe(stream, state);\n  }\n}\n\nfunction $KNil$var$onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction $KNil$var$onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new $KNil$var$ERR_MULTIPLE_CALLBACK();\n  $KNil$var$onwriteStateUpdate(state);\n  if (er) $KNil$var$onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = $KNil$var$needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      $KNil$var$clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      $KNil$var$process.nextTick($KNil$var$afterWrite, stream, state, finished, cb);\n    } else {\n      $KNil$var$afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction $KNil$var$afterWrite(stream, state, finished, cb) {\n  if (!finished) $KNil$var$onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  $KNil$var$finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction $KNil$var$onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction $KNil$var$clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    $KNil$var$doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new $KNil$var$CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      $KNil$var$doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\n$KNil$var$Writable.prototype._write = function (chunk, encoding, cb) {\n  cb(new $KNil$var$ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\n$KNil$var$Writable.prototype._writev = null;\n\n$KNil$var$Writable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) $KNil$var$endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty($KNil$var$Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction $KNil$var$needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction $KNil$var$callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      $KNil$var$errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    $KNil$var$finishMaybe(stream, state);\n  });\n}\n\nfunction $KNil$var$prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      $KNil$var$process.nextTick($KNil$var$callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction $KNil$var$finishMaybe(stream, state) {\n  var need = $KNil$var$needFinish(state);\n\n  if (need) {\n    $KNil$var$prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction $KNil$var$endWritable(stream, state, cb) {\n  state.ending = true;\n  $KNil$var$finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) $KNil$var$process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction $KNil$var$onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty($KNil$var$Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\n$KNil$var$Writable.prototype.destroy = $KNil$var$destroyImpl.destroy;\n$KNil$var$Writable.prototype._undestroy = $KNil$var$destroyImpl.undestroy;\n\n$KNil$var$Writable.prototype._destroy = function (err, cb) {\n  cb(err);\n};"},"sourceMaps":null,"error":null,"hash":"dd70fdbfe1521f038e514c3881d65d38","cacheData":{"env":{},"imports":{"$require$util-deprecate":["util-deprecate","*"],"$require$./internal/streams/stream":["./internal/streams/stream","*"],"$require$buffer":["buffer","*"],"$require$./internal/streams/destroy":["./internal/streams/destroy","*"],"$require$./internal/streams/state":["./internal/streams/state","*"],"$require$../errors":["../errors","*"],"$require$inherits":["inherits","*"],"$require$./_stream_duplex":["./_stream_duplex","*"],"$require$process":["process","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}