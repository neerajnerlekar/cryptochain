{"id":"thZo","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\package.json","includedInParent":true,"mtime":1598465911093},{"name":"../utils","loc":{"line":3,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\sha\\1.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\utils.js"},{"name":"../common","loc":{"line":4,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\sha\\1.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\common.js"},{"name":"./common","loc":{"line":5,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\sha\\1.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\sha\\common.js"}],"generated":{"js":"var $thZo$exports = {};\nvar $thZo$var$utils = $parcel$require(\"thZo\", \"../utils\");\nvar $thZo$var$common = $parcel$require(\"thZo\", \"../common\");\nvar $thZo$var$shaCommon = $parcel$require(\"thZo\", \"./common\");\nvar $thZo$var$rotl32 = $thZo$var$utils.rotl32;\nvar $thZo$var$sum32 = $thZo$var$utils.sum32;\nvar $thZo$var$sum32_5 = $thZo$var$utils.sum32_5;\nvar $thZo$var$ft_1 = $thZo$var$shaCommon.ft_1;\nvar $thZo$var$BlockHash = $thZo$var$common.BlockHash;\nvar $thZo$var$sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\nfunction $thZo$var$SHA1() {\n  if (!(this instanceof $thZo$var$SHA1)) return new $thZo$var$SHA1();\n  $thZo$var$BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\n\n$thZo$var$utils.inherits($thZo$var$SHA1, $thZo$var$BlockHash);\n$thZo$exports = $thZo$var$SHA1;\n$thZo$var$SHA1.blockSize = 512;\n$thZo$var$SHA1.outSize = 160;\n$thZo$var$SHA1.hmacStrength = 80;\n$thZo$var$SHA1.padLength = 64;\n\n$thZo$var$SHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = $thZo$var$rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = $thZo$var$sum32_5($thZo$var$rotl32(a, 5), $thZo$var$ft_1(s, b, c, d), e, W[i], $thZo$var$sha1_K[s]);\n    e = d;\n    d = c;\n    c = $thZo$var$rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = $thZo$var$sum32(this.h[0], a);\n  this.h[1] = $thZo$var$sum32(this.h[1], b);\n  this.h[2] = $thZo$var$sum32(this.h[2], c);\n  this.h[3] = $thZo$var$sum32(this.h[3], d);\n  this.h[4] = $thZo$var$sum32(this.h[4], e);\n};\n\n$thZo$var$SHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return $thZo$var$utils.toHex32(this.h, 'big');else return $thZo$var$utils.split32(this.h, 'big');\n};"},"sourceMaps":null,"error":null,"hash":"a2405c6acd8298789691f9f87930735d","cacheData":{"env":{},"imports":{"$require$../utils":["../utils","*"],"$require$../common":["../common","*"],"$require$./common":["./common","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}