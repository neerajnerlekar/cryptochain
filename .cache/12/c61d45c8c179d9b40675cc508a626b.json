{"id":"xVrh","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\package.json","includedInParent":true,"mtime":1598465886487},{"name":"safe-buffer","loc":{"line":1,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\modes\\cfb8.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"}],"generated":{"js":"\nvar $xVrh$exports = {};\nvar $xVrh$var$Buffer = $parcel$require(\"xVrh\", \"safe-buffer\").Buffer;\n\nfunction $xVrh$var$encryptByte(self, byteParam, decrypt) {\n  var pad = self._cipher.encryptBlock(self._prev);\n\n  var out = pad[0] ^ byteParam;\n  self._prev = $xVrh$var$Buffer.concat([self._prev.slice(1), $xVrh$var$Buffer.from([decrypt ? byteParam : out])]);\n  return out;\n}\n\nvar $xVrh$export$encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length;\n  var out = $xVrh$var$Buffer.allocUnsafe(len);\n  var i = -1;\n\n  while (++i < len) {\n    out[i] = $xVrh$var$encryptByte(self, chunk[i], decrypt);\n  }\n\n  return out;\n};\n\n$xVrh$exports.encrypt = $xVrh$export$encrypt;"},"sourceMaps":null,"error":null,"hash":"6cb01fd057df3c9a64d002541cab0fd3","cacheData":{"env":{},"imports":{"$require$safe-buffer":["safe-buffer","*"]},"exports":{"encrypt":"$xVrh$export$encrypt"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}