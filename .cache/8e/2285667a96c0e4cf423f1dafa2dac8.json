{"id":"DVcf","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\package.json","includedInParent":true,"mtime":1598465886486},{"name":"./asn1","loc":{"line":1,"column":19},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\asn1.js"},{"name":"./aesid.json","loc":{"line":2,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\aesid.json"},{"name":"./fixProc","loc":{"line":3,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\fixProc.js"},{"name":"browserify-aes","loc":{"line":4,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\browser.js"},{"name":"pbkdf2","loc":{"line":5,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\browser.js"},{"name":"safe-buffer","loc":{"line":6,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"}],"generated":{"js":"\nvar $DVcf$exports = {};\nvar $DVcf$var$asn1 = $parcel$require(\"DVcf\", \"./asn1\");\nvar $DVcf$var$aesid = $parcel$require(\"DVcf\", \"./aesid.json\");\nvar $DVcf$var$fixProc = $parcel$require(\"DVcf\", \"./fixProc\");\nvar $DVcf$var$ciphers = $parcel$require(\"DVcf\", \"browserify-aes\");\nvar $DVcf$var$compat = $parcel$require(\"DVcf\", \"pbkdf2\");\nvar $DVcf$var$Buffer = $parcel$require(\"DVcf\", \"safe-buffer\").Buffer;\n$DVcf$exports = $DVcf$var$parseKeys;\n\nfunction $DVcf$var$parseKeys(buffer) {\n  var password;\n\n  if (typeof buffer === 'object' && !$DVcf$var$Buffer.isBuffer(buffer)) {\n    password = buffer.passphrase;\n    buffer = buffer.key;\n  }\n\n  if (typeof buffer === 'string') {\n    buffer = $DVcf$var$Buffer.from(buffer);\n  }\n\n  var stripped = $DVcf$var$fixProc(buffer, password);\n  var type = stripped.tag;\n  var data = stripped.data;\n  var subtype, ndata;\n\n  switch (type) {\n    case 'CERTIFICATE':\n      ndata = $DVcf$var$asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;\n    // falls through\n\n    case 'PUBLIC KEY':\n      if (!ndata) {\n        ndata = $DVcf$var$asn1.PublicKey.decode(data, 'der');\n      }\n\n      subtype = ndata.algorithm.algorithm.join('.');\n\n      switch (subtype) {\n        case '1.2.840.113549.1.1.1':\n          return $DVcf$var$asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');\n\n        case '1.2.840.10045.2.1':\n          ndata.subjectPrivateKey = ndata.subjectPublicKey;\n          return {\n            type: 'ec',\n            data: ndata\n          };\n\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.pub_key = $DVcf$var$asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');\n          return {\n            type: 'dsa',\n            data: ndata.algorithm.params\n          };\n\n        default:\n          throw new Error('unknown key id ' + subtype);\n      }\n\n    // throw new Error('unknown key type ' + type)\n\n    case 'ENCRYPTED PRIVATE KEY':\n      data = $DVcf$var$asn1.EncryptedPrivateKey.decode(data, 'der');\n      data = $DVcf$var$decrypt(data, password);\n    // falls through\n\n    case 'PRIVATE KEY':\n      ndata = $DVcf$var$asn1.PrivateKey.decode(data, 'der');\n      subtype = ndata.algorithm.algorithm.join('.');\n\n      switch (subtype) {\n        case '1.2.840.113549.1.1.1':\n          return $DVcf$var$asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');\n\n        case '1.2.840.10045.2.1':\n          return {\n            curve: ndata.algorithm.curve,\n            privateKey: $DVcf$var$asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey\n          };\n\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.priv_key = $DVcf$var$asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');\n          return {\n            type: 'dsa',\n            params: ndata.algorithm.params\n          };\n\n        default:\n          throw new Error('unknown key id ' + subtype);\n      }\n\n    // throw new Error('unknown key type ' + type)\n\n    case 'RSA PUBLIC KEY':\n      return $DVcf$var$asn1.RSAPublicKey.decode(data, 'der');\n\n    case 'RSA PRIVATE KEY':\n      return $DVcf$var$asn1.RSAPrivateKey.decode(data, 'der');\n\n    case 'DSA PRIVATE KEY':\n      return {\n        type: 'dsa',\n        params: $DVcf$var$asn1.DSAPrivateKey.decode(data, 'der')\n      };\n\n    case 'EC PRIVATE KEY':\n      data = $DVcf$var$asn1.ECPrivateKey.decode(data, 'der');\n      return {\n        curve: data.parameters.value,\n        privateKey: data.privateKey\n      };\n\n    default:\n      throw new Error('unknown key type ' + type);\n  }\n}\n\n$DVcf$var$parseKeys.signature = $DVcf$var$asn1.signature;\n\nfunction $DVcf$var$decrypt(data, password) {\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt;\n  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);\n  var algo = $DVcf$var$aesid[data.algorithm.decrypt.cipher.algo.join('.')];\n  var iv = data.algorithm.decrypt.cipher.iv;\n  var cipherText = data.subjectPrivateKey;\n  var keylen = parseInt(algo.split('-')[1], 10) / 8;\n  var key = $DVcf$var$compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1');\n  var cipher = $DVcf$var$ciphers.createDecipheriv(algo, key, iv);\n  var out = [];\n  out.push(cipher.update(cipherText));\n  out.push(cipher.final());\n  return $DVcf$var$Buffer.concat(out);\n}"},"sourceMaps":null,"error":null,"hash":"7262dbec24bf01061b377b7ac3c196fa","cacheData":{"env":{},"imports":{"$require$./asn1":["./asn1","*"],"$require$./aesid.json":["./aesid.json","*"],"$require$./fixProc":["./fixProc","*"],"$require$browserify-aes":["browserify-aes","*"],"$require$pbkdf2":["pbkdf2","*"],"$require$safe-buffer":["safe-buffer","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}