{"id":"DC7X","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\miller-rabin\\package.json","includedInParent":true,"mtime":1598465914259},{"name":"bn.js","loc":{"line":1,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\miller-rabin\\lib\\mr.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\bn.js\\lib\\bn.js"},{"name":"brorand","loc":{"line":2,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\miller-rabin\\lib\\mr.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\brorand\\index.js"}],"generated":{"js":"var $DC7X$exports = {};\nvar $DC7X$var$bn = $parcel$require(\"DC7X\", \"bn.js\");\nvar $DC7X$var$brorand = $parcel$require(\"DC7X\", \"brorand\");\n\nfunction $DC7X$var$MillerRabin(rand) {\n  this.rand = rand || new $DC7X$var$brorand.Rand();\n}\n\n$DC7X$exports = $DC7X$var$MillerRabin;\n\n$DC7X$var$MillerRabin.create = function create(rand) {\n  return new $DC7X$var$MillerRabin(rand);\n};\n\n$DC7X$var$MillerRabin.prototype._randbelow = function _randbelow(n) {\n  var len = n.bitLength();\n  var min_bytes = Math.ceil(len / 8); // Generage random bytes until a number less than n is found.\n  // This ensures that 0..n-1 have an equal probability of being selected.\n\n  do var a = new $DC7X$var$bn(this.rand.generate(min_bytes)); while (a.cmp(n) >= 0);\n\n  return a;\n};\n\n$DC7X$var$MillerRabin.prototype._randrange = function _randrange(start, stop) {\n  // Generate a random number greater than or equal to start and less than stop.\n  var size = stop.sub(start);\n  return start.add(this._randbelow(size));\n};\n\n$DC7X$var$MillerRabin.prototype.test = function test(n, k, cb) {\n  var len = n.bitLength();\n  var red = $DC7X$var$bn.mont(n);\n  var rone = new $DC7X$var$bn(1).toRed(red);\n  if (!k) k = Math.max(1, len / 48 | 0); // Find d and s, (n - 1) = (2 ^ s) * d;\n\n  var n1 = n.subn(1);\n\n  for (var s = 0; !n1.testn(s); s++) {}\n\n  var d = n.shrn(s);\n  var rn1 = n1.toRed(red);\n  var prime = true;\n\n  for (; k > 0; k--) {\n    var a = this._randrange(new $DC7X$var$bn(2), n1);\n\n    if (cb) cb(a);\n    var x = a.toRed(red).redPow(d);\n    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;\n\n    for (var i = 1; i < s; i++) {\n      x = x.redSqr();\n      if (x.cmp(rone) === 0) return false;\n      if (x.cmp(rn1) === 0) break;\n    }\n\n    if (i === s) return false;\n  }\n\n  return prime;\n};\n\n$DC7X$var$MillerRabin.prototype.getDivisor = function getDivisor(n, k) {\n  var len = n.bitLength();\n  var red = $DC7X$var$bn.mont(n);\n  var rone = new $DC7X$var$bn(1).toRed(red);\n  if (!k) k = Math.max(1, len / 48 | 0); // Find d and s, (n - 1) = (2 ^ s) * d;\n\n  var n1 = n.subn(1);\n\n  for (var s = 0; !n1.testn(s); s++) {}\n\n  var d = n.shrn(s);\n  var rn1 = n1.toRed(red);\n\n  for (; k > 0; k--) {\n    var a = this._randrange(new $DC7X$var$bn(2), n1);\n\n    var g = n.gcd(a);\n    if (g.cmpn(1) !== 0) return g;\n    var x = a.toRed(red).redPow(d);\n    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;\n\n    for (var i = 1; i < s; i++) {\n      x = x.redSqr();\n      if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);\n      if (x.cmp(rn1) === 0) break;\n    }\n\n    if (i === s) {\n      x = x.redSqr();\n      return x.fromRed().subn(1).gcd(n);\n    }\n  }\n\n  return false;\n};"},"sourceMaps":null,"error":null,"hash":"c78091d5a33b48afd75a351449ecb66f","cacheData":{"env":{},"imports":{"$require$bn.js":["bn.js","*"],"$require$brorand":["brorand","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}