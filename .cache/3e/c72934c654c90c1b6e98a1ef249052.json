{"id":"vnlH","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\evp_bytestokey\\package.json","includedInParent":true,"mtime":1598465886649},{"name":"safe-buffer","loc":{"line":1,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\evp_bytestokey\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"},{"name":"md5.js","loc":{"line":2,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\evp_bytestokey\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\md5.js\\index.js"}],"generated":{"js":"\nvar $vnlH$exports = {};\nvar $vnlH$var$Buffer = $parcel$require(\"vnlH\", \"safe-buffer\").Buffer;\nvar $vnlH$var$MD5 = $parcel$require(\"vnlH\", \"md5.js\");\n/* eslint-disable camelcase */\n\nfunction $vnlH$var$EVP_BytesToKey(password, salt, keyBits, ivLen) {\n  if (!$vnlH$var$Buffer.isBuffer(password)) password = $vnlH$var$Buffer.from(password, 'binary');\n\n  if (salt) {\n    if (!$vnlH$var$Buffer.isBuffer(salt)) salt = $vnlH$var$Buffer.from(salt, 'binary');\n    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');\n  }\n\n  var keyLen = keyBits / 8;\n  var key = $vnlH$var$Buffer.alloc(keyLen);\n  var iv = $vnlH$var$Buffer.alloc(ivLen || 0);\n  var tmp = $vnlH$var$Buffer.alloc(0);\n\n  while (keyLen > 0 || ivLen > 0) {\n    var hash = new $vnlH$var$MD5();\n    hash.update(tmp);\n    hash.update(password);\n    if (salt) hash.update(salt);\n    tmp = hash.digest();\n    var used = 0;\n\n    if (keyLen > 0) {\n      var keyStart = key.length - keyLen;\n      used = Math.min(keyLen, tmp.length);\n      tmp.copy(key, keyStart, 0, used);\n      keyLen -= used;\n    }\n\n    if (used < tmp.length && ivLen > 0) {\n      var ivStart = iv.length - ivLen;\n      var length = Math.min(ivLen, tmp.length - used);\n      tmp.copy(iv, ivStart, used, used + length);\n      ivLen -= length;\n    }\n  }\n\n  tmp.fill(0);\n  return {\n    key: key,\n    iv: iv\n  };\n}\n\n$vnlH$exports = $vnlH$var$EVP_BytesToKey;"},"sourceMaps":null,"error":null,"hash":"dfebea5077c646ea393acc244969f534","cacheData":{"env":{},"imports":{"$require$safe-buffer":["safe-buffer","*"],"$require$md5.js":["md5.js","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}