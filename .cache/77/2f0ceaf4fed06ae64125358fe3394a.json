{"id":"U8JX","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\ms\\package.json","includedInParent":true,"mtime":1598465910570}],"generated":{"js":"var $U8JX$exports = {};\n\n/**\n * Helpers.\n */\nvar $U8JX$var$s = 1000;\nvar $U8JX$var$m = $U8JX$var$s * 60;\nvar $U8JX$var$h = $U8JX$var$m * 60;\nvar $U8JX$var$d = $U8JX$var$h * 24;\nvar $U8JX$var$y = $U8JX$var$d * 365.25;\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\n$U8JX$exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n\n  if (type === 'string' && val.length > 0) {\n    return $U8JX$var$parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? $U8JX$var$fmtLong(val) : $U8JX$var$fmtShort(val);\n  }\n\n  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));\n};\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\n\nfunction $U8JX$var$parse(str) {\n  str = String(str);\n\n  if (str.length > 100) {\n    return;\n  }\n\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n\n  if (!match) {\n    return;\n  }\n\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * $U8JX$var$y;\n\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * $U8JX$var$d;\n\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * $U8JX$var$h;\n\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * $U8JX$var$m;\n\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * $U8JX$var$s;\n\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n\n    default:\n      return undefined;\n  }\n}\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\n\nfunction $U8JX$var$fmtShort(ms) {\n  if (ms >= $U8JX$var$d) {\n    return Math.round(ms / $U8JX$var$d) + 'd';\n  }\n\n  if (ms >= $U8JX$var$h) {\n    return Math.round(ms / $U8JX$var$h) + 'h';\n  }\n\n  if (ms >= $U8JX$var$m) {\n    return Math.round(ms / $U8JX$var$m) + 'm';\n  }\n\n  if (ms >= $U8JX$var$s) {\n    return Math.round(ms / $U8JX$var$s) + 's';\n  }\n\n  return ms + 'ms';\n}\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\n\nfunction $U8JX$var$fmtLong(ms) {\n  return $U8JX$var$plural(ms, $U8JX$var$d, 'day') || $U8JX$var$plural(ms, $U8JX$var$h, 'hour') || $U8JX$var$plural(ms, $U8JX$var$m, 'minute') || $U8JX$var$plural(ms, $U8JX$var$s, 'second') || ms + ' ms';\n}\n/**\n * Pluralization helper.\n */\n\n\nfunction $U8JX$var$plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}"},"sourceMaps":null,"error":null,"hash":"39534c3e6ae5c06b8986660dbb38b426","cacheData":{"env":{},"imports":{},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}