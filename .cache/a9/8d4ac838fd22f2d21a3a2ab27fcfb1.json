{"id":"o0bt","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\qs\\package.json","includedInParent":true,"mtime":1598465921227},{"name":"./utils","loc":{"line":3,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\qs\\lib\\parse.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\qs\\lib\\utils.js"}],"generated":{"js":"var $o0bt$exports = {};\nvar $o0bt$var$utils = $parcel$require(\"o0bt\", \"./utils\");\nvar $o0bt$var$has = Object.prototype.hasOwnProperty;\nvar $o0bt$var$defaults = {\n  allowDots: false,\n  allowPrototypes: false,\n  arrayLimit: 20,\n  decoder: $o0bt$var$utils.decode,\n  delimiter: '&',\n  depth: 5,\n  parameterLimit: 1000,\n  plainObjects: false,\n  strictNullHandling: false\n};\n\nvar $o0bt$var$parseValues = function parseQueryStringValues(str, options) {\n  var obj = {};\n  var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n  var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n  var parts = cleanStr.split(options.delimiter, limit);\n\n  for (var i = 0; i < parts.length; ++i) {\n    var part = parts[i];\n    var bracketEqualsPos = part.indexOf(']=');\n    var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n    var key, val;\n\n    if (pos === -1) {\n      key = options.decoder(part, $o0bt$var$defaults.decoder);\n      val = options.strictNullHandling ? null : '';\n    } else {\n      key = options.decoder(part.slice(0, pos), $o0bt$var$defaults.decoder);\n      val = options.decoder(part.slice(pos + 1), $o0bt$var$defaults.decoder);\n    }\n\n    if ($o0bt$var$has.call(obj, key)) {\n      obj[key] = [].concat(obj[key]).concat(val);\n    } else {\n      obj[key] = val;\n    }\n  }\n\n  return obj;\n};\n\nvar $o0bt$var$parseObject = function (chain, val, options) {\n  var leaf = val;\n\n  for (var i = chain.length - 1; i >= 0; --i) {\n    var obj;\n    var root = chain[i];\n\n    if (root === '[]') {\n      obj = [];\n      obj = obj.concat(leaf);\n    } else {\n      obj = options.plainObjects ? Object.create(null) : {};\n      var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n      var index = parseInt(cleanRoot, 10);\n\n      if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {\n        obj = [];\n        obj[index] = leaf;\n      } else {\n        obj[cleanRoot] = leaf;\n      }\n    }\n\n    leaf = obj;\n  }\n\n  return leaf;\n};\n\nvar $o0bt$var$parseKeys = function parseQueryStringKeys(givenKey, val, options) {\n  if (!givenKey) {\n    return;\n  } // Transform dot notation to bracket notation\n\n\n  var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey; // The regex chunks\n\n  var brackets = /(\\[[^[\\]]*])/;\n  var child = /(\\[[^[\\]]*])/g; // Get the parent\n\n  var segment = brackets.exec(key);\n  var parent = segment ? key.slice(0, segment.index) : key; // Stash the parent if it exists\n\n  var keys = [];\n\n  if (parent) {\n    // If we aren't using plain objects, optionally prefix keys\n    // that would overwrite object prototype properties\n    if (!options.plainObjects && $o0bt$var$has.call(Object.prototype, parent)) {\n      if (!options.allowPrototypes) {\n        return;\n      }\n    }\n\n    keys.push(parent);\n  } // Loop through children appending to the array until we hit depth\n\n\n  var i = 0;\n\n  while ((segment = child.exec(key)) !== null && i < options.depth) {\n    i += 1;\n\n    if (!options.plainObjects && $o0bt$var$has.call(Object.prototype, segment[1].slice(1, -1))) {\n      if (!options.allowPrototypes) {\n        return;\n      }\n    }\n\n    keys.push(segment[1]);\n  } // If there's a remainder, just add whatever is left\n\n\n  if (segment) {\n    keys.push('[' + key.slice(segment.index) + ']');\n  }\n\n  return $o0bt$var$parseObject(keys, val, options);\n};\n\n$o0bt$exports = function (str, opts) {\n  var options = opts ? $o0bt$var$utils.assign({}, opts) : {};\n\n  if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {\n    throw new TypeError('Decoder has to be a function.');\n  }\n\n  options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;\n  options.delimiter = typeof options.delimiter === 'string' || $o0bt$var$utils.isRegExp(options.delimiter) ? options.delimiter : $o0bt$var$defaults.delimiter;\n  options.depth = typeof options.depth === 'number' ? options.depth : $o0bt$var$defaults.depth;\n  options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : $o0bt$var$defaults.arrayLimit;\n  options.parseArrays = options.parseArrays !== false;\n  options.decoder = typeof options.decoder === 'function' ? options.decoder : $o0bt$var$defaults.decoder;\n  options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : $o0bt$var$defaults.allowDots;\n  options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : $o0bt$var$defaults.plainObjects;\n  options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : $o0bt$var$defaults.allowPrototypes;\n  options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : $o0bt$var$defaults.parameterLimit;\n  options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : $o0bt$var$defaults.strictNullHandling;\n\n  if (str === '' || str === null || typeof str === 'undefined') {\n    return options.plainObjects ? Object.create(null) : {};\n  }\n\n  var tempObj = typeof str === 'string' ? $o0bt$var$parseValues(str, options) : str;\n  var obj = options.plainObjects ? Object.create(null) : {}; // Iterate over the keys and setup the new object\n\n  var keys = Object.keys(tempObj);\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    var newObj = $o0bt$var$parseKeys(key, tempObj[key], options);\n    obj = $o0bt$var$utils.merge(obj, newObj, options);\n  }\n\n  return $o0bt$var$utils.compact(obj);\n};"},"sourceMaps":null,"error":null,"hash":"ef1ef5f5bbb35ec3c2d8a38a0ab825f4","cacheData":{"env":{},"imports":{"$require$./utils":["./utils","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}