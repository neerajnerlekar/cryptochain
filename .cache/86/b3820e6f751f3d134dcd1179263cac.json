{"id":"Sy8s","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\package.json","includedInParent":true,"mtime":1598465886311},{"name":"randombytes","loc":{"line":3,"column":87},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\randombytes\\browser.js"},{"name":"create-hash","loc":{"line":4,"column":44},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\create-hash\\browser.js"},{"name":"create-hmac","loc":{"line":5,"column":44},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\create-hmac\\browser.js"},{"name":"browserify-sign/algos","loc":{"line":7,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\algos.js"},{"name":"pbkdf2","loc":{"line":14,"column":16},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\browser.js"},{"name":"browserify-cipher","loc":{"line":18,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-cipher\\browser.js"},{"name":"diffie-hellman","loc":{"line":31,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\diffie-hellman\\browser.js"},{"name":"browserify-sign","loc":{"line":39,"column":19},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\browser\\index.js"},{"name":"create-ecdh","loc":{"line":46,"column":29},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\create-ecdh\\browser.js"},{"name":"public-encrypt","loc":{"line":48,"column":28},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\browser.js"},{"name":"randomfill","loc":{"line":68,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\randomfill\\browser.js"}],"generated":{"js":"var $Sy8s$export$rng,\n    $Sy8s$export$pseudoRandomBytes,\n    $Sy8s$export$prng,\n    $Sy8s$export$Hash,\n    $Sy8s$export$Hmac,\n    $Sy8s$exports = {};\nvar $Sy8s$export$randomBytes = ($Sy8s$export$rng = ($Sy8s$export$pseudoRandomBytes = ($Sy8s$export$prng = $parcel$require(\"Sy8s\", \"randombytes\"), $Sy8s$exports.prng = $Sy8s$export$prng), $Sy8s$exports.pseudoRandomBytes = $Sy8s$export$pseudoRandomBytes), $Sy8s$exports.rng = $Sy8s$export$rng);\n$Sy8s$exports.randomBytes = $Sy8s$export$randomBytes;\nvar $Sy8s$export$createHash = ($Sy8s$export$Hash = $parcel$require(\"Sy8s\", \"create-hash\"), $Sy8s$exports.Hash = $Sy8s$export$Hash);\n$Sy8s$exports.createHash = $Sy8s$export$createHash;\nvar $Sy8s$export$createHmac = ($Sy8s$export$Hmac = $parcel$require(\"Sy8s\", \"create-hmac\"), $Sy8s$exports.Hmac = $Sy8s$export$Hmac);\n$Sy8s$exports.createHmac = $Sy8s$export$createHmac;\nvar $Sy8s$var$algos = $parcel$require(\"Sy8s\", \"browserify-sign/algos\");\nvar $Sy8s$var$algoKeys = Object.keys($Sy8s$var$algos);\nvar $Sy8s$var$hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat($Sy8s$var$algoKeys);\n\nvar $Sy8s$export$getHashes = function () {\n  return $Sy8s$var$hashes;\n};\n\n$Sy8s$exports.getHashes = $Sy8s$export$getHashes;\nvar $Sy8s$var$p = $parcel$require(\"Sy8s\", \"pbkdf2\");\nvar $Sy8s$export$pbkdf2 = $Sy8s$var$p.pbkdf2;\n$Sy8s$exports.pbkdf2 = $Sy8s$export$pbkdf2;\nvar $Sy8s$export$pbkdf2Sync = $Sy8s$var$p.pbkdf2Sync;\n$Sy8s$exports.pbkdf2Sync = $Sy8s$export$pbkdf2Sync;\nvar $Sy8s$var$aes = $parcel$require(\"Sy8s\", \"browserify-cipher\");\nvar $Sy8s$export$Cipher = $Sy8s$var$aes.Cipher;\n$Sy8s$exports.Cipher = $Sy8s$export$Cipher;\nvar $Sy8s$export$createCipher = $Sy8s$var$aes.createCipher;\n$Sy8s$exports.createCipher = $Sy8s$export$createCipher;\nvar $Sy8s$export$Cipheriv = $Sy8s$var$aes.Cipheriv;\n$Sy8s$exports.Cipheriv = $Sy8s$export$Cipheriv;\nvar $Sy8s$export$createCipheriv = $Sy8s$var$aes.createCipheriv;\n$Sy8s$exports.createCipheriv = $Sy8s$export$createCipheriv;\nvar $Sy8s$export$Decipher = $Sy8s$var$aes.Decipher;\n$Sy8s$exports.Decipher = $Sy8s$export$Decipher;\nvar $Sy8s$export$createDecipher = $Sy8s$var$aes.createDecipher;\n$Sy8s$exports.createDecipher = $Sy8s$export$createDecipher;\nvar $Sy8s$export$Decipheriv = $Sy8s$var$aes.Decipheriv;\n$Sy8s$exports.Decipheriv = $Sy8s$export$Decipheriv;\nvar $Sy8s$export$createDecipheriv = $Sy8s$var$aes.createDecipheriv;\n$Sy8s$exports.createDecipheriv = $Sy8s$export$createDecipheriv;\nvar $Sy8s$export$getCiphers = $Sy8s$var$aes.getCiphers;\n$Sy8s$exports.getCiphers = $Sy8s$export$getCiphers;\nvar $Sy8s$export$listCiphers = $Sy8s$var$aes.listCiphers;\n$Sy8s$exports.listCiphers = $Sy8s$export$listCiphers;\nvar $Sy8s$var$dh = $parcel$require(\"Sy8s\", \"diffie-hellman\");\nvar $Sy8s$export$DiffieHellmanGroup = $Sy8s$var$dh.DiffieHellmanGroup;\n$Sy8s$exports.DiffieHellmanGroup = $Sy8s$export$DiffieHellmanGroup;\nvar $Sy8s$export$createDiffieHellmanGroup = $Sy8s$var$dh.createDiffieHellmanGroup;\n$Sy8s$exports.createDiffieHellmanGroup = $Sy8s$export$createDiffieHellmanGroup;\nvar $Sy8s$export$getDiffieHellman = $Sy8s$var$dh.getDiffieHellman;\n$Sy8s$exports.getDiffieHellman = $Sy8s$export$getDiffieHellman;\nvar $Sy8s$export$createDiffieHellman = $Sy8s$var$dh.createDiffieHellman;\n$Sy8s$exports.createDiffieHellman = $Sy8s$export$createDiffieHellman;\nvar $Sy8s$export$DiffieHellman = $Sy8s$var$dh.DiffieHellman;\n$Sy8s$exports.DiffieHellman = $Sy8s$export$DiffieHellman;\nvar $Sy8s$var$sign = $parcel$require(\"Sy8s\", \"browserify-sign\");\nvar $Sy8s$export$createSign = $Sy8s$var$sign.createSign;\n$Sy8s$exports.createSign = $Sy8s$export$createSign;\nvar $Sy8s$export$Sign = $Sy8s$var$sign.Sign;\n$Sy8s$exports.Sign = $Sy8s$export$Sign;\nvar $Sy8s$export$createVerify = $Sy8s$var$sign.createVerify;\n$Sy8s$exports.createVerify = $Sy8s$export$createVerify;\nvar $Sy8s$export$Verify = $Sy8s$var$sign.Verify;\n$Sy8s$exports.Verify = $Sy8s$export$Verify;\nvar $Sy8s$export$createECDH = $parcel$require(\"Sy8s\", \"create-ecdh\");\n$Sy8s$exports.createECDH = $Sy8s$export$createECDH;\nvar $Sy8s$var$publicEncrypt = $parcel$require(\"Sy8s\", \"public-encrypt\");\nvar $Sy8s$export$publicEncrypt = $Sy8s$var$publicEncrypt.publicEncrypt;\n$Sy8s$exports.publicEncrypt = $Sy8s$export$publicEncrypt;\nvar $Sy8s$export$privateEncrypt = $Sy8s$var$publicEncrypt.privateEncrypt;\n$Sy8s$exports.privateEncrypt = $Sy8s$export$privateEncrypt;\nvar $Sy8s$export$publicDecrypt = $Sy8s$var$publicEncrypt.publicDecrypt;\n$Sy8s$exports.publicDecrypt = $Sy8s$export$publicDecrypt;\nvar $Sy8s$export$privateDecrypt = $Sy8s$var$publicEncrypt.privateDecrypt;\n$Sy8s$exports.privateDecrypt = $Sy8s$export$privateDecrypt; // the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar $Sy8s$var$rf = $parcel$require(\"Sy8s\", \"randomfill\");\nvar $Sy8s$export$randomFill = $Sy8s$var$rf.randomFill;\n$Sy8s$exports.randomFill = $Sy8s$export$randomFill;\nvar $Sy8s$export$randomFillSync = $Sy8s$var$rf.randomFillSync;\n$Sy8s$exports.randomFillSync = $Sy8s$export$randomFillSync;\n\nvar $Sy8s$export$createCredentials = function () {\n  throw new Error(['sorry, createCredentials is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\\n'));\n};\n\n$Sy8s$exports.createCredentials = $Sy8s$export$createCredentials;\nvar $Sy8s$export$constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n};\n$Sy8s$exports.constants = $Sy8s$export$constants;"},"sourceMaps":null,"error":null,"hash":"c1e936cdbaa336d7d32cb8a3a9be169c","cacheData":{"env":{},"imports":{"$require$browserify-sign/algos":["browserify-sign/algos","*"],"$require$pbkdf2":["pbkdf2","*"],"$require$browserify-cipher":["browserify-cipher","*"],"$require$diffie-hellman":["diffie-hellman","*"],"$require$browserify-sign":["browserify-sign","*"],"$require$public-encrypt":["public-encrypt","*"],"$require$randomfill":["randomfill","*"],"$require$randombytes":["randombytes","*"],"$require$create-hash":["create-hash","*"],"$require$create-hmac":["create-hmac","*"],"$require$create-ecdh":["create-ecdh","*"]},"exports":{"randomBytes":"$Sy8s$export$randomBytes","createHash":"$Sy8s$export$createHash","createHmac":"$Sy8s$export$createHmac","getHashes":"$Sy8s$export$getHashes","pbkdf2":"$Sy8s$export$pbkdf2","pbkdf2Sync":"$Sy8s$export$pbkdf2Sync","Cipher":"$Sy8s$export$Cipher","createCipher":"$Sy8s$export$createCipher","Cipheriv":"$Sy8s$export$Cipheriv","createCipheriv":"$Sy8s$export$createCipheriv","Decipher":"$Sy8s$export$Decipher","createDecipher":"$Sy8s$export$createDecipher","Decipheriv":"$Sy8s$export$Decipheriv","createDecipheriv":"$Sy8s$export$createDecipheriv","getCiphers":"$Sy8s$export$getCiphers","listCiphers":"$Sy8s$export$listCiphers","DiffieHellmanGroup":"$Sy8s$export$DiffieHellmanGroup","createDiffieHellmanGroup":"$Sy8s$export$createDiffieHellmanGroup","getDiffieHellman":"$Sy8s$export$getDiffieHellman","createDiffieHellman":"$Sy8s$export$createDiffieHellman","DiffieHellman":"$Sy8s$export$DiffieHellman","createSign":"$Sy8s$export$createSign","Sign":"$Sy8s$export$Sign","createVerify":"$Sy8s$export$createVerify","Verify":"$Sy8s$export$Verify","createECDH":"$Sy8s$export$createECDH","publicEncrypt":"$Sy8s$export$publicEncrypt","privateEncrypt":"$Sy8s$export$privateEncrypt","publicDecrypt":"$Sy8s$export$publicDecrypt","privateDecrypt":"$Sy8s$export$privateDecrypt","randomFill":"$Sy8s$export$randomFill","randomFillSync":"$Sy8s$export$randomFillSync","createCredentials":"$Sy8s$export$createCredentials","constants":"$Sy8s$export$constants","rng":"$Sy8s$export$rng","pseudoRandomBytes":"$Sy8s$export$pseudoRandomBytes","prng":"$Sy8s$export$prng","Hash":"$Sy8s$export$Hash","Hmac":"$Sy8s$export$Hmac"},"wildcards":[],"sideEffects":true,"isCommonJS":true,"shouldWrap":false}}