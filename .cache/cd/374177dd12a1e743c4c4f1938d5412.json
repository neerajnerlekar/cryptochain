{"id":"tmM5","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\package.json","includedInParent":true,"mtime":1598465897439},{"name":"inherits","loc":{"line":3,"column":25},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\decoders\\der.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\inherits\\inherits_browser.js"},{"name":"bn.js","loc":{"line":5,"column":23},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\decoders\\der.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\bn.js\\lib\\bn.js"},{"name":"../base/buffer","loc":{"line":6,"column":30},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\decoders\\der.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\base\\buffer.js"},{"name":"../base/node","loc":{"line":7,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\decoders\\der.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\base\\node.js"},{"name":"../constants/der","loc":{"line":10,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\decoders\\der.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\constants\\der.js"}],"generated":{"js":"var $tmM5$exports = {};\nconst $tmM5$var$inherits = $parcel$require(\"tmM5\", \"inherits\");\nconst $tmM5$var$bignum = $parcel$require(\"tmM5\", \"bn.js\");\nconst $tmM5$var$DecoderBuffer = $parcel$require(\"tmM5\", \"../base/buffer\").DecoderBuffer;\nconst $tmM5$var$Node = $parcel$require(\"tmM5\", \"../base/node\"); // Import DER constants\n\nconst $tmM5$var$der = $parcel$require(\"tmM5\", \"../constants/der\");\n\nfunction $tmM5$var$DERDecoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity; // Construct base tree\n\n  this.tree = new $tmM5$var$DERNode();\n\n  this.tree._init(entity.body);\n}\n\n$tmM5$exports = $tmM5$var$DERDecoder;\n\n$tmM5$var$DERDecoder.prototype.decode = function decode(data, options) {\n  if (!$tmM5$var$DecoderBuffer.isDecoderBuffer(data)) {\n    data = new $tmM5$var$DecoderBuffer(data, options);\n  }\n\n  return this.tree._decode(data, options);\n}; // Tree methods\n\n\nfunction $tmM5$var$DERNode(parent) {\n  $tmM5$var$Node.call(this, 'der', parent);\n}\n\n$tmM5$var$inherits($tmM5$var$DERNode, $tmM5$var$Node);\n\n$tmM5$var$DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n  if (buffer.isEmpty()) return false;\n  const state = buffer.save();\n  const decodedTag = $tmM5$var$derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n  if (buffer.isError(decodedTag)) return decodedTag;\n  buffer.restore(state);\n  return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;\n};\n\n$tmM5$var$DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n  const decodedTag = $tmM5$var$derDecodeTag(buffer, 'Failed to decode tag of \"' + tag + '\"');\n  if (buffer.isError(decodedTag)) return decodedTag;\n  let len = $tmM5$var$derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of \"' + tag + '\"'); // Failure\n\n  if (buffer.isError(len)) return len;\n\n  if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {\n    return buffer.error('Failed to match tag: \"' + tag + '\"');\n  }\n\n  if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"'); // Indefinite length... find END tag\n\n  const state = buffer.save();\n\n  const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: \"' + this.tag + '\"');\n\n  if (buffer.isError(res)) return res;\n  len = buffer.offset - state.offset;\n  buffer.restore(state);\n  return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n};\n\n$tmM5$var$DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n  for (;;) {\n    const tag = $tmM5$var$derDecodeTag(buffer, fail);\n    if (buffer.isError(tag)) return tag;\n    const len = $tmM5$var$derDecodeLen(buffer, tag.primitive, fail);\n    if (buffer.isError(len)) return len;\n    let res;\n    if (tag.primitive || len !== null) res = buffer.skip(len);else res = this._skipUntilEnd(buffer, fail); // Failure\n\n    if (buffer.isError(res)) return res;\n    if (tag.tagStr === 'end') break;\n  }\n};\n\n$tmM5$var$DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {\n  const result = [];\n\n  while (!buffer.isEmpty()) {\n    const possibleEnd = this._peekTag(buffer, 'end');\n\n    if (buffer.isError(possibleEnd)) return possibleEnd;\n    const res = decoder.decode(buffer, 'der', options);\n    if (buffer.isError(res) && possibleEnd) break;\n    result.push(res);\n  }\n\n  return result;\n};\n\n$tmM5$var$DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n  if (tag === 'bitstr') {\n    const unused = buffer.readUInt8();\n    if (buffer.isError(unused)) return unused;\n    return {\n      unused: unused,\n      data: buffer.raw()\n    };\n  } else if (tag === 'bmpstr') {\n    const raw = buffer.raw();\n    if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');\n    let str = '';\n\n    for (let i = 0; i < raw.length / 2; i++) {\n      str += String.fromCharCode(raw.readUInt16BE(i * 2));\n    }\n\n    return str;\n  } else if (tag === 'numstr') {\n    const numstr = buffer.raw().toString('ascii');\n\n    if (!this._isNumstr(numstr)) {\n      return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');\n    }\n\n    return numstr;\n  } else if (tag === 'octstr') {\n    return buffer.raw();\n  } else if (tag === 'objDesc') {\n    return buffer.raw();\n  } else if (tag === 'printstr') {\n    const printstr = buffer.raw().toString('ascii');\n\n    if (!this._isPrintstr(printstr)) {\n      return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');\n    }\n\n    return printstr;\n  } else if (/str$/.test(tag)) {\n    return buffer.raw().toString();\n  } else {\n    return buffer.error('Decoding of string type: ' + tag + ' unsupported');\n  }\n};\n\n$tmM5$var$DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n  let result;\n  const identifiers = [];\n  let ident = 0;\n  let subident = 0;\n\n  while (!buffer.isEmpty()) {\n    subident = buffer.readUInt8();\n    ident <<= 7;\n    ident |= subident & 0x7f;\n\n    if ((subident & 0x80) === 0) {\n      identifiers.push(ident);\n      ident = 0;\n    }\n  }\n\n  if (subident & 0x80) identifiers.push(ident);\n  const first = identifiers[0] / 40 | 0;\n  const second = identifiers[0] % 40;\n  if (relative) result = identifiers;else result = [first, second].concat(identifiers.slice(1));\n\n  if (values) {\n    let tmp = values[result.join(' ')];\n    if (tmp === undefined) tmp = values[result.join('.')];\n    if (tmp !== undefined) result = tmp;\n  }\n\n  return result;\n};\n\n$tmM5$var$DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n  const str = buffer.raw().toString();\n  let year;\n  let mon;\n  let day;\n  let hour;\n  let min;\n  let sec;\n\n  if (tag === 'gentime') {\n    year = str.slice(0, 4) | 0;\n    mon = str.slice(4, 6) | 0;\n    day = str.slice(6, 8) | 0;\n    hour = str.slice(8, 10) | 0;\n    min = str.slice(10, 12) | 0;\n    sec = str.slice(12, 14) | 0;\n  } else if (tag === 'utctime') {\n    year = str.slice(0, 2) | 0;\n    mon = str.slice(2, 4) | 0;\n    day = str.slice(4, 6) | 0;\n    hour = str.slice(6, 8) | 0;\n    min = str.slice(8, 10) | 0;\n    sec = str.slice(10, 12) | 0;\n    if (year < 70) year = 2000 + year;else year = 1900 + year;\n  } else {\n    return buffer.error('Decoding ' + tag + ' time is not supported yet');\n  }\n\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\n\n$tmM5$var$DERNode.prototype._decodeNull = function decodeNull() {\n  return null;\n};\n\n$tmM5$var$DERNode.prototype._decodeBool = function decodeBool(buffer) {\n  const res = buffer.readUInt8();\n  if (buffer.isError(res)) return res;else return res !== 0;\n};\n\n$tmM5$var$DERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n  // Bigint, return as it is (assume big endian)\n  const raw = buffer.raw();\n  let res = new $tmM5$var$bignum(raw);\n  if (values) res = values[res.toString(10)] || res;\n  return res;\n};\n\n$tmM5$var$DERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function') entity = entity(obj);\n  return entity._getDecoder('der').tree;\n}; // Utility methods\n\n\nfunction $tmM5$var$derDecodeTag(buf, fail) {\n  let tag = buf.readUInt8(fail);\n  if (buf.isError(tag)) return tag;\n  const cls = $tmM5$var$der.tagClass[tag >> 6];\n  const primitive = (tag & 0x20) === 0; // Multi-octet tag - load\n\n  if ((tag & 0x1f) === 0x1f) {\n    let oct = tag;\n    tag = 0;\n\n    while ((oct & 0x80) === 0x80) {\n      oct = buf.readUInt8(fail);\n      if (buf.isError(oct)) return oct;\n      tag <<= 7;\n      tag |= oct & 0x7f;\n    }\n  } else {\n    tag &= 0x1f;\n  }\n\n  const tagStr = $tmM5$var$der.tag[tag];\n  return {\n    cls: cls,\n    primitive: primitive,\n    tag: tag,\n    tagStr: tagStr\n  };\n}\n\nfunction $tmM5$var$derDecodeLen(buf, primitive, fail) {\n  let len = buf.readUInt8(fail);\n  if (buf.isError(len)) return len; // Indefinite form\n\n  if (!primitive && len === 0x80) return null; // Definite form\n\n  if ((len & 0x80) === 0) {\n    // Short form\n    return len;\n  } // Long form\n\n\n  const num = len & 0x7f;\n  if (num > 4) return buf.error('length octect is too long');\n  len = 0;\n\n  for (let i = 0; i < num; i++) {\n    len <<= 8;\n    const j = buf.readUInt8(fail);\n    if (buf.isError(j)) return j;\n    len |= j;\n  }\n\n  return len;\n}"},"sourceMaps":null,"error":null,"hash":"147abe57b88443f817a0d29e9e9e3f78","cacheData":{"env":{},"imports":{"$require$inherits":["inherits","*"],"$require$bn.js":["bn.js","*"],"$require$../base/buffer":["../base/buffer","*"],"$require$../base/node":["../base/node","*"],"$require$../constants/der":["../constants/der","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}