{"id":"vzEX","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\bytes\\package.json","includedInParent":true,"mtime":1598465924830}],"generated":{"js":"var $vzEX$exports = {};\n\n/**\n * Module exports.\n * @public\n */\n$vzEX$exports = $vzEX$var$bytes;\n$vzEX$exports.format = $vzEX$var$format;\n$vzEX$exports.parse = $vzEX$var$parse;\n/**\n * Module variables.\n * @private\n */\n\nvar $vzEX$var$formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\nvar $vzEX$var$formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\nvar $vzEX$var$map = {\n  b: 1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: (1 << 30) * 1024\n};\nvar $vzEX$var$parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb)$/i;\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction $vzEX$var$bytes(value, options) {\n  if (typeof value === 'string') {\n    return $vzEX$var$parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return $vzEX$var$format(value, options);\n  }\n\n  return null;\n}\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\n\nfunction $vzEX$var$format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = options && options.thousandsSeparator || '';\n  var unitSeparator = options && options.unitSeparator || '';\n  var decimalPlaces = options && options.decimalPlaces !== undefined ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = options && options.unit || '';\n\n  if (!unit || !$vzEX$var$map[unit.toLowerCase()]) {\n    if (mag >= $vzEX$var$map.tb) {\n      unit = 'TB';\n    } else if (mag >= $vzEX$var$map.gb) {\n      unit = 'GB';\n    } else if (mag >= $vzEX$var$map.mb) {\n      unit = 'MB';\n    } else if (mag >= $vzEX$var$map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / $vzEX$var$map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace($vzEX$var$formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.replace($vzEX$var$formatThousandsRegExp, thousandsSeparator);\n  }\n\n  return str + unitSeparator + unit;\n}\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\n\nfunction $vzEX$var$parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  } // Test if the string passed is valid\n\n\n  var results = $vzEX$var$parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b';\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  return Math.floor($vzEX$var$map[unit] * floatValue);\n}"},"sourceMaps":null,"error":null,"hash":"b4ae6aa9d294350088a1f1f89aab7fa0","cacheData":{"env":{},"imports":{},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}