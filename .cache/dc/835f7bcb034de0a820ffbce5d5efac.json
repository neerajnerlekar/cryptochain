{"id":"lj1J","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\package.json","includedInParent":true,"mtime":1598465886705},{"name":"safe-buffer","loc":{"line":2,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\safe-buffer\\index.js"},{"name":"readable-stream","loc":{"line":3,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\node_modules\\readable-stream\\readable-browser.js"},{"name":"inherits","loc":{"line":4,"column":23},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash-base\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\inherits\\inherits_browser.js"}],"generated":{"js":"\nvar $lj1J$exports = {};\nvar $lj1J$var$Buffer = $parcel$require(\"lj1J\", \"safe-buffer\").Buffer;\nvar $lj1J$var$Transform = $parcel$require(\"lj1J\", \"readable-stream\").Transform;\nvar $lj1J$var$inherits = $parcel$require(\"lj1J\", \"inherits\");\n\nfunction $lj1J$var$throwIfNotStringOrBuffer(val, prefix) {\n  if (!$lj1J$var$Buffer.isBuffer(val) && typeof val !== 'string') {\n    throw new TypeError(prefix + ' must be a string or a buffer');\n  }\n}\n\nfunction $lj1J$var$HashBase(blockSize) {\n  $lj1J$var$Transform.call(this);\n  this._block = $lj1J$var$Buffer.allocUnsafe(blockSize);\n  this._blockSize = blockSize;\n  this._blockOffset = 0;\n  this._length = [0, 0, 0, 0];\n  this._finalized = false;\n}\n\n$lj1J$var$inherits($lj1J$var$HashBase, $lj1J$var$Transform);\n\n$lj1J$var$HashBase.prototype._transform = function (chunk, encoding, callback) {\n  var error = null;\n\n  try {\n    this.update(chunk, encoding);\n  } catch (err) {\n    error = err;\n  }\n\n  callback(error);\n};\n\n$lj1J$var$HashBase.prototype._flush = function (callback) {\n  var error = null;\n\n  try {\n    this.push(this.digest());\n  } catch (err) {\n    error = err;\n  }\n\n  callback(error);\n};\n\n$lj1J$var$HashBase.prototype.update = function (data, encoding) {\n  $lj1J$var$throwIfNotStringOrBuffer(data, 'Data');\n  if (this._finalized) throw new Error('Digest already called');\n  if (!$lj1J$var$Buffer.isBuffer(data)) data = $lj1J$var$Buffer.from(data, encoding); // consume data\n\n  var block = this._block;\n  var offset = 0;\n\n  while (this._blockOffset + data.length - offset >= this._blockSize) {\n    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];\n\n    this._update();\n\n    this._blockOffset = 0;\n  }\n\n  while (offset < data.length) block[this._blockOffset++] = data[offset++]; // update length\n\n\n  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n    this._length[j] += carry;\n    carry = this._length[j] / 0x0100000000 | 0;\n    if (carry > 0) this._length[j] -= 0x0100000000 * carry;\n  }\n\n  return this;\n};\n\n$lj1J$var$HashBase.prototype._update = function () {\n  throw new Error('_update is not implemented');\n};\n\n$lj1J$var$HashBase.prototype.digest = function (encoding) {\n  if (this._finalized) throw new Error('Digest already called');\n  this._finalized = true;\n\n  var digest = this._digest();\n\n  if (encoding !== undefined) digest = digest.toString(encoding); // reset state\n\n  this._block.fill(0);\n\n  this._blockOffset = 0;\n\n  for (var i = 0; i < 4; ++i) this._length[i] = 0;\n\n  return digest;\n};\n\n$lj1J$var$HashBase.prototype._digest = function () {\n  throw new Error('_digest is not implemented');\n};\n\n$lj1J$exports = $lj1J$var$HashBase;"},"sourceMaps":null,"error":null,"hash":"57b98169abce4cd7919994808d5ed79d","cacheData":{"env":{},"imports":{"$require$safe-buffer":["safe-buffer","*"],"$require$readable-stream":["readable-stream","*"],"$require$inherits":["inherits","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true,"shouldWrap":true}}