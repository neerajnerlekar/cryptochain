{"id":"Hore","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\diffie-hellman\\package.json","includedInParent":true,"mtime":1598465898007},{"name":"bn.js","loc":{"line":1,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\diffie-hellman\\lib\\dh.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\bn.js\\lib\\bn.js"},{"name":"miller-rabin","loc":{"line":2,"column":26},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\diffie-hellman\\lib\\dh.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\miller-rabin\\lib\\mr.js"},{"name":"./generatePrime","loc":{"line":9,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\diffie-hellman\\lib\\dh.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\diffie-hellman\\lib\\generatePrime.js"},{"name":"randombytes","loc":{"line":10,"column":26},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\diffie-hellman\\lib\\dh.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\randombytes\\browser.js"},{"name":"buffer","parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\diffie-hellman\\lib\\dh.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\buffer\\index.js"}],"generated":{"js":"var $Hore$exports = {};\nvar $Hore$var$Buffer = $parcel$require(\"Hore\", \"buffer\").Buffer;\nvar $Hore$var$BN = $parcel$require(\"Hore\", \"bn.js\");\nvar $Hore$var$MillerRabin = $parcel$require(\"Hore\", \"miller-rabin\");\nvar $Hore$var$millerRabin = new $Hore$var$MillerRabin();\nvar $Hore$var$TWENTYFOUR = new $Hore$var$BN(24);\nvar $Hore$var$ELEVEN = new $Hore$var$BN(11);\nvar $Hore$var$TEN = new $Hore$var$BN(10);\nvar $Hore$var$THREE = new $Hore$var$BN(3);\nvar $Hore$var$SEVEN = new $Hore$var$BN(7);\nvar $Hore$var$primes = $parcel$require(\"Hore\", \"./generatePrime\");\nvar $Hore$var$randomBytes = $parcel$require(\"Hore\", \"randombytes\");\n$Hore$exports = $Hore$var$DH;\n\nfunction $Hore$var$setPublicKey(pub, enc) {\n  enc = enc || 'utf8';\n\n  if (!$Hore$var$Buffer.isBuffer(pub)) {\n    pub = new $Hore$var$Buffer(pub, enc);\n  }\n\n  this._pub = new $Hore$var$BN(pub);\n  return this;\n}\n\nfunction $Hore$var$setPrivateKey(priv, enc) {\n  enc = enc || 'utf8';\n\n  if (!$Hore$var$Buffer.isBuffer(priv)) {\n    priv = new $Hore$var$Buffer(priv, enc);\n  }\n\n  this._priv = new $Hore$var$BN(priv);\n  return this;\n}\n\nvar $Hore$var$primeCache = {};\n\nfunction $Hore$var$checkPrime(prime, generator) {\n  var gen = generator.toString('hex');\n  var hex = [gen, prime.toString(16)].join('_');\n\n  if (hex in $Hore$var$primeCache) {\n    return $Hore$var$primeCache[hex];\n  }\n\n  var error = 0;\n\n  if (prime.isEven() || !$Hore$var$primes.simpleSieve || !$Hore$var$primes.fermatTest(prime) || !$Hore$var$millerRabin.test(prime)) {\n    //not a prime so +1\n    error += 1;\n\n    if (gen === '02' || gen === '05') {\n      // we'd be able to check the generator\n      // it would fail so +8\n      error += 8;\n    } else {\n      //we wouldn't be able to test the generator\n      // so +4\n      error += 4;\n    }\n\n    $Hore$var$primeCache[hex] = error;\n    return error;\n  }\n\n  if (!$Hore$var$millerRabin.test(prime.shrn(1))) {\n    //not a safe prime\n    error += 2;\n  }\n\n  var rem;\n\n  switch (gen) {\n    case '02':\n      if (prime.mod($Hore$var$TWENTYFOUR).cmp($Hore$var$ELEVEN)) {\n        // unsuidable generator\n        error += 8;\n      }\n\n      break;\n\n    case '05':\n      rem = prime.mod($Hore$var$TEN);\n\n      if (rem.cmp($Hore$var$THREE) && rem.cmp($Hore$var$SEVEN)) {\n        // prime mod 10 needs to equal 3 or 7\n        error += 8;\n      }\n\n      break;\n\n    default:\n      error += 4;\n  }\n\n  $Hore$var$primeCache[hex] = error;\n  return error;\n}\n\nfunction $Hore$var$DH(prime, generator, malleable) {\n  this.setGenerator(generator);\n  this.__prime = new $Hore$var$BN(prime);\n  this._prime = $Hore$var$BN.mont(this.__prime);\n  this._primeLen = prime.length;\n  this._pub = undefined;\n  this._priv = undefined;\n  this._primeCode = undefined;\n\n  if (malleable) {\n    this.setPublicKey = $Hore$var$setPublicKey;\n    this.setPrivateKey = $Hore$var$setPrivateKey;\n  } else {\n    this._primeCode = 8;\n  }\n}\n\nObject.defineProperty($Hore$var$DH.prototype, 'verifyError', {\n  enumerable: true,\n  get: function () {\n    if (typeof this._primeCode !== 'number') {\n      this._primeCode = $Hore$var$checkPrime(this.__prime, this.__gen);\n    }\n\n    return this._primeCode;\n  }\n});\n\n$Hore$var$DH.prototype.generateKeys = function () {\n  if (!this._priv) {\n    this._priv = new $Hore$var$BN($Hore$var$randomBytes(this._primeLen));\n  }\n\n  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();\n  return this.getPublicKey();\n};\n\n$Hore$var$DH.prototype.computeSecret = function (other) {\n  other = new $Hore$var$BN(other);\n  other = other.toRed(this._prime);\n  var secret = other.redPow(this._priv).fromRed();\n  var out = new $Hore$var$Buffer(secret.toArray());\n  var prime = this.getPrime();\n\n  if (out.length < prime.length) {\n    var front = new $Hore$var$Buffer(prime.length - out.length);\n    front.fill(0);\n    out = $Hore$var$Buffer.concat([front, out]);\n  }\n\n  return out;\n};\n\n$Hore$var$DH.prototype.getPublicKey = function getPublicKey(enc) {\n  return $Hore$var$formatReturnValue(this._pub, enc);\n};\n\n$Hore$var$DH.prototype.getPrivateKey = function getPrivateKey(enc) {\n  return $Hore$var$formatReturnValue(this._priv, enc);\n};\n\n$Hore$var$DH.prototype.getPrime = function (enc) {\n  return $Hore$var$formatReturnValue(this.__prime, enc);\n};\n\n$Hore$var$DH.prototype.getGenerator = function (enc) {\n  return $Hore$var$formatReturnValue(this._gen, enc);\n};\n\n$Hore$var$DH.prototype.setGenerator = function (gen, enc) {\n  enc = enc || 'utf8';\n\n  if (!$Hore$var$Buffer.isBuffer(gen)) {\n    gen = new $Hore$var$Buffer(gen, enc);\n  }\n\n  this.__gen = gen;\n  this._gen = new $Hore$var$BN(gen);\n  return this;\n};\n\nfunction $Hore$var$formatReturnValue(bn, enc) {\n  var buf = new $Hore$var$Buffer(bn.toArray());\n\n  if (!enc) {\n    return buf;\n  } else {\n    return buf.toString(enc);\n  }\n}"},"sourceMaps":null,"error":null,"hash":"c0b5fac7985719155ff0d91e68bc6311","cacheData":{"env":{},"imports":{"$require$bn.js":["bn.js","*"],"$require$miller-rabin":["miller-rabin","*"],"$require$./generatePrime":["./generatePrime","*"],"$require$randombytes":["randombytes","*"],"$require$buffer":["buffer","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}