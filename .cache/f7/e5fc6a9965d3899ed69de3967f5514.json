{"id":"yANG","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-rsa\\package.json","includedInParent":true,"mtime":1598465898136},{"name":"bn.js","loc":{"line":1,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-rsa\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\bn.js\\lib\\bn.js"},{"name":"randombytes","loc":{"line":2,"column":26},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-rsa\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\randombytes\\browser.js"},{"name":"buffer","parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-rsa\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\buffer\\index.js"}],"generated":{"js":"var $yANG$exports = {};\nvar $yANG$var$Buffer = $parcel$require(\"yANG\", \"buffer\").Buffer;\nvar $yANG$var$bn = $parcel$require(\"yANG\", \"bn.js\");\nvar $yANG$var$randomBytes = $parcel$require(\"yANG\", \"randombytes\");\n$yANG$exports = $yANG$var$crt;\n\nfunction $yANG$var$blind(priv) {\n  var r = $yANG$var$getr(priv);\n  var blinder = r.toRed($yANG$var$bn.mont(priv.modulus)).redPow(new $yANG$var$bn(priv.publicExponent)).fromRed();\n  return {\n    blinder: blinder,\n    unblinder: r.invm(priv.modulus)\n  };\n}\n\nfunction $yANG$var$crt(msg, priv) {\n  var blinds = $yANG$var$blind(priv);\n  var len = priv.modulus.byteLength();\n  var mod = $yANG$var$bn.mont(priv.modulus);\n  var blinded = new $yANG$var$bn(msg).mul(blinds.blinder).umod(priv.modulus);\n  var c1 = blinded.toRed($yANG$var$bn.mont(priv.prime1));\n  var c2 = blinded.toRed($yANG$var$bn.mont(priv.prime2));\n  var qinv = priv.coefficient;\n  var p = priv.prime1;\n  var q = priv.prime2;\n  var m1 = c1.redPow(priv.exponent1);\n  var m2 = c2.redPow(priv.exponent2);\n  m1 = m1.fromRed();\n  m2 = m2.fromRed();\n  var h = m1.isub(m2).imul(qinv).umod(p);\n  h.imul(q);\n  m2.iadd(h);\n  return new $yANG$var$Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));\n}\n\n$yANG$var$crt.getr = $yANG$var$getr;\n\nfunction $yANG$var$getr(priv) {\n  var len = priv.modulus.byteLength();\n  var r = new $yANG$var$bn($yANG$var$randomBytes(len));\n\n  while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {\n    r = new $yANG$var$bn($yANG$var$randomBytes(len));\n  }\n\n  return r;\n}"},"sourceMaps":null,"error":null,"hash":"74c4e1fe9f3b4bb0777095cb7d7739b7","cacheData":{"env":{},"imports":{"$require$bn.js":["bn.js","*"],"$require$randombytes":["randombytes","*"],"$require$buffer":["buffer","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}