{"id":"DMHf","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\package.json","includedInParent":true,"mtime":1598465886487},{"name":"safe-buffer","loc":{"line":6,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\aes.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"}],"generated":{"js":"\nvar $DMHf$exports = {};\n// based on the aes implimentation in triple sec\n// https://github.com/keybase/triplesec\n// which is in turn based on the one from crypto-js\n// https://code.google.com/p/crypto-js/\nvar $DMHf$var$Buffer = $parcel$require(\"DMHf\", \"safe-buffer\").Buffer;\n\nfunction $DMHf$var$asUInt32Array(buf) {\n  if (!$DMHf$var$Buffer.isBuffer(buf)) buf = $DMHf$var$Buffer.from(buf);\n  var len = buf.length / 4 | 0;\n  var out = new Array(len);\n\n  for (var i = 0; i < len; i++) {\n    out[i] = buf.readUInt32BE(i * 4);\n  }\n\n  return out;\n}\n\nfunction $DMHf$var$scrubVec(v) {\n  for (var i = 0; i < v.length; v++) {\n    v[i] = 0;\n  }\n}\n\nfunction $DMHf$var$cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {\n  var SUB_MIX0 = SUB_MIX[0];\n  var SUB_MIX1 = SUB_MIX[1];\n  var SUB_MIX2 = SUB_MIX[2];\n  var SUB_MIX3 = SUB_MIX[3];\n  var s0 = M[0] ^ keySchedule[0];\n  var s1 = M[1] ^ keySchedule[1];\n  var s2 = M[2] ^ keySchedule[2];\n  var s3 = M[3] ^ keySchedule[3];\n  var t0, t1, t2, t3;\n  var ksRow = 4;\n\n  for (var round = 1; round < nRounds; round++) {\n    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];\n    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];\n    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];\n    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];\n    s0 = t0;\n    s1 = t1;\n    s2 = t2;\n    s3 = t3;\n  }\n\n  t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n  t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n  t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n  t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n  t0 = t0 >>> 0;\n  t1 = t1 >>> 0;\n  t2 = t2 >>> 0;\n  t3 = t3 >>> 0;\n  return [t0, t1, t2, t3];\n} // AES constants\n\n\nvar $DMHf$var$RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\nvar $DMHf$var$G = function () {\n  // Compute double table\n  var d = new Array(256);\n\n  for (var j = 0; j < 256; j++) {\n    if (j < 128) {\n      d[j] = j << 1;\n    } else {\n      d[j] = j << 1 ^ 0x11b;\n    }\n  }\n\n  var SBOX = [];\n  var INV_SBOX = [];\n  var SUB_MIX = [[], [], [], []];\n  var INV_SUB_MIX = [[], [], [], []]; // Walk GF(2^8)\n\n  var x = 0;\n  var xi = 0;\n\n  for (var i = 0; i < 256; ++i) {\n    // Compute sbox\n    var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n    sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n    SBOX[x] = sx;\n    INV_SBOX[sx] = x; // Compute multiplication\n\n    var x2 = d[x];\n    var x4 = d[x2];\n    var x8 = d[x4]; // Compute sub bytes, mix columns tables\n\n    var t = d[sx] * 0x101 ^ sx * 0x1010100;\n    SUB_MIX[0][x] = t << 24 | t >>> 8;\n    SUB_MIX[1][x] = t << 16 | t >>> 16;\n    SUB_MIX[2][x] = t << 8 | t >>> 24;\n    SUB_MIX[3][x] = t; // Compute inv sub bytes, inv mix columns tables\n\n    t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;\n    INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;\n    INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;\n    INV_SUB_MIX[3][sx] = t;\n\n    if (x === 0) {\n      x = xi = 1;\n    } else {\n      x = x2 ^ d[d[d[x8 ^ x2]]];\n      xi ^= d[d[xi]];\n    }\n  }\n\n  return {\n    SBOX: SBOX,\n    INV_SBOX: INV_SBOX,\n    SUB_MIX: SUB_MIX,\n    INV_SUB_MIX: INV_SUB_MIX\n  };\n}();\n\nfunction $DMHf$var$AES(key) {\n  this._key = $DMHf$var$asUInt32Array(key);\n\n  this._reset();\n}\n\n$DMHf$var$AES.blockSize = 4 * 4;\n$DMHf$var$AES.keySize = 256 / 8;\n$DMHf$var$AES.prototype.blockSize = $DMHf$var$AES.blockSize;\n$DMHf$var$AES.prototype.keySize = $DMHf$var$AES.keySize;\n\n$DMHf$var$AES.prototype._reset = function () {\n  var keyWords = this._key;\n  var keySize = keyWords.length;\n  var nRounds = keySize + 6;\n  var ksRows = (nRounds + 1) * 4;\n  var keySchedule = [];\n\n  for (var k = 0; k < keySize; k++) {\n    keySchedule[k] = keyWords[k];\n  }\n\n  for (k = keySize; k < ksRows; k++) {\n    var t = keySchedule[k - 1];\n\n    if (k % keySize === 0) {\n      t = t << 8 | t >>> 24;\n      t = $DMHf$var$G.SBOX[t >>> 24] << 24 | $DMHf$var$G.SBOX[t >>> 16 & 0xff] << 16 | $DMHf$var$G.SBOX[t >>> 8 & 0xff] << 8 | $DMHf$var$G.SBOX[t & 0xff];\n      t ^= $DMHf$var$RCON[k / keySize | 0] << 24;\n    } else if (keySize > 6 && k % keySize === 4) {\n      t = $DMHf$var$G.SBOX[t >>> 24] << 24 | $DMHf$var$G.SBOX[t >>> 16 & 0xff] << 16 | $DMHf$var$G.SBOX[t >>> 8 & 0xff] << 8 | $DMHf$var$G.SBOX[t & 0xff];\n    }\n\n    keySchedule[k] = keySchedule[k - keySize] ^ t;\n  }\n\n  var invKeySchedule = [];\n\n  for (var ik = 0; ik < ksRows; ik++) {\n    var ksR = ksRows - ik;\n    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];\n\n    if (ik < 4 || ksR <= 4) {\n      invKeySchedule[ik] = tt;\n    } else {\n      invKeySchedule[ik] = $DMHf$var$G.INV_SUB_MIX[0][$DMHf$var$G.SBOX[tt >>> 24]] ^ $DMHf$var$G.INV_SUB_MIX[1][$DMHf$var$G.SBOX[tt >>> 16 & 0xff]] ^ $DMHf$var$G.INV_SUB_MIX[2][$DMHf$var$G.SBOX[tt >>> 8 & 0xff]] ^ $DMHf$var$G.INV_SUB_MIX[3][$DMHf$var$G.SBOX[tt & 0xff]];\n    }\n  }\n\n  this._nRounds = nRounds;\n  this._keySchedule = keySchedule;\n  this._invKeySchedule = invKeySchedule;\n};\n\n$DMHf$var$AES.prototype.encryptBlockRaw = function (M) {\n  M = $DMHf$var$asUInt32Array(M);\n  return $DMHf$var$cryptBlock(M, this._keySchedule, $DMHf$var$G.SUB_MIX, $DMHf$var$G.SBOX, this._nRounds);\n};\n\n$DMHf$var$AES.prototype.encryptBlock = function (M) {\n  var out = this.encryptBlockRaw(M);\n  var buf = $DMHf$var$Buffer.allocUnsafe(16);\n  buf.writeUInt32BE(out[0], 0);\n  buf.writeUInt32BE(out[1], 4);\n  buf.writeUInt32BE(out[2], 8);\n  buf.writeUInt32BE(out[3], 12);\n  return buf;\n};\n\n$DMHf$var$AES.prototype.decryptBlock = function (M) {\n  M = $DMHf$var$asUInt32Array(M); // swap\n\n  var m1 = M[1];\n  M[1] = M[3];\n  M[3] = m1;\n  var out = $DMHf$var$cryptBlock(M, this._invKeySchedule, $DMHf$var$G.INV_SUB_MIX, $DMHf$var$G.INV_SBOX, this._nRounds);\n  var buf = $DMHf$var$Buffer.allocUnsafe(16);\n  buf.writeUInt32BE(out[0], 0);\n  buf.writeUInt32BE(out[3], 4);\n  buf.writeUInt32BE(out[2], 8);\n  buf.writeUInt32BE(out[1], 12);\n  return buf;\n};\n\n$DMHf$var$AES.prototype.scrub = function () {\n  $DMHf$var$scrubVec(this._keySchedule);\n  $DMHf$var$scrubVec(this._invKeySchedule);\n  $DMHf$var$scrubVec(this._key);\n};\n\n$DMHf$exports.AES = $DMHf$var$AES;"},"sourceMaps":null,"error":null,"hash":"f7160dea351789547ea170aebcb5b12e","cacheData":{"env":{},"imports":{"$require$safe-buffer":["safe-buffer","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}