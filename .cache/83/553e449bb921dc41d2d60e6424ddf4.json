{"id":"drz5","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\package.json","includedInParent":true,"mtime":1598465921227},{"name":"buffer","loc":{"line":3,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\streams.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\buffer\\index.js"},{"name":"stream","loc":{"line":4,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\streams.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\stream-browserify\\index.js"}],"generated":{"js":"\nvar $drz5$exports = {};\nvar $drz5$var$Buffer = $parcel$require(\"drz5\", \"buffer\").Buffer,\n    $drz5$var$Transform = $parcel$require(\"drz5\", \"stream\").Transform; // == Exports ==================================================================\n\n$drz5$exports = function (iconv) {\n  // Additional Public API.\n  iconv.encodeStream = function encodeStream(encoding, options) {\n    return new $drz5$var$IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);\n  };\n\n  iconv.decodeStream = function decodeStream(encoding, options) {\n    return new $drz5$var$IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);\n  };\n\n  iconv.supportsStreams = true; // Not published yet.\n\n  iconv.IconvLiteEncoderStream = $drz5$var$IconvLiteEncoderStream;\n  iconv.IconvLiteDecoderStream = $drz5$var$IconvLiteDecoderStream;\n  iconv._collect = $drz5$var$IconvLiteDecoderStream.prototype.collect;\n}; // == Encoder stream =======================================================\n\n\nfunction $drz5$var$IconvLiteEncoderStream(conv, options) {\n  this.conv = conv;\n  options = options || {};\n  options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n\n  $drz5$var$Transform.call(this, options);\n}\n\n$drz5$var$IconvLiteEncoderStream.prototype = Object.create($drz5$var$Transform.prototype, {\n  constructor: {\n    value: $drz5$var$IconvLiteEncoderStream\n  }\n});\n\n$drz5$var$IconvLiteEncoderStream.prototype._transform = function (chunk, encoding, done) {\n  if (typeof chunk != 'string') return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n\n  try {\n    var res = this.conv.write(chunk);\n    if (res && res.length) this.push(res);\n    done();\n  } catch (e) {\n    done(e);\n  }\n};\n\n$drz5$var$IconvLiteEncoderStream.prototype._flush = function (done) {\n  try {\n    var res = this.conv.end();\n    if (res && res.length) this.push(res);\n    done();\n  } catch (e) {\n    done(e);\n  }\n};\n\n$drz5$var$IconvLiteEncoderStream.prototype.collect = function (cb) {\n  var chunks = [];\n  this.on('error', cb);\n  this.on('data', function (chunk) {\n    chunks.push(chunk);\n  });\n  this.on('end', function () {\n    cb(null, $drz5$var$Buffer.concat(chunks));\n  });\n  return this;\n}; // == Decoder stream =======================================================\n\n\nfunction $drz5$var$IconvLiteDecoderStream(conv, options) {\n  this.conv = conv;\n  options = options || {};\n  options.encoding = this.encoding = 'utf8'; // We output strings.\n\n  $drz5$var$Transform.call(this, options);\n}\n\n$drz5$var$IconvLiteDecoderStream.prototype = Object.create($drz5$var$Transform.prototype, {\n  constructor: {\n    value: $drz5$var$IconvLiteDecoderStream\n  }\n});\n\n$drz5$var$IconvLiteDecoderStream.prototype._transform = function (chunk, encoding, done) {\n  if (!$drz5$var$Buffer.isBuffer(chunk)) return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n\n  try {\n    var res = this.conv.write(chunk);\n    if (res && res.length) this.push(res, this.encoding);\n    done();\n  } catch (e) {\n    done(e);\n  }\n};\n\n$drz5$var$IconvLiteDecoderStream.prototype._flush = function (done) {\n  try {\n    var res = this.conv.end();\n    if (res && res.length) this.push(res, this.encoding);\n    done();\n  } catch (e) {\n    done(e);\n  }\n};\n\n$drz5$var$IconvLiteDecoderStream.prototype.collect = function (cb) {\n  var res = '';\n  this.on('error', cb);\n  this.on('data', function (chunk) {\n    res += chunk;\n  });\n  this.on('end', function () {\n    cb(null, res);\n  });\n  return this;\n};"},"sourceMaps":null,"error":null,"hash":"a4fdda2151a1d2c405b898d0953cea46","cacheData":{"env":{},"imports":{"$require$buffer":["buffer","*"],"$require$stream":["stream","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}