{"id":"awWW","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\package.json","includedInParent":true,"mtime":1598465911093},{"name":"./utils","loc":{"line":3,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\ripemd.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\utils.js"},{"name":"./common","loc":{"line":4,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\ripemd.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\common.js"}],"generated":{"js":"var $awWW$exports = {};\nvar $awWW$var$utils = $parcel$require(\"awWW\", \"./utils\");\nvar $awWW$var$common = $parcel$require(\"awWW\", \"./common\");\nvar $awWW$var$rotl32 = $awWW$var$utils.rotl32;\nvar $awWW$var$sum32 = $awWW$var$utils.sum32;\nvar $awWW$var$sum32_3 = $awWW$var$utils.sum32_3;\nvar $awWW$var$sum32_4 = $awWW$var$utils.sum32_4;\nvar $awWW$var$BlockHash = $awWW$var$common.BlockHash;\n\nfunction $awWW$var$RIPEMD160() {\n  if (!(this instanceof $awWW$var$RIPEMD160)) return new $awWW$var$RIPEMD160();\n  $awWW$var$BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\n\n$awWW$var$utils.inherits($awWW$var$RIPEMD160, $awWW$var$BlockHash);\nvar $awWW$export$ripemd160 = $awWW$var$RIPEMD160;\n$awWW$exports.ripemd160 = $awWW$export$ripemd160;\n$awWW$var$RIPEMD160.blockSize = 512;\n$awWW$var$RIPEMD160.outSize = 160;\n$awWW$var$RIPEMD160.hmacStrength = 192;\n$awWW$var$RIPEMD160.padLength = 64;\n\n$awWW$var$RIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n\n  for (var j = 0; j < 80; j++) {\n    var T = $awWW$var$sum32($awWW$var$rotl32($awWW$var$sum32_4(A, $awWW$var$f(j, B, C, D), msg[$awWW$var$r[j] + start], $awWW$var$K(j)), $awWW$var$s[j]), E);\n    A = E;\n    E = D;\n    D = $awWW$var$rotl32(C, 10);\n    C = B;\n    B = T;\n    T = $awWW$var$sum32($awWW$var$rotl32($awWW$var$sum32_4(Ah, $awWW$var$f(79 - j, Bh, Ch, Dh), msg[$awWW$var$rh[j] + start], $awWW$var$Kh(j)), $awWW$var$sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = $awWW$var$rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n\n  T = $awWW$var$sum32_3(this.h[1], C, Dh);\n  this.h[1] = $awWW$var$sum32_3(this.h[2], D, Eh);\n  this.h[2] = $awWW$var$sum32_3(this.h[3], E, Ah);\n  this.h[3] = $awWW$var$sum32_3(this.h[4], A, Bh);\n  this.h[4] = $awWW$var$sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\n$awWW$var$RIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return $awWW$var$utils.toHex32(this.h, 'little');else return $awWW$var$utils.split32(this.h, 'little');\n};\n\nfunction $awWW$var$f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\n\nfunction $awWW$var$K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\n\nfunction $awWW$var$Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\n\nvar $awWW$var$r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar $awWW$var$rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar $awWW$var$s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar $awWW$var$sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];"},"sourceMaps":null,"error":null,"hash":"4bd92dd029b8b38a5ee16795ddd55290","cacheData":{"env":{},"imports":{"$require$./utils":["./utils","*"],"$require$./common":["./common","*"]},"exports":{"ripemd160":"$awWW$export$ripemd160"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}