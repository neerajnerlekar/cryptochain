{"id":"QJRn","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\package.json","includedInParent":true,"mtime":1598465888872},{"name":"bytes","loc":{"line":13,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\types\\text.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\bytes\\index.js"},{"name":"content-type","loc":{"line":14,"column":26},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\types\\text.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\content-type\\index.js"},{"name":"debug","loc":{"line":15,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\types\\text.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\debug\\src\\browser.js"},{"name":"../read","loc":{"line":16,"column":19},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\types\\text.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\read.js"},{"name":"type-is","loc":{"line":17,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\types\\text.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\type-is\\index.js"}],"generated":{"js":"var $QJRn$exports = {};\n\n/**\n * Module dependencies.\n */\nvar $QJRn$var$bytes = $parcel$require(\"QJRn\", \"bytes\");\nvar $QJRn$var$contentType = $parcel$require(\"QJRn\", \"content-type\");\nvar $QJRn$var$debug = $parcel$require(\"QJRn\", \"debug\")('body-parser:text');\nvar $QJRn$var$read = $parcel$require(\"QJRn\", \"../read\");\nvar $QJRn$var$typeis = $parcel$require(\"QJRn\", \"type-is\");\n/**\n * Module exports.\n */\n\n$QJRn$exports = $QJRn$var$text;\n/**\n * Create a middleware to parse text bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction $QJRn$var$text(options) {\n  var opts = options || {};\n  var defaultCharset = opts.defaultCharset || 'utf-8';\n  var inflate = opts.inflate !== false;\n  var limit = typeof opts.limit !== 'number' ? $QJRn$var$bytes.parse(opts.limit || '100kb') : opts.limit;\n  var type = opts.type || 'text/plain';\n  var verify = opts.verify || false;\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function');\n  } // create the appropriate type checking function\n\n\n  var shouldParse = typeof type !== 'function' ? $QJRn$var$typeChecker(type) : type;\n\n  function parse(buf) {\n    return buf;\n  }\n\n  return function textParser(req, res, next) {\n    if (req._body) {\n      $QJRn$var$debug('body already parsed');\n      next();\n      return;\n    }\n\n    req.body = req.body || {}; // skip requests without bodies\n\n    if (!$QJRn$var$typeis.hasBody(req)) {\n      $QJRn$var$debug('skip empty body');\n      next();\n      return;\n    }\n\n    $QJRn$var$debug('content-type %j', req.headers['content-type']); // determine if request should be parsed\n\n    if (!shouldParse(req)) {\n      $QJRn$var$debug('skip parsing');\n      next();\n      return;\n    } // get charset\n\n\n    var charset = $QJRn$var$getCharset(req) || defaultCharset; // read\n\n    $QJRn$var$read(req, res, next, parse, $QJRn$var$debug, {\n      encoding: charset,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    });\n  };\n}\n/**\n * Get the charset of a request.\n *\n * @param {object} req\n * @api private\n */\n\n\nfunction $QJRn$var$getCharset(req) {\n  try {\n    return ($QJRn$var$contentType.parse(req).parameters.charset || '').toLowerCase();\n  } catch (e) {\n    return undefined;\n  }\n}\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\n\nfunction $QJRn$var$typeChecker(type) {\n  return function checkType(req) {\n    return Boolean($QJRn$var$typeis(req, type));\n  };\n}"},"sourceMaps":null,"error":null,"hash":"e2d7632f0f03c2b19c444e890054480d","cacheData":{"env":{},"imports":{"$require$bytes":["bytes","*"],"$require$content-type":["content-type","*"],"$require$debug":["debug","*"],"$require$../read":["../read","*"],"$require$type-is":["type-is","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}