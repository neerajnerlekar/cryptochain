{"id":"KHOg","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\package.json","includedInParent":true,"mtime":1598465921227},{"name":"buffer","loc":{"line":5,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\buffer\\index.js"},{"name":"./bom-handling","loc":{"line":7,"column":26},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\bom-handling.js"},{"name":"../encodings","loc":{"line":65,"column":34},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\encodings\\index.js"},{"name":"./streams","loc":{"line":139,"column":16},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\streams.js"},{"name":"./extend-node","loc":{"line":143,"column":12},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\extend-node.js"},{"name":"process","parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\process\\browser.js"}],"generated":{"js":"\nvar $KHOg$exports = {};\nvar $KHOg$var$process = $parcel$require(\"KHOg\", \"process\");\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar $KHOg$var$Buffer = $parcel$require(\"KHOg\", \"buffer\").Buffer;\nvar $KHOg$var$bomHandling = $parcel$require(\"KHOg\", \"./bom-handling\"),\n    $KHOg$var$iconv = $KHOg$exports; // All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\n\n$KHOg$var$iconv.encodings = null; // Characters emitted in case of error.\n\n$KHOg$var$iconv.defaultCharUnicode = '�';\n$KHOg$var$iconv.defaultCharSingleByte = '?'; // Public API.\n\n$KHOg$var$iconv.encode = function encode(str, encoding, options) {\n  str = \"\" + (str || \"\"); // Ensure string.\n\n  var encoder = $KHOg$var$iconv.getEncoder(encoding, options);\n  var res = encoder.write(str);\n  var trail = encoder.end();\n  return trail && trail.length > 0 ? $KHOg$var$Buffer.concat([res, trail]) : res;\n};\n\n$KHOg$var$iconv.decode = function decode(buf, encoding, options) {\n  if (typeof buf === 'string') {\n    if (!$KHOg$var$iconv.skipDecodeWarning) {\n      console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n      $KHOg$var$iconv.skipDecodeWarning = true;\n    }\n\n    buf = new $KHOg$var$Buffer(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n  }\n\n  var decoder = $KHOg$var$iconv.getDecoder(encoding, options);\n  var res = decoder.write(buf);\n  var trail = decoder.end();\n  return trail ? res + trail : res;\n};\n\n$KHOg$var$iconv.encodingExists = function encodingExists(enc) {\n  try {\n    $KHOg$var$iconv.getCodec(enc);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}; // Legacy aliases to convert functions\n\n\n$KHOg$var$iconv.toEncoding = $KHOg$var$iconv.encode;\n$KHOg$var$iconv.fromEncoding = $KHOg$var$iconv.decode; // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\n\n$KHOg$var$iconv._codecDataCache = {};\n\n$KHOg$var$iconv.getCodec = function getCodec(encoding) {\n  if (!$KHOg$var$iconv.encodings) $KHOg$var$iconv.encodings = $parcel$require(\"KHOg\", \"../encodings\"); // Lazy load all encoding definitions.\n  // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n\n  var enc = ('' + encoding).toLowerCase().replace(/[^0-9a-z]|:\\d{4}$/g, \"\"); // Traverse iconv.encodings to find actual codec.\n\n  var codecOptions = {};\n\n  while (true) {\n    var codec = $KHOg$var$iconv._codecDataCache[enc];\n    if (codec) return codec;\n    var codecDef = $KHOg$var$iconv.encodings[enc];\n\n    switch (typeof codecDef) {\n      case \"string\":\n        // Direct alias to other encoding.\n        enc = codecDef;\n        break;\n\n      case \"object\":\n        // Alias with options. Can be layered.\n        for (var key in codecDef) codecOptions[key] = codecDef[key];\n\n        if (!codecOptions.encodingName) codecOptions.encodingName = enc;\n        enc = codecDef.type;\n        break;\n\n      case \"function\":\n        // Codec itself.\n        if (!codecOptions.encodingName) codecOptions.encodingName = enc; // The codec function must load all tables and return object with .encoder and .decoder methods.\n        // It'll be called only once (for each different options object).\n\n        codec = new codecDef(codecOptions, $KHOg$var$iconv);\n        $KHOg$var$iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n\n        return codec;\n\n      default:\n        throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\" + enc + \"')\");\n    }\n  }\n};\n\n$KHOg$var$iconv.getEncoder = function getEncoder(encoding, options) {\n  var codec = $KHOg$var$iconv.getCodec(encoding),\n      encoder = new codec.encoder(options, codec);\n  if (codec.bomAware && options && options.addBOM) encoder = new $KHOg$var$bomHandling.PrependBOM(encoder, options);\n  return encoder;\n};\n\n$KHOg$var$iconv.getDecoder = function getDecoder(encoding, options) {\n  var codec = $KHOg$var$iconv.getCodec(encoding),\n      decoder = new codec.decoder(options, codec);\n  if (codec.bomAware && !(options && options.stripBOM === false)) decoder = new $KHOg$var$bomHandling.StripBOM(decoder, options);\n  return decoder;\n}; // Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\n\n\nvar $KHOg$var$nodeVer = typeof $KHOg$var$process !== 'undefined' && $KHOg$var$process.versions && $KHOg$var$process.versions.node;\n\nif ($KHOg$var$nodeVer) {\n  // Load streaming support in Node v0.10+\n  var $KHOg$var$nodeVerArr = $KHOg$var$nodeVer.split(\".\").map(Number);\n\n  if ($KHOg$var$nodeVerArr[0] > 0 || $KHOg$var$nodeVerArr[1] >= 10) {\n    $parcel$require(\"KHOg\", \"./streams\")($KHOg$var$iconv);\n  } // Load Node primitive extensions.\n\n\n  $parcel$require(\"KHOg\", \"./extend-node\")($KHOg$var$iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n  console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}"},"sourceMaps":null,"error":null,"hash":"8b3693b1b88e3ee9293409bb33a602ff","cacheData":{"env":{},"imports":{"$require$buffer":["buffer","*"],"$require$./bom-handling":["./bom-handling","*"],"$require$../encodings":["../encodings","*"],"$require$./streams":["./streams","*"],"$require$./extend-node":["./extend-node","*"],"$require$process":["process","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}