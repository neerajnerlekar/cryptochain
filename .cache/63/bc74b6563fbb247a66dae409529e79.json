{"id":"tTA8","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\package.json","includedInParent":true,"mtime":1598465925143},{"name":"../utils/common","loc":{"line":22,"column":28},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\lib\\zlib\\inflate.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\lib\\utils\\common.js"},{"name":"./adler32","loc":{"line":23,"column":28},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\lib\\zlib\\inflate.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\lib\\zlib\\adler32.js"},{"name":"./crc32","loc":{"line":24,"column":28},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\lib\\zlib\\inflate.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\lib\\zlib\\crc32.js"},{"name":"./inffast","loc":{"line":25,"column":28},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\lib\\zlib\\inflate.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\lib\\zlib\\inffast.js"},{"name":"./inftrees","loc":{"line":26,"column":28},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\lib\\zlib\\inflate.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\node_modules\\pako\\lib\\zlib\\inftrees.js"}],"generated":{"js":"var $tTA8$exports = {};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar $tTA8$var$utils = $parcel$require(\"tTA8\", \"../utils/common\");\nvar $tTA8$var$adler32 = $parcel$require(\"tTA8\", \"./adler32\");\nvar $tTA8$var$crc32 = $parcel$require(\"tTA8\", \"./crc32\");\nvar $tTA8$var$inflate_fast = $parcel$require(\"tTA8\", \"./inffast\");\nvar $tTA8$var$inflate_table = $parcel$require(\"tTA8\", \"./inftrees\");\nvar $tTA8$var$CODES = 0;\nvar $tTA8$var$LENS = 1;\nvar $tTA8$var$DISTS = 2;\n/* Public constants ==========================================================*/\n\n/* ===========================================================================*/\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\n\nvar $tTA8$var$Z_FINISH = 4;\nvar $tTA8$var$Z_BLOCK = 5;\nvar $tTA8$var$Z_TREES = 6;\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\n\nvar $tTA8$var$Z_OK = 0;\nvar $tTA8$var$Z_STREAM_END = 1;\nvar $tTA8$var$Z_NEED_DICT = 2; //var Z_ERRNO         = -1;\n\nvar $tTA8$var$Z_STREAM_ERROR = -2;\nvar $tTA8$var$Z_DATA_ERROR = -3;\nvar $tTA8$var$Z_MEM_ERROR = -4;\nvar $tTA8$var$Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\n\nvar $tTA8$var$Z_DEFLATED = 8;\n/* STATES ====================================================================*/\n\n/* ===========================================================================*/\n\nvar $tTA8$var$HEAD = 1;\n/* i: waiting for magic header */\n\nvar $tTA8$var$FLAGS = 2;\n/* i: waiting for method and flags (gzip) */\n\nvar $tTA8$var$TIME = 3;\n/* i: waiting for modification time (gzip) */\n\nvar $tTA8$var$OS = 4;\n/* i: waiting for extra flags and operating system (gzip) */\n\nvar $tTA8$var$EXLEN = 5;\n/* i: waiting for extra length (gzip) */\n\nvar $tTA8$var$EXTRA = 6;\n/* i: waiting for extra bytes (gzip) */\n\nvar $tTA8$var$NAME = 7;\n/* i: waiting for end of file name (gzip) */\n\nvar $tTA8$var$COMMENT = 8;\n/* i: waiting for end of comment (gzip) */\n\nvar $tTA8$var$HCRC = 9;\n/* i: waiting for header crc (gzip) */\n\nvar $tTA8$var$DICTID = 10;\n/* i: waiting for dictionary check value */\n\nvar $tTA8$var$DICT = 11;\n/* waiting for inflateSetDictionary() call */\n\nvar $tTA8$var$TYPE = 12;\n/* i: waiting for type bits, including last-flag bit */\n\nvar $tTA8$var$TYPEDO = 13;\n/* i: same, but skip check to exit inflate on new block */\n\nvar $tTA8$var$STORED = 14;\n/* i: waiting for stored size (length and complement) */\n\nvar $tTA8$var$COPY_ = 15;\n/* i/o: same as COPY below, but only first time in */\n\nvar $tTA8$var$COPY = 16;\n/* i/o: waiting for input or output to copy stored block */\n\nvar $tTA8$var$TABLE = 17;\n/* i: waiting for dynamic block table lengths */\n\nvar $tTA8$var$LENLENS = 18;\n/* i: waiting for code length code lengths */\n\nvar $tTA8$var$CODELENS = 19;\n/* i: waiting for length/lit and distance code lengths */\n\nvar $tTA8$var$LEN_ = 20;\n/* i: same as LEN below, but only first time in */\n\nvar $tTA8$var$LEN = 21;\n/* i: waiting for length/lit/eob code */\n\nvar $tTA8$var$LENEXT = 22;\n/* i: waiting for length extra bits */\n\nvar $tTA8$var$DIST = 23;\n/* i: waiting for distance code */\n\nvar $tTA8$var$DISTEXT = 24;\n/* i: waiting for distance extra bits */\n\nvar $tTA8$var$MATCH = 25;\n/* o: waiting for output space to copy string */\n\nvar $tTA8$var$LIT = 26;\n/* o: waiting for output space to write literal */\n\nvar $tTA8$var$CHECK = 27;\n/* i: waiting for 32-bit check value */\n\nvar $tTA8$var$LENGTH = 28;\n/* i: waiting for 32-bit length (gzip) */\n\nvar $tTA8$var$DONE = 29;\n/* finished check, done -- remain here until reset */\n\nvar $tTA8$var$BAD = 30;\n/* got a data error -- remain here until reset */\n\nvar $tTA8$var$MEM = 31;\n/* got an inflate() memory error -- remain here until reset */\n\nvar $tTA8$var$SYNC = 32;\n/* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\nvar $tTA8$var$ENOUGH_LENS = 852;\nvar $tTA8$var$ENOUGH_DISTS = 592; //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar $tTA8$var$MAX_WBITS = 15;\n/* 32K LZ77 window */\n\nvar $tTA8$var$DEF_WBITS = $tTA8$var$MAX_WBITS;\n\nfunction $tTA8$var$zswap32(q) {\n  return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);\n}\n\nfunction $tTA8$var$InflateState() {\n  this.mode = 0;\n  /* current inflate mode */\n\n  this.last = false;\n  /* true if processing last block */\n\n  this.wrap = 0;\n  /* bit 0 true for zlib, bit 1 true for gzip */\n\n  this.havedict = false;\n  /* true if dictionary provided */\n\n  this.flags = 0;\n  /* gzip header method and flags (0 if zlib) */\n\n  this.dmax = 0;\n  /* zlib header max distance (INFLATE_STRICT) */\n\n  this.check = 0;\n  /* protected copy of check value */\n\n  this.total = 0;\n  /* protected copy of output count */\n  // TODO: may be {}\n\n  this.head = null;\n  /* where to save gzip header information */\n\n  /* sliding window */\n\n  this.wbits = 0;\n  /* log base 2 of requested window size */\n\n  this.wsize = 0;\n  /* window size or zero if not using window */\n\n  this.whave = 0;\n  /* valid bytes in the window */\n\n  this.wnext = 0;\n  /* window write index */\n\n  this.window = null;\n  /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n\n  this.hold = 0;\n  /* input bit accumulator */\n\n  this.bits = 0;\n  /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n\n  this.length = 0;\n  /* literal or length of data to copy */\n\n  this.offset = 0;\n  /* distance back to copy string from */\n\n  /* for table and code decoding */\n\n  this.extra = 0;\n  /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n\n  this.lencode = null;\n  /* starting table for length/literal codes */\n\n  this.distcode = null;\n  /* starting table for distance codes */\n\n  this.lenbits = 0;\n  /* index bits for lencode */\n\n  this.distbits = 0;\n  /* index bits for distcode */\n\n  /* dynamic table building */\n\n  this.ncode = 0;\n  /* number of code length code lengths */\n\n  this.nlen = 0;\n  /* number of length code lengths */\n\n  this.ndist = 0;\n  /* number of distance code lengths */\n\n  this.have = 0;\n  /* number of code lengths in lens[] */\n\n  this.next = null;\n  /* next available space in codes[] */\n\n  this.lens = new $tTA8$var$utils.Buf16(320);\n  /* temporary storage for code lengths */\n\n  this.work = new $tTA8$var$utils.Buf16(288);\n  /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n\n  this.lendyn = null;\n  /* dynamic table for length/literal codes (JS specific) */\n\n  this.distdyn = null;\n  /* dynamic table for distance codes (JS specific) */\n\n  this.sane = 0;\n  /* if false, allow invalid distance too far */\n\n  this.back = 0;\n  /* bits back of last unprocessed length/lit */\n\n  this.was = 0;\n  /* initial length of match */\n}\n\nfunction $tTA8$var$inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) {\n    return $tTA8$var$Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = '';\n  /*Z_NULL*/\n\n  if (state.wrap) {\n    /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n\n  state.mode = $tTA8$var$HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null\n  /*Z_NULL*/\n  ;\n  state.hold = 0;\n  state.bits = 0; //state.lencode = state.distcode = state.next = state.codes;\n\n  state.lencode = state.lendyn = new $tTA8$var$utils.Buf32($tTA8$var$ENOUGH_LENS);\n  state.distcode = state.distdyn = new $tTA8$var$utils.Buf32($tTA8$var$ENOUGH_DISTS);\n  state.sane = 1;\n  state.back = -1; //Tracev((stderr, \"inflate: reset\\n\"));\n\n  return $tTA8$var$Z_OK;\n}\n\nfunction $tTA8$var$inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) {\n    return $tTA8$var$Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return $tTA8$var$inflateResetKeep(strm);\n}\n\nfunction $tTA8$var$inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n  /* get the state */\n\n  if (!strm || !strm.state) {\n    return $tTA8$var$Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  /* extract wrap request from windowBits parameter */\n\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  } else {\n    wrap = (windowBits >> 4) + 1;\n\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n  /* set number of window bits, free window if different */\n\n\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return $tTA8$var$Z_STREAM_ERROR;\n  }\n\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n  /* update state and reset the rest of it */\n\n\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return $tTA8$var$inflateReset(strm);\n}\n\nfunction $tTA8$var$inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) {\n    return $tTA8$var$Z_STREAM_ERROR;\n  } //strm.msg = Z_NULL;                 /* in case we return an error */\n\n\n  state = new $tTA8$var$InflateState(); //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n\n  strm.state = state;\n  state.window = null\n  /*Z_NULL*/\n  ;\n  ret = $tTA8$var$inflateReset2(strm, windowBits);\n\n  if (ret !== $tTA8$var$Z_OK) {\n    strm.state = null\n    /*Z_NULL*/\n    ;\n  }\n\n  return ret;\n}\n\nfunction $tTA8$var$inflateInit(strm) {\n  return $tTA8$var$inflateInit2(strm, $tTA8$var$DEF_WBITS);\n}\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\n\n\nvar $tTA8$var$virgin = true;\nvar $tTA8$var$lenfix, $tTA8$var$distfix; // We have no pointers in JS, so keep tables separate\n\nfunction $tTA8$var$fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if ($tTA8$var$virgin) {\n    var sym;\n    $tTA8$var$lenfix = new $tTA8$var$utils.Buf32(512);\n    $tTA8$var$distfix = new $tTA8$var$utils.Buf32(32);\n    /* literal/length table */\n\n    sym = 0;\n\n    while (sym < 144) {\n      state.lens[sym++] = 8;\n    }\n\n    while (sym < 256) {\n      state.lens[sym++] = 9;\n    }\n\n    while (sym < 280) {\n      state.lens[sym++] = 7;\n    }\n\n    while (sym < 288) {\n      state.lens[sym++] = 8;\n    }\n\n    $tTA8$var$inflate_table($tTA8$var$LENS, state.lens, 0, 288, $tTA8$var$lenfix, 0, state.work, {\n      bits: 9\n    });\n    /* distance table */\n\n    sym = 0;\n\n    while (sym < 32) {\n      state.lens[sym++] = 5;\n    }\n\n    $tTA8$var$inflate_table($tTA8$var$DISTS, state.lens, 0, 32, $tTA8$var$distfix, 0, state.work, {\n      bits: 5\n    });\n    /* do this just once */\n\n    $tTA8$var$virgin = false;\n  }\n\n  state.lencode = $tTA8$var$lenfix;\n  state.lenbits = 9;\n  state.distcode = $tTA8$var$distfix;\n  state.distbits = 5;\n}\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\n\n\nfunction $tTA8$var$updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n  /* if it hasn't been done already, allocate space for the window */\n\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n    state.window = new $tTA8$var$utils.Buf8(state.wsize);\n  }\n  /* copy state->wsize or less output bytes into the circular window */\n\n\n  if (copy >= state.wsize) {\n    $tTA8$var$utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  } else {\n    dist = state.wsize - state.wnext;\n\n    if (dist > copy) {\n      dist = copy;\n    } //zmemcpy(state->window + state->wnext, end - copy, dist);\n\n\n    $tTA8$var$utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      $tTA8$var$utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    } else {\n      state.wnext += dist;\n\n      if (state.wnext === state.wsize) {\n        state.wnext = 0;\n      }\n\n      if (state.whave < state.wsize) {\n        state.whave += dist;\n      }\n    }\n  }\n\n  return 0;\n}\n\nfunction $tTA8$var$inflate(strm, flush) {\n  var state;\n  var input, output; // input/output buffers\n\n  var next;\n  /* next input INDEX */\n\n  var put;\n  /* next output INDEX */\n\n  var have, left;\n  /* available input and output */\n\n  var hold;\n  /* bit buffer */\n\n  var bits;\n  /* bits in bit buffer */\n\n  var _in, _out;\n  /* save starting available input and output */\n\n\n  var copy;\n  /* number of stored or match bytes to copy */\n\n  var from;\n  /* where to copy match bytes from */\n\n  var from_source;\n  var here = 0;\n  /* current decoding table entry */\n\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n\n  var len;\n  /* length to copy for repeats, bits to drop */\n\n  var ret;\n  /* return code */\n\n  var hbuf = new $tTA8$var$utils.Buf8(4);\n  /* buffer for gzip header crc calculation */\n\n  var opts;\n  var n; // temporary var for NEED_BITS\n\n  var order =\n  /* permutation of code lengths */\n  [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\n  if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {\n    return $tTA8$var$Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n\n  if (state.mode === $tTA8$var$TYPE) {\n    state.mode = $tTA8$var$TYPEDO;\n  }\n  /* skip check */\n  //--- LOAD() ---\n\n\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits; //---\n\n  _in = have;\n  _out = left;\n  ret = $tTA8$var$Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case $tTA8$var$HEAD:\n        if (state.wrap === 0) {\n          state.mode = $tTA8$var$TYPEDO;\n          break;\n        } //=== NEEDBITS(16);\n\n\n        while (bits < 16) {\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        } //===//\n\n\n        if (state.wrap & 2 && hold === 0x8b1f) {\n          /* gzip header */\n          state.check = 0\n          /*crc32(0L, Z_NULL, 0)*/\n          ; //=== CRC2(state.check, hold);\n\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = hold >>> 8 & 0xff;\n          state.check = $tTA8$var$crc32(state.check, hbuf, 2, 0); //===//\n          //=== INITBITS();\n\n          hold = 0;\n          bits = 0; //===//\n\n          state.mode = $tTA8$var$FLAGS;\n          break;\n        }\n\n        state.flags = 0;\n        /* expect zlib header */\n\n        if (state.head) {\n          state.head.done = false;\n        }\n\n        if (!(state.wrap & 1) ||\n        /* check if zlib header allowed */\n        (((hold & 0xff) <<\n        /*BITS(8)*/\n        8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = $tTA8$var$BAD;\n          break;\n        }\n\n        if ((hold & 0x0f) !==\n        /*BITS(4)*/\n        $tTA8$var$Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = $tTA8$var$BAD;\n          break;\n        } //--- DROPBITS(4) ---//\n\n\n        hold >>>= 4;\n        bits -= 4; //---//\n\n        len = (hold & 0x0f) +\n        /*BITS(4)*/\n        8;\n\n        if (state.wbits === 0) {\n          state.wbits = len;\n        } else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = $tTA8$var$BAD;\n          break;\n        }\n\n        state.dmax = 1 << len; //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n\n        strm.adler = state.check = 1\n        /*adler32(0L, Z_NULL, 0)*/\n        ;\n        state.mode = hold & 0x200 ? $tTA8$var$DICTID : $tTA8$var$TYPE; //=== INITBITS();\n\n        hold = 0;\n        bits = 0; //===//\n\n        break;\n\n      case $tTA8$var$FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        } //===//\n\n\n        state.flags = hold;\n\n        if ((state.flags & 0xff) !== $tTA8$var$Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = $tTA8$var$BAD;\n          break;\n        }\n\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = $tTA8$var$BAD;\n          break;\n        }\n\n        if (state.head) {\n          state.head.text = hold >> 8 & 1;\n        }\n\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = hold >>> 8 & 0xff;\n          state.check = $tTA8$var$crc32(state.check, hbuf, 2, 0); //===//\n        } //=== INITBITS();\n\n\n        hold = 0;\n        bits = 0; //===//\n\n        state.mode = $tTA8$var$TIME;\n\n      /* falls through */\n\n      case $tTA8$var$TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        } //===//\n\n\n        if (state.head) {\n          state.head.time = hold;\n        }\n\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = hold >>> 8 & 0xff;\n          hbuf[2] = hold >>> 16 & 0xff;\n          hbuf[3] = hold >>> 24 & 0xff;\n          state.check = $tTA8$var$crc32(state.check, hbuf, 4, 0); //===\n        } //=== INITBITS();\n\n\n        hold = 0;\n        bits = 0; //===//\n\n        state.mode = $tTA8$var$OS;\n\n      /* falls through */\n\n      case $tTA8$var$OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        } //===//\n\n\n        if (state.head) {\n          state.head.xflags = hold & 0xff;\n          state.head.os = hold >> 8;\n        }\n\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = hold >>> 8 & 0xff;\n          state.check = $tTA8$var$crc32(state.check, hbuf, 2, 0); //===//\n        } //=== INITBITS();\n\n\n        hold = 0;\n        bits = 0; //===//\n\n        state.mode = $tTA8$var$EXLEN;\n\n      /* falls through */\n\n      case $tTA8$var$EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) {\n              break inf_leave;\n            }\n\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          } //===//\n\n\n          state.length = hold;\n\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = hold >>> 8 & 0xff;\n            state.check = $tTA8$var$crc32(state.check, hbuf, 2, 0); //===//\n          } //=== INITBITS();\n\n\n          hold = 0;\n          bits = 0; //===//\n        } else if (state.head) {\n          state.head.extra = null\n          /*Z_NULL*/\n          ;\n        }\n\n        state.mode = $tTA8$var$EXTRA;\n\n      /* falls through */\n\n      case $tTA8$var$EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n\n          if (copy > have) {\n            copy = have;\n          }\n\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n\n              $tTA8$var$utils.arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes\n              // - no need for additional size check\n              copy,\n              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n              len); //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n\n            if (state.flags & 0x0200) {\n              state.check = $tTA8$var$crc32(state.check, input, copy, next);\n            }\n\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n\n          if (state.length) {\n            break inf_leave;\n          }\n        }\n\n        state.length = 0;\n        state.mode = $tTA8$var$NAME;\n\n      /* falls through */\n\n      case $tTA8$var$NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          copy = 0;\n\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n\n            if (state.head && len && state.length < 65536\n            /*state.head.name_max*/\n            ) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = $tTA8$var$crc32(state.check, input, copy, next);\n          }\n\n          have -= copy;\n          next += copy;\n\n          if (len) {\n            break inf_leave;\n          }\n        } else if (state.head) {\n          state.head.name = null;\n        }\n\n        state.length = 0;\n        state.mode = $tTA8$var$COMMENT;\n\n      /* falls through */\n\n      case $tTA8$var$COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          copy = 0;\n\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n\n            if (state.head && len && state.length < 65536\n            /*state.head.comm_max*/\n            ) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = $tTA8$var$crc32(state.check, input, copy, next);\n          }\n\n          have -= copy;\n          next += copy;\n\n          if (len) {\n            break inf_leave;\n          }\n        } else if (state.head) {\n          state.head.comment = null;\n        }\n\n        state.mode = $tTA8$var$HCRC;\n\n      /* falls through */\n\n      case $tTA8$var$HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) {\n              break inf_leave;\n            }\n\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          } //===//\n\n\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = $tTA8$var$BAD;\n            break;\n          } //=== INITBITS();\n\n\n          hold = 0;\n          bits = 0; //===//\n        }\n\n        if (state.head) {\n          state.head.hcrc = state.flags >> 9 & 1;\n          state.head.done = true;\n        }\n\n        strm.adler = state.check = 0;\n        state.mode = $tTA8$var$TYPE;\n        break;\n\n      case $tTA8$var$DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        } //===//\n\n\n        strm.adler = state.check = $tTA8$var$zswap32(hold); //=== INITBITS();\n\n        hold = 0;\n        bits = 0; //===//\n\n        state.mode = $tTA8$var$DICT;\n\n      /* falls through */\n\n      case $tTA8$var$DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits; //---\n\n          return $tTA8$var$Z_NEED_DICT;\n        }\n\n        strm.adler = state.check = 1\n        /*adler32(0L, Z_NULL, 0)*/\n        ;\n        state.mode = $tTA8$var$TYPE;\n\n      /* falls through */\n\n      case $tTA8$var$TYPE:\n        if (flush === $tTA8$var$Z_BLOCK || flush === $tTA8$var$Z_TREES) {\n          break inf_leave;\n        }\n\n      /* falls through */\n\n      case $tTA8$var$TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7; //---//\n\n          state.mode = $tTA8$var$CHECK;\n          break;\n        } //=== NEEDBITS(3); */\n\n\n        while (bits < 3) {\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        } //===//\n\n\n        state.last = hold & 0x01\n        /*BITS(1)*/\n        ; //--- DROPBITS(1) ---//\n\n        hold >>>= 1;\n        bits -= 1; //---//\n\n        switch (hold & 0x03) {\n          /*BITS(2)*/\n          case 0:\n            /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = $tTA8$var$STORED;\n            break;\n\n          case 1:\n            /* fixed block */\n            $tTA8$var$fixedtables(state); //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n\n            state.mode = $tTA8$var$LEN_;\n            /* decode codes */\n\n            if (flush === $tTA8$var$Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2; //---//\n\n              break inf_leave;\n            }\n\n            break;\n\n          case 2:\n            /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = $tTA8$var$TABLE;\n            break;\n\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = $tTA8$var$BAD;\n        } //--- DROPBITS(2) ---//\n\n\n        hold >>>= 2;\n        bits -= 2; //---//\n\n        break;\n\n      case $tTA8$var$STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7; //---//\n        //=== NEEDBITS(32); */\n\n        while (bits < 32) {\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        } //===//\n\n\n        if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = $tTA8$var$BAD;\n          break;\n        }\n\n        state.length = hold & 0xffff; //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n\n        hold = 0;\n        bits = 0; //===//\n\n        state.mode = $tTA8$var$COPY_;\n\n        if (flush === $tTA8$var$Z_TREES) {\n          break inf_leave;\n        }\n\n      /* falls through */\n\n      case $tTA8$var$COPY_:\n        state.mode = $tTA8$var$COPY;\n\n      /* falls through */\n\n      case $tTA8$var$COPY:\n        copy = state.length;\n\n        if (copy) {\n          if (copy > have) {\n            copy = have;\n          }\n\n          if (copy > left) {\n            copy = left;\n          }\n\n          if (copy === 0) {\n            break inf_leave;\n          } //--- zmemcpy(put, next, copy); ---\n\n\n          $tTA8$var$utils.arraySet(output, input, next, copy, put); //---//\n\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        } //Tracev((stderr, \"inflate:       stored end\\n\"));\n\n\n        state.mode = $tTA8$var$TYPE;\n        break;\n\n      case $tTA8$var$TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        } //===//\n\n\n        state.nlen = (hold & 0x1f) +\n        /*BITS(5)*/\n        257; //--- DROPBITS(5) ---//\n\n        hold >>>= 5;\n        bits -= 5; //---//\n\n        state.ndist = (hold & 0x1f) +\n        /*BITS(5)*/\n        1; //--- DROPBITS(5) ---//\n\n        hold >>>= 5;\n        bits -= 5; //---//\n\n        state.ncode = (hold & 0x0f) +\n        /*BITS(4)*/\n        4; //--- DROPBITS(4) ---//\n\n        hold >>>= 4;\n        bits -= 4; //---//\n        //#ifndef PKZIP_BUG_WORKAROUND\n\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = $tTA8$var$BAD;\n          break;\n        } //#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n\n\n        state.have = 0;\n        state.mode = $tTA8$var$LENLENS;\n\n      /* falls through */\n\n      case $tTA8$var$LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) {\n              break inf_leave;\n            }\n\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          } //===//\n\n\n          state.lens[order[state.have++]] = hold & 0x07; //BITS(3);\n          //--- DROPBITS(3) ---//\n\n          hold >>>= 3;\n          bits -= 3; //---//\n        }\n\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        } // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n\n\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n        opts = {\n          bits: state.lenbits\n        };\n        ret = $tTA8$var$inflate_table($tTA8$var$CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = $tTA8$var$BAD;\n          break;\n        } //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n\n\n        state.have = 0;\n        state.mode = $tTA8$var$CODELENS;\n\n      /* falls through */\n\n      case $tTA8$var$CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & (1 << state.lenbits) - 1];\n            /*BITS(state.lenbits)*/\n\n            here_bits = here >>> 24;\n            here_op = here >>> 16 & 0xff;\n            here_val = here & 0xffff;\n\n            if (here_bits <= bits) {\n              break;\n            } //--- PULLBYTE() ---//\n\n\n            if (have === 0) {\n              break inf_leave;\n            }\n\n            have--;\n            hold += input[next++] << bits;\n            bits += 8; //---//\n          }\n\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits; //---//\n\n            state.lens[state.have++] = here_val;\n          } else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n\n              while (bits < n) {\n                if (have === 0) {\n                  break inf_leave;\n                }\n\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              } //===//\n              //--- DROPBITS(here.bits) ---//\n\n\n              hold >>>= here_bits;\n              bits -= here_bits; //---//\n\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = $tTA8$var$BAD;\n                break;\n              }\n\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03); //BITS(2);\n              //--- DROPBITS(2) ---//\n\n              hold >>>= 2;\n              bits -= 2; //---//\n            } else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n\n              while (bits < n) {\n                if (have === 0) {\n                  break inf_leave;\n                }\n\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              } //===//\n              //--- DROPBITS(here.bits) ---//\n\n\n              hold >>>= here_bits;\n              bits -= here_bits; //---//\n\n              len = 0;\n              copy = 3 + (hold & 0x07); //BITS(3);\n              //--- DROPBITS(3) ---//\n\n              hold >>>= 3;\n              bits -= 3; //---//\n            } else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n\n              while (bits < n) {\n                if (have === 0) {\n                  break inf_leave;\n                }\n\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              } //===//\n              //--- DROPBITS(here.bits) ---//\n\n\n              hold >>>= here_bits;\n              bits -= here_bits; //---//\n\n              len = 0;\n              copy = 11 + (hold & 0x7f); //BITS(7);\n              //--- DROPBITS(7) ---//\n\n              hold >>>= 7;\n              bits -= 7; //---//\n            }\n\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = $tTA8$var$BAD;\n              break;\n            }\n\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n        /* handle error breaks in while */\n\n\n        if (state.mode === $tTA8$var$BAD) {\n          break;\n        }\n        /* check for end-of-block code (better have one) */\n\n\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = $tTA8$var$BAD;\n          break;\n        }\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n\n\n        state.lenbits = 9;\n        opts = {\n          bits: state.lenbits\n        };\n        ret = $tTA8$var$inflate_table($tTA8$var$LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n\n        state.lenbits = opts.bits; // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = $tTA8$var$BAD;\n          break;\n        }\n\n        state.distbits = 6; //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n\n        state.distcode = state.distdyn;\n        opts = {\n          bits: state.distbits\n        };\n        ret = $tTA8$var$inflate_table($tTA8$var$DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n\n        state.distbits = opts.bits; // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = $tTA8$var$BAD;\n          break;\n        } //Tracev((stderr, 'inflate:       codes ok\\n'));\n\n\n        state.mode = $tTA8$var$LEN_;\n\n        if (flush === $tTA8$var$Z_TREES) {\n          break inf_leave;\n        }\n\n      /* falls through */\n\n      case $tTA8$var$LEN_:\n        state.mode = $tTA8$var$LEN;\n\n      /* falls through */\n\n      case $tTA8$var$LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits; //---\n\n          $tTA8$var$inflate_fast(strm, _out); //--- LOAD() ---\n\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits; //---\n\n          if (state.mode === $tTA8$var$TYPE) {\n            state.back = -1;\n          }\n\n          break;\n        }\n\n        state.back = 0;\n\n        for (;;) {\n          here = state.lencode[hold & (1 << state.lenbits) - 1];\n          /*BITS(state.lenbits)*/\n\n          here_bits = here >>> 24;\n          here_op = here >>> 16 & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) {\n            break;\n          } //--- PULLBYTE() ---//\n\n\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          have--;\n          hold += input[next++] << bits;\n          bits += 8; //---//\n        }\n\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n\n          for (;;) {\n            here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>\n            /*BITS(last.bits + last.op)*/\n            last_bits)];\n            here_bits = here >>> 24;\n            here_op = here >>> 16 & 0xff;\n            here_val = here & 0xffff;\n\n            if (last_bits + here_bits <= bits) {\n              break;\n            } //--- PULLBYTE() ---//\n\n\n            if (have === 0) {\n              break inf_leave;\n            }\n\n            have--;\n            hold += input[next++] << bits;\n            bits += 8; //---//\n          } //--- DROPBITS(last.bits) ---//\n\n\n          hold >>>= last_bits;\n          bits -= last_bits; //---//\n\n          state.back += last_bits;\n        } //--- DROPBITS(here.bits) ---//\n\n\n        hold >>>= here_bits;\n        bits -= here_bits; //---//\n\n        state.back += here_bits;\n        state.length = here_val;\n\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = $tTA8$var$LIT;\n          break;\n        }\n\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = $tTA8$var$TYPE;\n          break;\n        }\n\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = $tTA8$var$BAD;\n          break;\n        }\n\n        state.extra = here_op & 15;\n        state.mode = $tTA8$var$LENEXT;\n\n      /* falls through */\n\n      case $tTA8$var$LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n\n          while (bits < n) {\n            if (have === 0) {\n              break inf_leave;\n            }\n\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          } //===//\n\n\n          state.length += hold & (1 << state.extra) - 1\n          /*BITS(state.extra)*/\n          ; //--- DROPBITS(state.extra) ---//\n\n          hold >>>= state.extra;\n          bits -= state.extra; //---//\n\n          state.back += state.extra;\n        } //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n\n\n        state.was = state.length;\n        state.mode = $tTA8$var$DIST;\n\n      /* falls through */\n\n      case $tTA8$var$DIST:\n        for (;;) {\n          here = state.distcode[hold & (1 << state.distbits) - 1];\n          /*BITS(state.distbits)*/\n\n          here_bits = here >>> 24;\n          here_op = here >>> 16 & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) {\n            break;\n          } //--- PULLBYTE() ---//\n\n\n          if (have === 0) {\n            break inf_leave;\n          }\n\n          have--;\n          hold += input[next++] << bits;\n          bits += 8; //---//\n        }\n\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n\n          for (;;) {\n            here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>\n            /*BITS(last.bits + last.op)*/\n            last_bits)];\n            here_bits = here >>> 24;\n            here_op = here >>> 16 & 0xff;\n            here_val = here & 0xffff;\n\n            if (last_bits + here_bits <= bits) {\n              break;\n            } //--- PULLBYTE() ---//\n\n\n            if (have === 0) {\n              break inf_leave;\n            }\n\n            have--;\n            hold += input[next++] << bits;\n            bits += 8; //---//\n          } //--- DROPBITS(last.bits) ---//\n\n\n          hold >>>= last_bits;\n          bits -= last_bits; //---//\n\n          state.back += last_bits;\n        } //--- DROPBITS(here.bits) ---//\n\n\n        hold >>>= here_bits;\n        bits -= here_bits; //---//\n\n        state.back += here_bits;\n\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = $tTA8$var$BAD;\n          break;\n        }\n\n        state.offset = here_val;\n        state.extra = here_op & 15;\n        state.mode = $tTA8$var$DISTEXT;\n\n      /* falls through */\n\n      case $tTA8$var$DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n\n          while (bits < n) {\n            if (have === 0) {\n              break inf_leave;\n            }\n\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          } //===//\n\n\n          state.offset += hold & (1 << state.extra) - 1\n          /*BITS(state.extra)*/\n          ; //--- DROPBITS(state.extra) ---//\n\n          hold >>>= state.extra;\n          bits -= state.extra; //---//\n\n          state.back += state.extra;\n        } //#ifdef INFLATE_STRICT\n\n\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = $tTA8$var$BAD;\n          break;\n        } //#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n\n\n        state.mode = $tTA8$var$MATCH;\n\n      /* falls through */\n\n      case $tTA8$var$MATCH:\n        if (left === 0) {\n          break inf_leave;\n        }\n\n        copy = _out - left;\n\n        if (state.offset > copy) {\n          /* copy from window */\n          copy = state.offset - copy;\n\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = $tTA8$var$BAD;\n              break;\n            } // (!) This block is disabled in zlib defaults,\n            // don't enable it for binary compatibility\n            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n            //          Trace((stderr, \"inflate.c too far\\n\"));\n            //          copy -= state.whave;\n            //          if (copy > state.length) { copy = state.length; }\n            //          if (copy > left) { copy = left; }\n            //          left -= copy;\n            //          state.length -= copy;\n            //          do {\n            //            output[put++] = 0;\n            //          } while (--copy);\n            //          if (state.length === 0) { state.mode = LEN; }\n            //          break;\n            //#endif\n\n          }\n\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          } else {\n            from = state.wnext - copy;\n          }\n\n          if (copy > state.length) {\n            copy = state.length;\n          }\n\n          from_source = state.window;\n        } else {\n          /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n\n        if (copy > left) {\n          copy = left;\n        }\n\n        left -= copy;\n        state.length -= copy;\n\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n\n        if (state.length === 0) {\n          state.mode = $tTA8$var$LEN;\n        }\n\n        break;\n\n      case $tTA8$var$LIT:\n        if (left === 0) {\n          break inf_leave;\n        }\n\n        output[put++] = state.length;\n        left--;\n        state.mode = $tTA8$var$LEN;\n        break;\n\n      case $tTA8$var$CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) {\n              break inf_leave;\n            }\n\n            have--; // Use '|' instead of '+' to make sure that result is signed\n\n            hold |= input[next++] << bits;\n            bits += 8;\n          } //===//\n\n\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n\n          if (_out) {\n            strm.adler = state.check =\n            /*UPDATE(state.check, put - _out, _out);*/\n            state.flags ? $tTA8$var$crc32(state.check, output, _out, put - _out) : $tTA8$var$adler32(state.check, output, _out, put - _out);\n          }\n\n          _out = left; // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n\n          if ((state.flags ? hold : $tTA8$var$zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = $tTA8$var$BAD;\n            break;\n          } //=== INITBITS();\n\n\n          hold = 0;\n          bits = 0; //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n\n        state.mode = $tTA8$var$LENGTH;\n\n      /* falls through */\n\n      case $tTA8$var$LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) {\n              break inf_leave;\n            }\n\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          } //===//\n\n\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = $tTA8$var$BAD;\n            break;\n          } //=== INITBITS();\n\n\n          hold = 0;\n          bits = 0; //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n\n        state.mode = $tTA8$var$DONE;\n\n      /* falls through */\n\n      case $tTA8$var$DONE:\n        ret = $tTA8$var$Z_STREAM_END;\n        break inf_leave;\n\n      case $tTA8$var$BAD:\n        ret = $tTA8$var$Z_DATA_ERROR;\n        break inf_leave;\n\n      case $tTA8$var$MEM:\n        return $tTA8$var$Z_MEM_ERROR;\n\n      case $tTA8$var$SYNC:\n      /* falls through */\n\n      default:\n        return $tTA8$var$Z_STREAM_ERROR;\n    }\n  } // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n  //--- RESTORE() ---\n\n\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits; //---\n\n  if (state.wsize || _out !== strm.avail_out && state.mode < $tTA8$var$BAD && (state.mode < $tTA8$var$CHECK || flush !== $tTA8$var$Z_FINISH)) {\n    if ($tTA8$var$updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = $tTA8$var$MEM;\n      return $tTA8$var$Z_MEM_ERROR;\n    }\n  }\n\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n\n  if (state.wrap && _out) {\n    strm.adler = state.check =\n    /*UPDATE(state.check, strm.next_out - _out, _out);*/\n    state.flags ? $tTA8$var$crc32(state.check, output, _out, strm.next_out - _out) : $tTA8$var$adler32(state.check, output, _out, strm.next_out - _out);\n  }\n\n  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === $tTA8$var$TYPE ? 128 : 0) + (state.mode === $tTA8$var$LEN_ || state.mode === $tTA8$var$COPY_ ? 256 : 0);\n\n  if ((_in === 0 && _out === 0 || flush === $tTA8$var$Z_FINISH) && ret === $tTA8$var$Z_OK) {\n    ret = $tTA8$var$Z_BUF_ERROR;\n  }\n\n  return ret;\n}\n\nfunction $tTA8$var$inflateEnd(strm) {\n  if (!strm || !strm.state\n  /*|| strm->zfree == (free_func)0*/\n  ) {\n      return $tTA8$var$Z_STREAM_ERROR;\n    }\n\n  var state = strm.state;\n\n  if (state.window) {\n    state.window = null;\n  }\n\n  strm.state = null;\n  return $tTA8$var$Z_OK;\n}\n\nfunction $tTA8$var$inflateGetHeader(strm, head) {\n  var state;\n  /* check state */\n\n  if (!strm || !strm.state) {\n    return $tTA8$var$Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n\n  if ((state.wrap & 2) === 0) {\n    return $tTA8$var$Z_STREAM_ERROR;\n  }\n  /* save header structure */\n\n\n  state.head = head;\n  head.done = false;\n  return $tTA8$var$Z_OK;\n}\n\nfunction $tTA8$var$inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n  var state;\n  var dictid;\n  var ret;\n  /* check state */\n\n  if (!strm\n  /* == Z_NULL */\n  || !strm.state\n  /* == Z_NULL */\n  ) {\n      return $tTA8$var$Z_STREAM_ERROR;\n    }\n\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== $tTA8$var$DICT) {\n    return $tTA8$var$Z_STREAM_ERROR;\n  }\n  /* check for correct dictionary identifier */\n\n\n  if (state.mode === $tTA8$var$DICT) {\n    dictid = 1;\n    /* adler32(0, null, 0)*/\n\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n\n    dictid = $tTA8$var$adler32(dictid, dictionary, dictLength, 0);\n\n    if (dictid !== state.check) {\n      return $tTA8$var$Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n\n\n  ret = $tTA8$var$updatewindow(strm, dictionary, dictLength, dictLength);\n\n  if (ret) {\n    state.mode = $tTA8$var$MEM;\n    return $tTA8$var$Z_MEM_ERROR;\n  }\n\n  state.havedict = 1; // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n\n  return $tTA8$var$Z_OK;\n}\n\nvar $tTA8$export$inflateReset = $tTA8$var$inflateReset;\n$tTA8$exports.inflateReset = $tTA8$export$inflateReset;\nvar $tTA8$export$inflateReset2 = $tTA8$var$inflateReset2;\n$tTA8$exports.inflateReset2 = $tTA8$export$inflateReset2;\nvar $tTA8$export$inflateResetKeep = $tTA8$var$inflateResetKeep;\n$tTA8$exports.inflateResetKeep = $tTA8$export$inflateResetKeep;\nvar $tTA8$export$inflateInit = $tTA8$var$inflateInit;\n$tTA8$exports.inflateInit = $tTA8$export$inflateInit;\nvar $tTA8$export$inflateInit2 = $tTA8$var$inflateInit2;\n$tTA8$exports.inflateInit2 = $tTA8$export$inflateInit2;\nvar $tTA8$export$inflate = $tTA8$var$inflate;\n$tTA8$exports.inflate = $tTA8$export$inflate;\nvar $tTA8$export$inflateEnd = $tTA8$var$inflateEnd;\n$tTA8$exports.inflateEnd = $tTA8$export$inflateEnd;\nvar $tTA8$export$inflateGetHeader = $tTA8$var$inflateGetHeader;\n$tTA8$exports.inflateGetHeader = $tTA8$export$inflateGetHeader;\nvar $tTA8$export$inflateSetDictionary = $tTA8$var$inflateSetDictionary;\n$tTA8$exports.inflateSetDictionary = $tTA8$export$inflateSetDictionary;\nvar $tTA8$export$inflateInfo = 'pako inflate (from Nodeca project)';\n$tTA8$exports.inflateInfo = $tTA8$export$inflateInfo;\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/"},"sourceMaps":null,"error":null,"hash":"f982d6058ca509d7dcba5516c9cdcd44","cacheData":{"env":{},"imports":{"$require$../utils/common":["../utils/common","*"],"$require$./adler32":["./adler32","*"],"$require$./crc32":["./crc32","*"],"$require$./inffast":["./inffast","*"],"$require$./inftrees":["./inftrees","*"]},"exports":{"inflateReset":"$tTA8$export$inflateReset","inflateReset2":"$tTA8$export$inflateReset2","inflateResetKeep":"$tTA8$export$inflateResetKeep","inflateInit":"$tTA8$export$inflateInit","inflateInit2":"$tTA8$export$inflateInit2","inflate":"$tTA8$export$inflate","inflateEnd":"$tTA8$export$inflateEnd","inflateGetHeader":"$tTA8$export$inflateGetHeader","inflateSetDictionary":"$tTA8$export$inflateSetDictionary","inflateInfo":"$tTA8$export$inflateInfo"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}