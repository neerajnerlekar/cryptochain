{"id":"FKeL","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\brorand\\package.json","includedInParent":true,"mtime":1598465925350},{"name":"crypto","optional":true,"loc":{"line":56,"column":25},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\brorand\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"}],"generated":{"js":"var $FKeL$exports = {};\nvar $FKeL$var$r;\n\n$FKeL$exports = function rand(len) {\n  if (!$FKeL$var$r) $FKeL$var$r = new $FKeL$var$Rand(null);\n  return $FKeL$var$r.generate(len);\n};\n\nfunction $FKeL$var$Rand(rand) {\n  this.rand = rand;\n}\n\n$FKeL$exports.Rand = $FKeL$var$Rand;\n\n$FKeL$var$Rand.prototype.generate = function generate(len) {\n  return this._rand(len);\n}; // Emulate crypto API using randy\n\n\n$FKeL$var$Rand.prototype._rand = function _rand(n) {\n  if (this.rand.getBytes) return this.rand.getBytes(n);\n  var res = new Uint8Array(n);\n\n  for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();\n\n  return res;\n};\n\nif (typeof self === 'object') {\n  if (self.crypto && self.crypto.getRandomValues) {\n    // Modern browsers\n    $FKeL$var$Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.crypto.getRandomValues(arr);\n      return arr;\n    };\n  } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n    // IE\n    $FKeL$var$Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.msCrypto.getRandomValues(arr);\n      return arr;\n    }; // Safari's WebWorkers do not have `crypto`\n\n  } else if (typeof window === 'object') {\n    // Old junk\n    $FKeL$var$Rand.prototype._rand = function () {\n      throw new Error('Not implemented yet');\n    };\n  }\n} else {\n  // Node.js or Web worker with no crypto support\n  try {\n    var $FKeL$var$crypto = $parcel$require(\"FKeL\", \"crypto\");\n    if (typeof $FKeL$var$crypto.randomBytes !== 'function') throw new Error('Not supported');\n\n    $FKeL$var$Rand.prototype._rand = function _rand(n) {\n      return $FKeL$var$crypto.randomBytes(n);\n    };\n  } catch (e) {}\n}"},"sourceMaps":null,"error":null,"hash":"55d424d7e8b0a993c5c0699c543e106c","cacheData":{"env":{},"imports":{"$require$crypto":["crypto","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}