{"id":"zhPs","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\package.json","includedInParent":true,"mtime":1598465886305},{"name":"safe-buffer","loc":{"line":5,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\internal\\streams\\BufferList.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"},{"name":"util","loc":{"line":6,"column":19},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\internal\\streams\\BufferList.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"}],"generated":{"js":"\nvar $zhPs$exports = {};\n\nfunction $zhPs$var$_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar $zhPs$var$Buffer = $parcel$require(\"zhPs\", \"safe-buffer\").Buffer;\nvar $zhPs$var$util = $parcel$require(\"zhPs\", \"util\");\n\nfunction $zhPs$var$copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\n$zhPs$exports = function () {\n  function BufferList() {\n    $zhPs$var$_classCallCheck(this, BufferList);\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = {\n      data: v,\n      next: null\n    };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = {\n      data: v,\n      next: this.head\n    };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n\n    while (p = p.next) {\n      ret += s + p.data;\n    }\n\n    return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return $zhPs$var$Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = $zhPs$var$Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n\n    while (p) {\n      $zhPs$var$copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif ($zhPs$var$util && $zhPs$var$util.inspect && $zhPs$var$util.inspect.custom) {\n  $zhPs$exports.prototype[$zhPs$var$util.inspect.custom] = function () {\n    var obj = $zhPs$var$util.inspect({\n      length: this.length\n    });\n    return this.constructor.name + ' ' + obj;\n  };\n}"},"sourceMaps":null,"error":null,"hash":"97d6a8185a5df1c18489cc16590e40f5","cacheData":{"env":{},"imports":{"$require$safe-buffer":["safe-buffer","*"],"$require$util":["util","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}