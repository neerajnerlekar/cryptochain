{"id":"BVuf","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\qs\\package.json","includedInParent":true,"mtime":1598465921227},{"name":"./utils","loc":{"line":3,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\qs\\lib\\stringify.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\qs\\lib\\utils.js"},{"name":"./formats","loc":{"line":4,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\qs\\lib\\stringify.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\qs\\lib\\formats.js"}],"generated":{"js":"var $BVuf$exports = {};\nvar $BVuf$var$utils = $parcel$require(\"BVuf\", \"./utils\");\nvar $BVuf$var$formats = $parcel$require(\"BVuf\", \"./formats\");\nvar $BVuf$var$arrayPrefixGenerators = {\n  brackets: function brackets(prefix) {\n    // eslint-disable-line func-name-matching\n    return prefix + '[]';\n  },\n  indices: function indices(prefix, key) {\n    // eslint-disable-line func-name-matching\n    return prefix + '[' + key + ']';\n  },\n  repeat: function repeat(prefix) {\n    // eslint-disable-line func-name-matching\n    return prefix;\n  }\n};\nvar $BVuf$var$toISO = Date.prototype.toISOString;\nvar $BVuf$var$defaults = {\n  delimiter: '&',\n  encode: true,\n  encoder: $BVuf$var$utils.encode,\n  encodeValuesOnly: false,\n  serializeDate: function serializeDate(date) {\n    // eslint-disable-line func-name-matching\n    return $BVuf$var$toISO.call(date);\n  },\n  skipNulls: false,\n  strictNullHandling: false\n};\n\nvar $BVuf$var$stringify = function stringify( // eslint-disable-line func-name-matching\nobject, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly) {\n  var obj = object;\n\n  if (typeof filter === 'function') {\n    obj = filter(prefix, obj);\n  } else if (obj instanceof Date) {\n    obj = serializeDate(obj);\n  } else if (obj === null) {\n    if (strictNullHandling) {\n      return encoder && !encodeValuesOnly ? encoder(prefix, $BVuf$var$defaults.encoder) : prefix;\n    }\n\n    obj = '';\n  }\n\n  if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || $BVuf$var$utils.isBuffer(obj)) {\n    if (encoder) {\n      var keyValue = encodeValuesOnly ? prefix : encoder(prefix, $BVuf$var$defaults.encoder);\n      return [formatter(keyValue) + '=' + formatter(encoder(obj, $BVuf$var$defaults.encoder))];\n    }\n\n    return [formatter(prefix) + '=' + formatter(String(obj))];\n  }\n\n  var values = [];\n\n  if (typeof obj === 'undefined') {\n    return values;\n  }\n\n  var objKeys;\n\n  if (Array.isArray(filter)) {\n    objKeys = filter;\n  } else {\n    var keys = Object.keys(obj);\n    objKeys = sort ? keys.sort(sort) : keys;\n  }\n\n  for (var i = 0; i < objKeys.length; ++i) {\n    var key = objKeys[i];\n\n    if (skipNulls && obj[key] === null) {\n      continue;\n    }\n\n    if (Array.isArray(obj)) {\n      values = values.concat(stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));\n    } else {\n      values = values.concat(stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));\n    }\n  }\n\n  return values;\n};\n\n$BVuf$exports = function (object, opts) {\n  var obj = object;\n  var options = opts ? $BVuf$var$utils.assign({}, opts) : {};\n\n  if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {\n    throw new TypeError('Encoder has to be a function.');\n  }\n\n  var delimiter = typeof options.delimiter === 'undefined' ? $BVuf$var$defaults.delimiter : options.delimiter;\n  var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : $BVuf$var$defaults.strictNullHandling;\n  var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : $BVuf$var$defaults.skipNulls;\n  var encode = typeof options.encode === 'boolean' ? options.encode : $BVuf$var$defaults.encode;\n  var encoder = typeof options.encoder === 'function' ? options.encoder : $BVuf$var$defaults.encoder;\n  var sort = typeof options.sort === 'function' ? options.sort : null;\n  var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;\n  var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : $BVuf$var$defaults.serializeDate;\n  var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : $BVuf$var$defaults.encodeValuesOnly;\n\n  if (typeof options.format === 'undefined') {\n    options.format = $BVuf$var$formats['default'];\n  } else if (!Object.prototype.hasOwnProperty.call($BVuf$var$formats.formatters, options.format)) {\n    throw new TypeError('Unknown format option provided.');\n  }\n\n  var formatter = $BVuf$var$formats.formatters[options.format];\n  var objKeys;\n  var filter;\n\n  if (typeof options.filter === 'function') {\n    filter = options.filter;\n    obj = filter('', obj);\n  } else if (Array.isArray(options.filter)) {\n    filter = options.filter;\n    objKeys = filter;\n  }\n\n  var keys = [];\n\n  if (typeof obj !== 'object' || obj === null) {\n    return '';\n  }\n\n  var arrayFormat;\n\n  if (options.arrayFormat in $BVuf$var$arrayPrefixGenerators) {\n    arrayFormat = options.arrayFormat;\n  } else if ('indices' in options) {\n    arrayFormat = options.indices ? 'indices' : 'repeat';\n  } else {\n    arrayFormat = 'indices';\n  }\n\n  var generateArrayPrefix = $BVuf$var$arrayPrefixGenerators[arrayFormat];\n\n  if (!objKeys) {\n    objKeys = Object.keys(obj);\n  }\n\n  if (sort) {\n    objKeys.sort(sort);\n  }\n\n  for (var i = 0; i < objKeys.length; ++i) {\n    var key = objKeys[i];\n\n    if (skipNulls && obj[key] === null) {\n      continue;\n    }\n\n    keys = keys.concat($BVuf$var$stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode ? encoder : null, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));\n  }\n\n  var joined = keys.join(delimiter);\n  var prefix = options.addQueryPrefix === true ? '?' : '';\n  return joined.length > 0 ? prefix + joined : '';\n};"},"sourceMaps":null,"error":null,"hash":"89ca1bb01eed9034c87dac48b42a6f25","cacheData":{"env":{},"imports":{"$require$./utils":["./utils","*"],"$require$./formats":["./formats","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}