{"id":"Cqnu","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parseurl\\package.json","includedInParent":true,"mtime":1598465904760},{"name":"url","loc":{"line":15,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parseurl\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\url\\url.js"}],"generated":{"js":"var $Cqnu$exports = {};\n\n/**\n * Module dependencies.\n * @private\n */\nvar $Cqnu$var$url = $parcel$require(\"Cqnu\", \"url\");\nvar $Cqnu$var$parse = $Cqnu$var$url.parse;\nvar $Cqnu$var$Url = $Cqnu$var$url.Url;\n/**\n * Module exports.\n * @public\n */\n\n$Cqnu$exports = $Cqnu$var$parseurl;\n$Cqnu$exports.original = $Cqnu$var$originalurl;\n/**\n * Parse the `req` url with memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @public\n */\n\nfunction $Cqnu$var$parseurl(req) {\n  var url = req.url;\n\n  if (url === undefined) {\n    // URL is undefined\n    return undefined;\n  }\n\n  var parsed = req._parsedUrl;\n\n  if ($Cqnu$var$fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed;\n  } // Parse the URL\n\n\n  parsed = $Cqnu$var$fastparse(url);\n  parsed._raw = url;\n  return req._parsedUrl = parsed;\n}\n\n;\n/**\n * Parse the `req` original url with fallback and memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @public\n */\n\nfunction $Cqnu$var$originalurl(req) {\n  var url = req.originalUrl;\n\n  if (typeof url !== 'string') {\n    // Fallback\n    return $Cqnu$var$parseurl(req);\n  }\n\n  var parsed = req._parsedOriginalUrl;\n\n  if ($Cqnu$var$fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed;\n  } // Parse the URL\n\n\n  parsed = $Cqnu$var$fastparse(url);\n  parsed._raw = url;\n  return req._parsedOriginalUrl = parsed;\n}\n\n;\n/**\n * Parse the `str` url with fast-path short-cut.\n *\n * @param {string} str\n * @return {Object}\n * @private\n */\n\nfunction $Cqnu$var$fastparse(str) {\n  if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f\n  /* / */\n  ) {\n      return $Cqnu$var$parse(str);\n    }\n\n  var pathname = str;\n  var query = null;\n  var search = null; // This takes the regexp from https://github.com/joyent/node/pull/7878\n  // Which is /^(\\/[^?#\\s]*)(\\?[^#\\s]*)?$/\n  // And unrolls it into a for loop\n\n  for (var i = 1; i < str.length; i++) {\n    switch (str.charCodeAt(i)) {\n      case 0x3f:\n        /* ?  */\n        if (search === null) {\n          pathname = str.substring(0, i);\n          query = str.substring(i + 1);\n          search = str.substring(i);\n        }\n\n        break;\n\n      case 0x09:\n      /* \\t */\n\n      case 0x0a:\n      /* \\n */\n\n      case 0x0c:\n      /* \\f */\n\n      case 0x0d:\n      /* \\r */\n\n      case 0x20:\n      /*    */\n\n      case 0x23:\n      /* #  */\n\n      case 0xa0:\n      case 0xfeff:\n        return $Cqnu$var$parse(str);\n    }\n  }\n\n  var url = $Cqnu$var$Url !== undefined ? new $Cqnu$var$Url() : {};\n  url.path = str;\n  url.href = str;\n  url.pathname = pathname;\n\n  if (search !== null) {\n    url.query = query;\n    url.search = search;\n  }\n\n  return url;\n}\n/**\n * Determine if parsed is still fresh for url.\n *\n * @param {string} url\n * @param {object} parsedUrl\n * @return {boolean}\n * @private\n */\n\n\nfunction $Cqnu$var$fresh(url, parsedUrl) {\n  return typeof parsedUrl === 'object' && parsedUrl !== null && ($Cqnu$var$Url === undefined || parsedUrl instanceof $Cqnu$var$Url) && parsedUrl._raw === url;\n}"},"sourceMaps":null,"error":null,"hash":"69b3d0c07ca221f28faab673b38f8aae","cacheData":{"env":{},"imports":{"$require$url":["url","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}