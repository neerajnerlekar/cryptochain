{"id":"GmU1","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\package.json","includedInParent":true,"mtime":1598465921227},{"name":"buffer","loc":{"line":196,"column":33},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\extend-node.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\buffer\\index.js"},{"name":"stream","loc":{"line":207,"column":35},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\extend-node.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\stream-browserify\\index.js"}],"generated":{"js":"\nvar $GmU1$exports = {};\nvar $GmU1$var$Buffer = $parcel$require(\"GmU1\", \"buffer\").Buffer; // == Extend Node primitives to use iconv-lite =================================\n\n$GmU1$exports = function (iconv) {\n  var original = undefined; // Place to keep original methods.\n  // Node authors rewrote Buffer internals to make it compatible with\n  // Uint8Array and we cannot patch key functions since then.\n\n  iconv.supportsNodeEncodingsExtension = !(new $GmU1$var$Buffer(0) instanceof Uint8Array);\n\n  iconv.extendNodeEncodings = function extendNodeEncodings() {\n    if (original) return;\n    original = {};\n\n    if (!iconv.supportsNodeEncodingsExtension) {\n      console.error(\"ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node\");\n      console.error(\"See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility\");\n      return;\n    }\n\n    var nodeNativeEncodings = {\n      'hex': true,\n      'utf8': true,\n      'utf-8': true,\n      'ascii': true,\n      'binary': true,\n      'base64': true,\n      'ucs2': true,\n      'ucs-2': true,\n      'utf16le': true,\n      'utf-16le': true\n    };\n\n    $GmU1$var$Buffer.isNativeEncoding = function (enc) {\n      return enc && nodeNativeEncodings[enc.toLowerCase()];\n    }; // -- SlowBuffer -----------------------------------------------------------\n\n\n    var SlowBuffer = $parcel$require(\"GmU1\", \"buffer\").SlowBuffer;\n    original.SlowBufferToString = SlowBuffer.prototype.toString;\n\n    SlowBuffer.prototype.toString = function (encoding, start, end) {\n      encoding = String(encoding || 'utf8').toLowerCase(); // Use native conversion when possible\n\n      if ($GmU1$var$Buffer.isNativeEncoding(encoding)) return original.SlowBufferToString.call(this, encoding, start, end); // Otherwise, use our decoding method.\n\n      if (typeof start == 'undefined') start = 0;\n      if (typeof end == 'undefined') end = this.length;\n      return iconv.decode(this.slice(start, end), encoding);\n    };\n\n    original.SlowBufferWrite = SlowBuffer.prototype.write;\n\n    SlowBuffer.prototype.write = function (string, offset, length, encoding) {\n      // Support both (string, offset, length, encoding)\n      // and the legacy (string, encoding, offset, length)\n      if (isFinite(offset)) {\n        if (!isFinite(length)) {\n          encoding = length;\n          length = undefined;\n        }\n      } else {\n        // legacy\n        var swap = encoding;\n        encoding = offset;\n        offset = length;\n        length = swap;\n      }\n\n      offset = +offset || 0;\n      var remaining = this.length - offset;\n\n      if (!length) {\n        length = remaining;\n      } else {\n        length = +length;\n\n        if (length > remaining) {\n          length = remaining;\n        }\n      }\n\n      encoding = String(encoding || 'utf8').toLowerCase(); // Use native conversion when possible\n\n      if ($GmU1$var$Buffer.isNativeEncoding(encoding)) return original.SlowBufferWrite.call(this, string, offset, length, encoding);\n      if (string.length > 0 && (length < 0 || offset < 0)) throw new RangeError('attempt to write beyond buffer bounds'); // Otherwise, use our encoding method.\n\n      var buf = iconv.encode(string, encoding);\n      if (buf.length < length) length = buf.length;\n      buf.copy(this, offset, 0, length);\n      return length;\n    }; // -- Buffer ---------------------------------------------------------------\n\n\n    original.BufferIsEncoding = $GmU1$var$Buffer.isEncoding;\n\n    $GmU1$var$Buffer.isEncoding = function (encoding) {\n      return $GmU1$var$Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);\n    };\n\n    original.BufferByteLength = $GmU1$var$Buffer.byteLength;\n\n    $GmU1$var$Buffer.byteLength = SlowBuffer.byteLength = function (str, encoding) {\n      encoding = String(encoding || 'utf8').toLowerCase(); // Use native conversion when possible\n\n      if ($GmU1$var$Buffer.isNativeEncoding(encoding)) return original.BufferByteLength.call(this, str, encoding); // Slow, I know, but we don't have a better way yet.\n\n      return iconv.encode(str, encoding).length;\n    };\n\n    original.BufferToString = $GmU1$var$Buffer.prototype.toString;\n\n    $GmU1$var$Buffer.prototype.toString = function (encoding, start, end) {\n      encoding = String(encoding || 'utf8').toLowerCase(); // Use native conversion when possible\n\n      if ($GmU1$var$Buffer.isNativeEncoding(encoding)) return original.BufferToString.call(this, encoding, start, end); // Otherwise, use our decoding method.\n\n      if (typeof start == 'undefined') start = 0;\n      if (typeof end == 'undefined') end = this.length;\n      return iconv.decode(this.slice(start, end), encoding);\n    };\n\n    original.BufferWrite = $GmU1$var$Buffer.prototype.write;\n\n    $GmU1$var$Buffer.prototype.write = function (string, offset, length, encoding) {\n      var _offset = offset,\n          _length = length,\n          _encoding = encoding; // Support both (string, offset, length, encoding)\n      // and the legacy (string, encoding, offset, length)\n\n      if (isFinite(offset)) {\n        if (!isFinite(length)) {\n          encoding = length;\n          length = undefined;\n        }\n      } else {\n        // legacy\n        var swap = encoding;\n        encoding = offset;\n        offset = length;\n        length = swap;\n      }\n\n      encoding = String(encoding || 'utf8').toLowerCase(); // Use native conversion when possible\n\n      if ($GmU1$var$Buffer.isNativeEncoding(encoding)) return original.BufferWrite.call(this, string, _offset, _length, _encoding);\n      offset = +offset || 0;\n      var remaining = this.length - offset;\n\n      if (!length) {\n        length = remaining;\n      } else {\n        length = +length;\n\n        if (length > remaining) {\n          length = remaining;\n        }\n      }\n\n      if (string.length > 0 && (length < 0 || offset < 0)) throw new RangeError('attempt to write beyond buffer bounds'); // Otherwise, use our encoding method.\n\n      var buf = iconv.encode(string, encoding);\n      if (buf.length < length) length = buf.length;\n      buf.copy(this, offset, 0, length);\n      return length; // TODO: Set _charsWritten.\n    }; // -- Readable -------------------------------------------------------------\n\n\n    if (iconv.supportsStreams) {\n      var Readable = $parcel$require(\"GmU1\", \"stream\").Readable;\n      original.ReadableSetEncoding = Readable.prototype.setEncoding;\n\n      Readable.prototype.setEncoding = function setEncoding(enc, options) {\n        // Use our own decoder, it has the same interface.\n        // We cannot use original function as it doesn't handle BOM-s.\n        this._readableState.decoder = iconv.getDecoder(enc, options);\n        this._readableState.encoding = enc;\n      };\n\n      Readable.prototype.collect = iconv._collect;\n    }\n  }; // Remove iconv-lite Node primitive extensions.\n\n\n  iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {\n    if (!iconv.supportsNodeEncodingsExtension) return;\n    if (!original) throw new Error(\"require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.\");\n    delete $GmU1$var$Buffer.isNativeEncoding;\n    var SlowBuffer = $parcel$require(\"GmU1\", \"buffer\").SlowBuffer;\n    SlowBuffer.prototype.toString = original.SlowBufferToString;\n    SlowBuffer.prototype.write = original.SlowBufferWrite;\n    $GmU1$var$Buffer.isEncoding = original.BufferIsEncoding;\n    $GmU1$var$Buffer.byteLength = original.BufferByteLength;\n    $GmU1$var$Buffer.prototype.toString = original.BufferToString;\n    $GmU1$var$Buffer.prototype.write = original.BufferWrite;\n\n    if (iconv.supportsStreams) {\n      var Readable = $parcel$require(\"GmU1\", \"stream\").Readable;\n      Readable.prototype.setEncoding = original.ReadableSetEncoding;\n      delete Readable.prototype.collect;\n    }\n\n    original = undefined;\n  };\n};"},"sourceMaps":null,"error":null,"hash":"5aa260d3234ed713a8742a7e6576865f","cacheData":{"env":{},"imports":{"$require$buffer":["buffer","*"],"$require$stream":["stream","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}