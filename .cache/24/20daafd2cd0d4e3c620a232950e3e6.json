{"id":"ILP2","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\package.json","includedInParent":true,"mtime":1598465886486},{"name":"bn.js","loc":{"line":1,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\withPublic.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\bn.js\\lib\\bn.js"},{"name":"safe-buffer","loc":{"line":2,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\withPublic.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"}],"generated":{"js":"\nvar $ILP2$exports = {};\nvar $ILP2$var$BN = $parcel$require(\"ILP2\", \"bn.js\");\nvar $ILP2$var$Buffer = $parcel$require(\"ILP2\", \"safe-buffer\").Buffer;\n\nfunction $ILP2$var$withPublic(paddedMsg, key) {\n  return $ILP2$var$Buffer.from(paddedMsg.toRed($ILP2$var$BN.mont(key.modulus)).redPow(new $ILP2$var$BN(key.publicExponent)).fromRed().toArray());\n}\n\n$ILP2$exports = $ILP2$var$withPublic;"},"sourceMaps":null,"error":null,"hash":"fee6d1c459d9caf408ec32402eebe452","cacheData":{"env":{},"imports":{"$require$bn.js":["bn.js","*"],"$require$safe-buffer":["safe-buffer","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}