{"id":"j6sC","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\package.json","includedInParent":true,"mtime":1598465886486},{"name":"asn1.js","loc":{"line":5,"column":19},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\asn1.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1.js"},{"name":"./certificate","loc":{"line":7,"column":30},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\asn1.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\certificate.js"}],"generated":{"js":"var $j6sC$exports = {};\nvar $j6sC$var$asn1 = $parcel$require(\"j6sC\", \"asn1.js\");\nvar $j6sC$export$certificate = $parcel$require(\"j6sC\", \"./certificate\");\n$j6sC$exports.certificate = $j6sC$export$certificate;\nvar $j6sC$var$RSAPrivateKey = $j6sC$var$asn1.define('RSAPrivateKey', function () {\n  this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());\n});\nvar $j6sC$export$RSAPrivateKey = $j6sC$var$RSAPrivateKey;\n$j6sC$exports.RSAPrivateKey = $j6sC$export$RSAPrivateKey;\nvar $j6sC$var$RSAPublicKey = $j6sC$var$asn1.define('RSAPublicKey', function () {\n  this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());\n});\nvar $j6sC$export$RSAPublicKey = $j6sC$var$RSAPublicKey;\n$j6sC$exports.RSAPublicKey = $j6sC$export$RSAPublicKey;\nvar $j6sC$var$PublicKey = $j6sC$var$asn1.define('SubjectPublicKeyInfo', function () {\n  this.seq().obj(this.key('algorithm').use($j6sC$var$AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());\n});\nvar $j6sC$export$PublicKey = $j6sC$var$PublicKey;\n$j6sC$exports.PublicKey = $j6sC$export$PublicKey;\nvar $j6sC$var$AlgorithmIdentifier = $j6sC$var$asn1.define('AlgorithmIdentifier', function () {\n  this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());\n});\nvar $j6sC$var$PrivateKeyInfo = $j6sC$var$asn1.define('PrivateKeyInfo', function () {\n  this.seq().obj(this.key('version').int(), this.key('algorithm').use($j6sC$var$AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());\n});\nvar $j6sC$export$PrivateKey = $j6sC$var$PrivateKeyInfo;\n$j6sC$exports.PrivateKey = $j6sC$export$PrivateKey;\nvar $j6sC$var$EncryptedPrivateKeyInfo = $j6sC$var$asn1.define('EncryptedPrivateKeyInfo', function () {\n  this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());\n});\nvar $j6sC$export$EncryptedPrivateKey = $j6sC$var$EncryptedPrivateKeyInfo;\n$j6sC$exports.EncryptedPrivateKey = $j6sC$export$EncryptedPrivateKey;\nvar $j6sC$var$DSAPrivateKey = $j6sC$var$asn1.define('DSAPrivateKey', function () {\n  this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());\n});\nvar $j6sC$export$DSAPrivateKey = $j6sC$var$DSAPrivateKey;\n$j6sC$exports.DSAPrivateKey = $j6sC$export$DSAPrivateKey;\nvar $j6sC$export$DSAparam = $j6sC$var$asn1.define('DSAparam', function () {\n  this.int();\n});\n$j6sC$exports.DSAparam = $j6sC$export$DSAparam;\nvar $j6sC$var$ECPrivateKey = $j6sC$var$asn1.define('ECPrivateKey', function () {\n  this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use($j6sC$var$ECParameters), this.key('publicKey').optional().explicit(1).bitstr());\n});\nvar $j6sC$export$ECPrivateKey = $j6sC$var$ECPrivateKey;\n$j6sC$exports.ECPrivateKey = $j6sC$export$ECPrivateKey;\nvar $j6sC$var$ECParameters = $j6sC$var$asn1.define('ECParameters', function () {\n  this.choice({\n    namedCurve: this.objid()\n  });\n});\nvar $j6sC$export$signature = $j6sC$var$asn1.define('signature', function () {\n  this.seq().obj(this.key('r').int(), this.key('s').int());\n});\n$j6sC$exports.signature = $j6sC$export$signature;"},"sourceMaps":null,"error":null,"hash":"d5d07373204716b770b5a1c60bb937cf","cacheData":{"env":{},"imports":{"$require$asn1.js":["asn1.js","*"],"$require$./certificate":["./certificate","*"]},"exports":{"certificate":"$j6sC$export$certificate","RSAPrivateKey":"$j6sC$export$RSAPrivateKey","RSAPublicKey":"$j6sC$export$RSAPublicKey","PublicKey":"$j6sC$export$PublicKey","PrivateKey":"$j6sC$export$PrivateKey","EncryptedPrivateKey":"$j6sC$export$EncryptedPrivateKey","DSAPrivateKey":"$j6sC$export$DSAPrivateKey","DSAparam":"$j6sC$export$DSAparam","ECPrivateKey":"$j6sC$export$ECPrivateKey","signature":"$j6sC$export$signature"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}