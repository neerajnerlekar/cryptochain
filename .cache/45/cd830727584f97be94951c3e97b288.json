{"id":"St7v","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\package.json","includedInParent":true,"mtime":1598465911093},{"name":"./utils","loc":{"line":3,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\hmac.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\utils.js"},{"name":"minimalistic-assert","loc":{"line":4,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\hmac.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\minimalistic-assert\\index.js"}],"generated":{"js":"var $St7v$exports = {};\nvar $St7v$var$utils = $parcel$require(\"St7v\", \"./utils\");\nvar $St7v$var$assert = $parcel$require(\"St7v\", \"minimalistic-assert\");\n\nfunction $St7v$var$Hmac(hash, key, enc) {\n  if (!(this instanceof $St7v$var$Hmac)) return new $St7v$var$Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init($St7v$var$utils.toArray(key, enc));\n}\n\n$St7v$exports = $St7v$var$Hmac;\n\n$St7v$var$Hmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  $St7v$var$assert(key.length <= this.blockSize); // Add padding to key\n\n  for (var i = key.length; i < this.blockSize; i++) key.push(0);\n\n  for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n\n  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n  for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n\n  this.outer = new this.Hash().update(key);\n};\n\n$St7v$var$Hmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\n$St7v$var$Hmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};"},"sourceMaps":null,"error":null,"hash":"c340958039f8e87517b058027f9c55ee","cacheData":{"env":{},"imports":{"$require$./utils":["./utils","*"],"$require$minimalistic-assert":["minimalistic-assert","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}