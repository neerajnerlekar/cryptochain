{"id":"WWIA","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\package.json","includedInParent":true,"mtime":1598465911093},{"name":"./utils","loc":{"line":3,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\common.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\utils.js"},{"name":"minimalistic-assert","loc":{"line":4,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\common.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\minimalistic-assert\\index.js"}],"generated":{"js":"var $WWIA$exports = {};\nvar $WWIA$var$utils = $parcel$require(\"WWIA\", \"./utils\");\nvar $WWIA$var$assert = $parcel$require(\"WWIA\", \"minimalistic-assert\");\n\nfunction $WWIA$var$BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\n\nvar $WWIA$export$BlockHash = $WWIA$var$BlockHash;\n$WWIA$exports.BlockHash = $WWIA$export$BlockHash;\n\n$WWIA$var$BlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = $WWIA$var$utils.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length; // Enough data, try updating\n\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending; // Process pending data in blocks\n\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = $WWIA$var$utils.join32(msg, 0, msg.length - r, this.endian);\n\n    for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\n$WWIA$var$BlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  $WWIA$var$assert(this.pending === null);\n  return this._digest(enc);\n};\n\n$WWIA$var$BlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n\n  for (var i = 1; i < k; i++) res[i] = 0; // Append length\n\n\n  len <<= 3;\n\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++) res[i++] = 0;\n  }\n\n  return res;\n};"},"sourceMaps":null,"error":null,"hash":"e9cf04d944a01e872b2fa8d408c6dfa8","cacheData":{"env":{},"imports":{"$require$./utils":["./utils","*"],"$require$minimalistic-assert":["minimalistic-assert","*"]},"exports":{"BlockHash":"$WWIA$export$BlockHash"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}