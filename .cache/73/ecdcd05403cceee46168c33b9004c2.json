{"id":"r6Uq","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\package.json","includedInParent":true,"mtime":1598465886486},{"name":"parse-asn1","loc":{"line":1,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\privateDecrypt.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\index.js"},{"name":"./mgf","loc":{"line":2,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\privateDecrypt.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\mgf.js"},{"name":"./xor","loc":{"line":3,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\privateDecrypt.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\xor.js"},{"name":"bn.js","loc":{"line":4,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\privateDecrypt.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\bn.js\\lib\\bn.js"},{"name":"browserify-rsa","loc":{"line":5,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\privateDecrypt.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-rsa\\index.js"},{"name":"create-hash","loc":{"line":6,"column":25},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\privateDecrypt.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\create-hash\\browser.js"},{"name":"./withPublic","loc":{"line":7,"column":25},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\privateDecrypt.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\withPublic.js"},{"name":"safe-buffer","loc":{"line":8,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\public-encrypt\\privateDecrypt.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"}],"generated":{"js":"\nvar $r6Uq$exports = {};\nvar $r6Uq$var$parseKeys = $parcel$require(\"r6Uq\", \"parse-asn1\");\nvar $r6Uq$var$mgf = $parcel$require(\"r6Uq\", \"./mgf\");\nvar $r6Uq$var$xor = $parcel$require(\"r6Uq\", \"./xor\");\nvar $r6Uq$var$BN = $parcel$require(\"r6Uq\", \"bn.js\");\nvar $r6Uq$var$crt = $parcel$require(\"r6Uq\", \"browserify-rsa\");\nvar $r6Uq$var$createHash = $parcel$require(\"r6Uq\", \"create-hash\");\nvar $r6Uq$var$withPublic = $parcel$require(\"r6Uq\", \"./withPublic\");\nvar $r6Uq$var$Buffer = $parcel$require(\"r6Uq\", \"safe-buffer\").Buffer;\n\n$r6Uq$exports = function privateDecrypt(privateKey, enc, reverse) {\n  var padding;\n\n  if (privateKey.padding) {\n    padding = privateKey.padding;\n  } else if (reverse) {\n    padding = 1;\n  } else {\n    padding = 4;\n  }\n\n  var key = $r6Uq$var$parseKeys(privateKey);\n  var k = key.modulus.byteLength();\n\n  if (enc.length > k || new $r6Uq$var$BN(enc).cmp(key.modulus) >= 0) {\n    throw new Error('decryption error');\n  }\n\n  var msg;\n\n  if (reverse) {\n    msg = $r6Uq$var$withPublic(new $r6Uq$var$BN(enc), key);\n  } else {\n    msg = $r6Uq$var$crt(enc, key);\n  }\n\n  var zBuffer = $r6Uq$var$Buffer.alloc(k - msg.length);\n  msg = $r6Uq$var$Buffer.concat([zBuffer, msg], k);\n\n  if (padding === 4) {\n    return $r6Uq$var$oaep(key, msg);\n  } else if (padding === 1) {\n    return $r6Uq$var$pkcs1(key, msg, reverse);\n  } else if (padding === 3) {\n    return msg;\n  } else {\n    throw new Error('unknown padding');\n  }\n};\n\nfunction $r6Uq$var$oaep(key, msg) {\n  var k = key.modulus.byteLength();\n  var iHash = $r6Uq$var$createHash('sha1').update($r6Uq$var$Buffer.alloc(0)).digest();\n  var hLen = iHash.length;\n\n  if (msg[0] !== 0) {\n    throw new Error('decryption error');\n  }\n\n  var maskedSeed = msg.slice(1, hLen + 1);\n  var maskedDb = msg.slice(hLen + 1);\n  var seed = $r6Uq$var$xor(maskedSeed, $r6Uq$var$mgf(maskedDb, hLen));\n  var db = $r6Uq$var$xor(maskedDb, $r6Uq$var$mgf(seed, k - hLen - 1));\n\n  if ($r6Uq$var$compare(iHash, db.slice(0, hLen))) {\n    throw new Error('decryption error');\n  }\n\n  var i = hLen;\n\n  while (db[i] === 0) {\n    i++;\n  }\n\n  if (db[i++] !== 1) {\n    throw new Error('decryption error');\n  }\n\n  return db.slice(i);\n}\n\nfunction $r6Uq$var$pkcs1(key, msg, reverse) {\n  var p1 = msg.slice(0, 2);\n  var i = 2;\n  var status = 0;\n\n  while (msg[i++] !== 0) {\n    if (i >= msg.length) {\n      status++;\n      break;\n    }\n  }\n\n  var ps = msg.slice(2, i - 1);\n\n  if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) {\n    status++;\n  }\n\n  if (ps.length < 8) {\n    status++;\n  }\n\n  if (status) {\n    throw new Error('decryption error');\n  }\n\n  return msg.slice(i);\n}\n\nfunction $r6Uq$var$compare(a, b) {\n  a = $r6Uq$var$Buffer.from(a);\n  b = $r6Uq$var$Buffer.from(b);\n  var dif = 0;\n  var len = a.length;\n\n  if (a.length !== b.length) {\n    dif++;\n    len = Math.min(a.length, b.length);\n  }\n\n  var i = -1;\n\n  while (++i < len) {\n    dif += a[i] ^ b[i];\n  }\n\n  return dif;\n}"},"sourceMaps":null,"error":null,"hash":"1fbf0aacb032efd9f24187bf6eb26a4d","cacheData":{"env":{},"imports":{"$require$parse-asn1":["parse-asn1","*"],"$require$./mgf":["./mgf","*"],"$require$./xor":["./xor","*"],"$require$bn.js":["bn.js","*"],"$require$browserify-rsa":["browserify-rsa","*"],"$require$create-hash":["create-hash","*"],"$require$./withPublic":["./withPublic","*"],"$require$safe-buffer":["safe-buffer","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}