{"id":"KKMV","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\package.json","includedInParent":true,"mtime":1598465880614},{"name":"debug","loc":{"line":16,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\lib\\router\\route.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\debug\\src\\browser.js"},{"name":"array-flatten","loc":{"line":17,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\lib\\router\\route.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\array-flatten\\array-flatten.js"},{"name":"./layer","loc":{"line":18,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\lib\\router\\route.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\lib\\router\\layer.js"},{"name":"methods","loc":{"line":19,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\lib\\router\\route.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\methods\\index.js"}],"generated":{"js":"var $KKMV$exports = {};\n\n/**\n * Module dependencies.\n * @private\n */\nvar $KKMV$var$debug = $parcel$require(\"KKMV\", \"debug\")('express:router:route');\nvar $KKMV$var$flatten = $parcel$require(\"KKMV\", \"array-flatten\");\nvar $KKMV$var$Layer = $parcel$require(\"KKMV\", \"./layer\");\nvar $KKMV$var$methods = $parcel$require(\"KKMV\", \"methods\");\n/**\n * Module variables.\n * @private\n */\n\nvar $KKMV$var$slice = Array.prototype.slice;\nvar $KKMV$var$toString = Object.prototype.toString;\n/**\n * Module exports.\n * @public\n */\n\n$KKMV$exports = $KKMV$var$Route;\n/**\n * Initialize `Route` with the given `path`,\n *\n * @param {String} path\n * @public\n */\n\nfunction $KKMV$var$Route(path) {\n  this.path = path;\n  this.stack = [];\n  $KKMV$var$debug('new %o', path); // route handlers for various http methods\n\n  this.methods = {};\n}\n/**\n * Determine if the route handles a given method.\n * @private\n */\n\n\n$KKMV$var$Route.prototype._handles_method = function _handles_method(method) {\n  if (this.methods._all) {\n    return true;\n  }\n\n  var name = method.toLowerCase();\n\n  if (name === 'head' && !this.methods['head']) {\n    name = 'get';\n  }\n\n  return Boolean(this.methods[name]);\n};\n/**\n * @return {Array} supported HTTP methods\n * @private\n */\n\n\n$KKMV$var$Route.prototype._options = function _options() {\n  var methods = Object.keys(this.methods); // append automatic head\n\n  if (this.methods.get && !this.methods.head) {\n    methods.push('head');\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    // make upper case\n    methods[i] = methods[i].toUpperCase();\n  }\n\n  return methods;\n};\n/**\n * dispatch req, res into this route\n * @private\n */\n\n\n$KKMV$var$Route.prototype.dispatch = function dispatch(req, res, done) {\n  var idx = 0;\n  var stack = this.stack;\n\n  if (stack.length === 0) {\n    return done();\n  }\n\n  var method = req.method.toLowerCase();\n\n  if (method === 'head' && !this.methods['head']) {\n    method = 'get';\n  }\n\n  req.route = this;\n  next();\n\n  function next(err) {\n    // signal to exit route\n    if (err && err === 'route') {\n      return done();\n    } // signal to exit router\n\n\n    if (err && err === 'router') {\n      return done(err);\n    }\n\n    var layer = stack[idx++];\n\n    if (!layer) {\n      return done(err);\n    }\n\n    if (layer.method && layer.method !== method) {\n      return next(err);\n    }\n\n    if (err) {\n      layer.handle_error(err, req, res, next);\n    } else {\n      layer.handle_request(req, res, next);\n    }\n  }\n};\n/**\n * Add a handler for all HTTP verbs to this route.\n *\n * Behaves just like middleware and can respond or call `next`\n * to continue processing.\n *\n * You can use multiple `.all` call to add multiple handlers.\n *\n *   function check_something(req, res, next){\n *     next();\n *   };\n *\n *   function validate_user(req, res, next){\n *     next();\n *   };\n *\n *   route\n *   .all(validate_user)\n *   .all(check_something)\n *   .get(function(req, res, next){\n *     res.send('hello world');\n *   });\n *\n * @param {function} handler\n * @return {Route} for chaining\n * @api public\n */\n\n\n$KKMV$var$Route.prototype.all = function all() {\n  var handles = $KKMV$var$flatten($KKMV$var$slice.call(arguments));\n\n  for (var i = 0; i < handles.length; i++) {\n    var handle = handles[i];\n\n    if (typeof handle !== 'function') {\n      var type = $KKMV$var$toString.call(handle);\n      var msg = 'Route.all() requires a callback function but got a ' + type;\n      throw new TypeError(msg);\n    }\n\n    var layer = $KKMV$var$Layer('/', {}, handle);\n    layer.method = undefined;\n    this.methods._all = true;\n    this.stack.push(layer);\n  }\n\n  return this;\n};\n\n$KKMV$var$methods.forEach(function (method) {\n  $KKMV$var$Route.prototype[method] = function () {\n    var handles = $KKMV$var$flatten($KKMV$var$slice.call(arguments));\n\n    for (var i = 0; i < handles.length; i++) {\n      var handle = handles[i];\n\n      if (typeof handle !== 'function') {\n        var type = $KKMV$var$toString.call(handle);\n        var msg = 'Route.' + method + '() requires a callback function but got a ' + type;\n        throw new Error(msg);\n      }\n\n      $KKMV$var$debug('%s %o', method, this.path);\n      var layer = $KKMV$var$Layer('/', {}, handle);\n      layer.method = method;\n      this.methods[method] = true;\n      this.stack.push(layer);\n    }\n\n    return this;\n  };\n});"},"sourceMaps":null,"error":null,"hash":"a94192c7d51efa29f5b4ab641b23680b","cacheData":{"env":{},"imports":{"$require$debug":["debug","*"],"$require$array-flatten":["array-flatten","*"],"$require$./layer":["./layer","*"],"$require$methods":["methods","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}