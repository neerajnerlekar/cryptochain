{"id":"E8KT","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\util-deprecate\\package.json","includedInParent":true,"mtime":1598465886857}],"generated":{"js":"var $E8KT$exports = {};\n\n/**\n * Module exports.\n */\n$E8KT$exports = $E8KT$var$deprecate;\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction $E8KT$var$deprecate(fn, msg) {\n  if ($E8KT$var$config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n\n  function deprecated() {\n    if (!warned) {\n      if ($E8KT$var$config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if ($E8KT$var$config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n\n      warned = true;\n    }\n\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\n\nfunction $E8KT$var$config(name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!$parcel$global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n\n  var val = $parcel$global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}"},"sourceMaps":null,"error":null,"hash":"1c842bc88e407622253e8ecfb76a2276","cacheData":{"env":{},"imports":{},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}