{"id":"bniq","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\package.json","includedInParent":true,"mtime":1598465886487},{"name":"./modes","loc":{"line":1,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\encrypter.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\modes\\index.js"},{"name":"./authCipher","loc":{"line":2,"column":25},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\encrypter.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\authCipher.js"},{"name":"safe-buffer","loc":{"line":3,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\encrypter.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"},{"name":"./streamCipher","loc":{"line":4,"column":27},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\encrypter.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\streamCipher.js"},{"name":"cipher-base","loc":{"line":5,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\encrypter.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\cipher-base\\index.js"},{"name":"./aes","loc":{"line":6,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\encrypter.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\aes.js"},{"name":"evp_bytestokey","loc":{"line":7,"column":19},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\encrypter.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\evp_bytestokey\\index.js"},{"name":"inherits","loc":{"line":8,"column":23},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\encrypter.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\inherits\\inherits_browser.js"}],"generated":{"js":"\nvar $bniq$exports = {};\nvar $bniq$var$MODES = $parcel$require(\"bniq\", \"./modes\");\nvar $bniq$var$AuthCipher = $parcel$require(\"bniq\", \"./authCipher\");\nvar $bniq$var$Buffer = $parcel$require(\"bniq\", \"safe-buffer\").Buffer;\nvar $bniq$var$StreamCipher = $parcel$require(\"bniq\", \"./streamCipher\");\nvar $bniq$var$Transform = $parcel$require(\"bniq\", \"cipher-base\");\nvar $bniq$var$aes = $parcel$require(\"bniq\", \"./aes\");\nvar $bniq$var$ebtk = $parcel$require(\"bniq\", \"evp_bytestokey\");\nvar $bniq$var$inherits = $parcel$require(\"bniq\", \"inherits\");\n\nfunction $bniq$var$Cipher(mode, key, iv) {\n  $bniq$var$Transform.call(this);\n  this._cache = new $bniq$var$Splitter();\n  this._cipher = new $bniq$var$aes.AES(key);\n  this._prev = $bniq$var$Buffer.from(iv);\n  this._mode = mode;\n  this._autopadding = true;\n}\n\n$bniq$var$inherits($bniq$var$Cipher, $bniq$var$Transform);\n\n$bniq$var$Cipher.prototype._update = function (data) {\n  this._cache.add(data);\n\n  var chunk;\n  var thing;\n  var out = [];\n\n  while (chunk = this._cache.get()) {\n    thing = this._mode.encrypt(this, chunk);\n    out.push(thing);\n  }\n\n  return $bniq$var$Buffer.concat(out);\n};\n\nvar $bniq$var$PADDING = $bniq$var$Buffer.alloc(16, 0x10);\n\n$bniq$var$Cipher.prototype._final = function () {\n  var chunk = this._cache.flush();\n\n  if (this._autopadding) {\n    chunk = this._mode.encrypt(this, chunk);\n\n    this._cipher.scrub();\n\n    return chunk;\n  }\n\n  if (!chunk.equals($bniq$var$PADDING)) {\n    this._cipher.scrub();\n\n    throw new Error('data not multiple of block length');\n  }\n};\n\n$bniq$var$Cipher.prototype.setAutoPadding = function (setTo) {\n  this._autopadding = !!setTo;\n  return this;\n};\n\nfunction $bniq$var$Splitter() {\n  this.cache = $bniq$var$Buffer.allocUnsafe(0);\n}\n\n$bniq$var$Splitter.prototype.add = function (data) {\n  this.cache = $bniq$var$Buffer.concat([this.cache, data]);\n};\n\n$bniq$var$Splitter.prototype.get = function () {\n  if (this.cache.length > 15) {\n    var out = this.cache.slice(0, 16);\n    this.cache = this.cache.slice(16);\n    return out;\n  }\n\n  return null;\n};\n\n$bniq$var$Splitter.prototype.flush = function () {\n  var len = 16 - this.cache.length;\n  var padBuff = $bniq$var$Buffer.allocUnsafe(len);\n  var i = -1;\n\n  while (++i < len) {\n    padBuff.writeUInt8(len, i);\n  }\n\n  return $bniq$var$Buffer.concat([this.cache, padBuff]);\n};\n\nfunction $bniq$var$createCipheriv(suite, password, iv) {\n  var config = $bniq$var$MODES[suite.toLowerCase()];\n  if (!config) throw new TypeError('invalid suite type');\n  if (typeof password === 'string') password = $bniq$var$Buffer.from(password);\n  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);\n  if (typeof iv === 'string') iv = $bniq$var$Buffer.from(iv);\n  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);\n\n  if (config.type === 'stream') {\n    return new $bniq$var$StreamCipher(config.module, password, iv);\n  } else if (config.type === 'auth') {\n    return new $bniq$var$AuthCipher(config.module, password, iv);\n  }\n\n  return new $bniq$var$Cipher(config.module, password, iv);\n}\n\nfunction $bniq$var$createCipher(suite, password) {\n  var config = $bniq$var$MODES[suite.toLowerCase()];\n  if (!config) throw new TypeError('invalid suite type');\n  var keys = $bniq$var$ebtk(password, false, config.key, config.iv);\n  return $bniq$var$createCipheriv(suite, keys.key, keys.iv);\n}\n\nvar $bniq$export$createCipheriv = $bniq$var$createCipheriv;\n$bniq$exports.createCipheriv = $bniq$export$createCipheriv;\nvar $bniq$export$createCipher = $bniq$var$createCipher;\n$bniq$exports.createCipher = $bniq$export$createCipher;"},"sourceMaps":null,"error":null,"hash":"d0df2dc94bdb4a7bf0e90948fad80d25","cacheData":{"env":{},"imports":{"$require$./modes":["./modes","*"],"$require$./authCipher":["./authCipher","*"],"$require$safe-buffer":["safe-buffer","*"],"$require$./streamCipher":["./streamCipher","*"],"$require$cipher-base":["cipher-base","*"],"$require$./aes":["./aes","*"],"$require$evp_bytestokey":["evp_bytestokey","*"],"$require$inherits":["inherits","*"]},"exports":{"createCipheriv":"$bniq$export$createCipheriv","createCipher":"$bniq$export$createCipher"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}