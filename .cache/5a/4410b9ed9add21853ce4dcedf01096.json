{"id":"fT2I","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\cipher-base\\package.json","includedInParent":true,"mtime":1598465898420},{"name":"safe-buffer","loc":{"line":1,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\cipher-base\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"},{"name":"stream","loc":{"line":2,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\cipher-base\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\stream-browserify\\index.js"},{"name":"string_decoder","loc":{"line":3,"column":28},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\cipher-base\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\string_decoder\\lib\\string_decoder.js"},{"name":"inherits","loc":{"line":4,"column":23},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\cipher-base\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\inherits\\inherits_browser.js"}],"generated":{"js":"\nvar $fT2I$exports = {};\nvar $fT2I$var$Buffer = $parcel$require(\"fT2I\", \"safe-buffer\").Buffer;\nvar $fT2I$var$Transform = $parcel$require(\"fT2I\", \"stream\").Transform;\nvar $fT2I$var$StringDecoder = $parcel$require(\"fT2I\", \"string_decoder\").StringDecoder;\nvar $fT2I$var$inherits = $parcel$require(\"fT2I\", \"inherits\");\n\nfunction $fT2I$var$CipherBase(hashMode) {\n  $fT2I$var$Transform.call(this);\n  this.hashMode = typeof hashMode === 'string';\n\n  if (this.hashMode) {\n    this[hashMode] = this._finalOrDigest;\n  } else {\n    this.final = this._finalOrDigest;\n  }\n\n  if (this._final) {\n    this.__final = this._final;\n    this._final = null;\n  }\n\n  this._decoder = null;\n  this._encoding = null;\n}\n\n$fT2I$var$inherits($fT2I$var$CipherBase, $fT2I$var$Transform);\n\n$fT2I$var$CipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n  if (typeof data === 'string') {\n    data = $fT2I$var$Buffer.from(data, inputEnc);\n  }\n\n  var outData = this._update(data);\n\n  if (this.hashMode) return this;\n\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc);\n  }\n\n  return outData;\n};\n\n$fT2I$var$CipherBase.prototype.setAutoPadding = function () {};\n\n$fT2I$var$CipherBase.prototype.getAuthTag = function () {\n  throw new Error('trying to get auth tag in unsupported state');\n};\n\n$fT2I$var$CipherBase.prototype.setAuthTag = function () {\n  throw new Error('trying to set auth tag in unsupported state');\n};\n\n$fT2I$var$CipherBase.prototype.setAAD = function () {\n  throw new Error('trying to set aad in unsupported state');\n};\n\n$fT2I$var$CipherBase.prototype._transform = function (data, _, next) {\n  var err;\n\n  try {\n    if (this.hashMode) {\n      this._update(data);\n    } else {\n      this.push(this._update(data));\n    }\n  } catch (e) {\n    err = e;\n  } finally {\n    next(err);\n  }\n};\n\n$fT2I$var$CipherBase.prototype._flush = function (done) {\n  var err;\n\n  try {\n    this.push(this.__final());\n  } catch (e) {\n    err = e;\n  }\n\n  done(err);\n};\n\n$fT2I$var$CipherBase.prototype._finalOrDigest = function (outputEnc) {\n  var outData = this.__final() || $fT2I$var$Buffer.alloc(0);\n\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc, true);\n  }\n\n  return outData;\n};\n\n$fT2I$var$CipherBase.prototype._toString = function (value, enc, fin) {\n  if (!this._decoder) {\n    this._decoder = new $fT2I$var$StringDecoder(enc);\n    this._encoding = enc;\n  }\n\n  if (this._encoding !== enc) throw new Error('can\\'t switch encodings');\n\n  var out = this._decoder.write(value);\n\n  if (fin) {\n    out += this._decoder.end();\n  }\n\n  return out;\n};\n\n$fT2I$exports = $fT2I$var$CipherBase;"},"sourceMaps":null,"error":null,"hash":"bbe013421da18a5af6670222fbb2cb3d","cacheData":{"env":{},"imports":{"$require$safe-buffer":["safe-buffer","*"],"$require$stream":["stream","*"],"$require$string_decoder":["string_decoder","*"],"$require$inherits":["inherits","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}