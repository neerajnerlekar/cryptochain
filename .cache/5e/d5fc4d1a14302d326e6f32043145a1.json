{"id":"LMQS","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\events\\package.json","includedInParent":true,"mtime":1598465921091}],"generated":{"js":"var $LMQS$exports = {};\nvar $LMQS$var$R = typeof Reflect === 'object' ? Reflect : null;\nvar $LMQS$var$ReflectApply = $LMQS$var$R && typeof $LMQS$var$R.apply === 'function' ? $LMQS$var$R.apply : function ReflectApply(target, receiver, args) {\n  return Function.prototype.apply.call(target, receiver, args);\n};\nvar $LMQS$var$ReflectOwnKeys;\n\nif ($LMQS$var$R && typeof $LMQS$var$R.ownKeys === 'function') {\n  $LMQS$var$ReflectOwnKeys = $LMQS$var$R.ownKeys;\n} else if (Object.getOwnPropertySymbols) {\n  $LMQS$var$ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  $LMQS$var$ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction $LMQS$var$ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar $LMQS$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n};\n\nfunction $LMQS$var$EventEmitter() {\n  $LMQS$var$EventEmitter.init.call(this);\n}\n\n$LMQS$exports = $LMQS$var$EventEmitter;\n$LMQS$exports.once = $LMQS$var$once; // Backwards-compat with node 0.10.x\n\n$LMQS$var$EventEmitter.EventEmitter = $LMQS$var$EventEmitter;\n$LMQS$var$EventEmitter.prototype._events = undefined;\n$LMQS$var$EventEmitter.prototype._eventsCount = 0;\n$LMQS$var$EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\n\nvar $LMQS$var$defaultMaxListeners = 10;\n\nfunction $LMQS$var$checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty($LMQS$var$EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function () {\n    return $LMQS$var$defaultMaxListeners;\n  },\n  set: function (arg) {\n    if (typeof arg !== 'number' || arg < 0 || $LMQS$var$NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n\n    $LMQS$var$defaultMaxListeners = arg;\n  }\n});\n\n$LMQS$var$EventEmitter.init = function () {\n  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}; // Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\n\n\n$LMQS$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || $LMQS$var$NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $LMQS$var$_getMaxListeners(that) {\n  if (that._maxListeners === undefined) return $LMQS$var$EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\n$LMQS$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $LMQS$var$_getMaxListeners(this);\n};\n\n$LMQS$var$EventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n\n  var doError = type === 'error';\n  var events = this._events;\n  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.\n\n  if (doError) {\n    var er;\n    if (args.length > 0) er = args[0];\n\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    } // At least give some kind of context to the user\n\n\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n  if (handler === undefined) return false;\n\n  if (typeof handler === 'function') {\n    $LMQS$var$ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = $LMQS$var$arrayClone(handler, len);\n\n    for (var i = 0; i < len; ++i) $LMQS$var$ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction $LMQS$var$_addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n  $LMQS$var$checkListener(listener);\n  events = target._events;\n\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n\n      events = target._events;\n    }\n\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    } // Check for listener leak\n\n\n    m = $LMQS$var$_getMaxListeners(target);\n\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true; // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n\n      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      $LMQS$var$ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\n$LMQS$var$EventEmitter.prototype.addListener = function addListener(type, listener) {\n  return $LMQS$var$_addListener(this, type, listener, false);\n};\n\n$LMQS$var$EventEmitter.prototype.on = $LMQS$var$EventEmitter.prototype.addListener;\n\n$LMQS$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {\n  return $LMQS$var$_addListener(this, type, listener, true);\n};\n\nfunction $LMQS$var$onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0) return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction $LMQS$var$_onceWrap(target, type, listener) {\n  var state = {\n    fired: false,\n    wrapFn: undefined,\n    target: target,\n    type: type,\n    listener: listener\n  };\n  var wrapped = $LMQS$var$onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\n$LMQS$var$EventEmitter.prototype.once = function once(type, listener) {\n  $LMQS$var$checkListener(listener);\n  this.on(type, $LMQS$var$_onceWrap(this, type, listener));\n  return this;\n};\n\n$LMQS$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n  $LMQS$var$checkListener(listener);\n  this.prependListener(type, $LMQS$var$_onceWrap(this, type, listener));\n  return this;\n}; // Emits a 'removeListener' event if and only if the listener was removed.\n\n\n$LMQS$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {\n  var list, events, position, i, originalListener;\n  $LMQS$var$checkListener(listener);\n  events = this._events;\n  if (events === undefined) return this;\n  list = events[type];\n  if (list === undefined) return this;\n\n  if (list === listener || list.listener === listener) {\n    if (--this._eventsCount === 0) this._events = Object.create(null);else {\n      delete events[type];\n      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);\n    }\n  } else if (typeof list !== 'function') {\n    position = -1;\n\n    for (i = list.length - 1; i >= 0; i--) {\n      if (list[i] === listener || list[i].listener === listener) {\n        originalListener = list[i].listener;\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0) return this;\n    if (position === 0) list.shift();else {\n      $LMQS$var$spliceOne(list, position);\n    }\n    if (list.length === 1) events[type] = list[0];\n    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);\n  }\n\n  return this;\n};\n\n$LMQS$var$EventEmitter.prototype.off = $LMQS$var$EventEmitter.prototype.removeListener;\n\n$LMQS$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n  var listeners, events, i;\n  events = this._events;\n  if (events === undefined) return this; // not listening for removeListener, no need to emit\n\n  if (events.removeListener === undefined) {\n    if (arguments.length === 0) {\n      this._events = Object.create(null);\n      this._eventsCount = 0;\n    } else if (events[type] !== undefined) {\n      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];\n    }\n\n    return this;\n  } // emit removeListener for all listeners on all events\n\n\n  if (arguments.length === 0) {\n    var keys = Object.keys(events);\n    var key;\n\n    for (i = 0; i < keys.length; ++i) {\n      key = keys[i];\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n\n    this.removeAllListeners('removeListener');\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n    return this;\n  }\n\n  listeners = events[type];\n\n  if (typeof listeners === 'function') {\n    this.removeListener(type, listeners);\n  } else if (listeners !== undefined) {\n    // LIFO order\n    for (i = listeners.length - 1; i >= 0; i--) {\n      this.removeListener(type, listeners[i]);\n    }\n  }\n\n  return this;\n};\n\nfunction $LMQS$var$_listeners(target, type, unwrap) {\n  var events = target._events;\n  if (events === undefined) return [];\n  var evlistener = events[type];\n  if (evlistener === undefined) return [];\n  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n  return unwrap ? $LMQS$var$unwrapListeners(evlistener) : $LMQS$var$arrayClone(evlistener, evlistener.length);\n}\n\n$LMQS$var$EventEmitter.prototype.listeners = function listeners(type) {\n  return $LMQS$var$_listeners(this, type, true);\n};\n\n$LMQS$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return $LMQS$var$_listeners(this, type, false);\n};\n\n$LMQS$var$EventEmitter.listenerCount = function (emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return $LMQS$var$listenerCount.call(emitter, type);\n  }\n};\n\n$LMQS$var$EventEmitter.prototype.listenerCount = $LMQS$var$listenerCount;\n\nfunction $LMQS$var$listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\n$LMQS$var$EventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? $LMQS$var$ReflectOwnKeys(this._events) : [];\n};\n\nfunction $LMQS$var$arrayClone(arr, n) {\n  var copy = new Array(n);\n\n  for (var i = 0; i < n; ++i) copy[i] = arr[i];\n\n  return copy;\n}\n\nfunction $LMQS$var$spliceOne(list, index) {\n  for (; index + 1 < list.length; index++) list[index] = list[index + 1];\n\n  list.pop();\n}\n\nfunction $LMQS$var$unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n\n  return ret;\n}\n\nfunction $LMQS$var$once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n\n      resolve([].slice.call(arguments));\n    }\n\n    ;\n    var errorListener; // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}"},"sourceMaps":null,"error":null,"hash":"71b7504cfb47d44c0f12373bb893ec9d","cacheData":{"env":{},"imports":{},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}