{"id":"xFYh","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\negotiator\\package.json","includedInParent":true,"mtime":1598465910284},{"name":"./lib/charset","loc":{"line":105,"column":23},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\negotiator\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\negotiator\\lib\\charset.js"},{"name":"./lib/encoding","loc":{"line":108,"column":23},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\negotiator\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\negotiator\\lib\\encoding.js"},{"name":"./lib/language","loc":{"line":111,"column":23},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\negotiator\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\negotiator\\lib\\language.js"},{"name":"./lib/mediaType","loc":{"line":114,"column":23},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\negotiator\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\negotiator\\lib\\mediaType.js"}],"generated":{"js":"var $xFYh$exports = {};\n\n/**\n * Cached loaded submodules.\n * @private\n */\nvar $xFYh$var$modules = Object.create(null);\n/**\n * Module exports.\n * @public\n */\n\n$xFYh$exports = $xFYh$var$Negotiator;\n$xFYh$exports.Negotiator = $xFYh$var$Negotiator;\n/**\n * Create a Negotiator instance from a request.\n * @param {object} request\n * @public\n */\n\nfunction $xFYh$var$Negotiator(request) {\n  if (!(this instanceof $xFYh$var$Negotiator)) {\n    return new $xFYh$var$Negotiator(request);\n  }\n\n  this.request = request;\n}\n\n$xFYh$var$Negotiator.prototype.charset = function charset(available) {\n  var set = this.charsets(available);\n  return set && set[0];\n};\n\n$xFYh$var$Negotiator.prototype.charsets = function charsets(available) {\n  var preferredCharsets = $xFYh$var$loadModule('charset').preferredCharsets;\n  return preferredCharsets(this.request.headers['accept-charset'], available);\n};\n\n$xFYh$var$Negotiator.prototype.encoding = function encoding(available) {\n  var set = this.encodings(available);\n  return set && set[0];\n};\n\n$xFYh$var$Negotiator.prototype.encodings = function encodings(available) {\n  var preferredEncodings = $xFYh$var$loadModule('encoding').preferredEncodings;\n  return preferredEncodings(this.request.headers['accept-encoding'], available);\n};\n\n$xFYh$var$Negotiator.prototype.language = function language(available) {\n  var set = this.languages(available);\n  return set && set[0];\n};\n\n$xFYh$var$Negotiator.prototype.languages = function languages(available) {\n  var preferredLanguages = $xFYh$var$loadModule('language').preferredLanguages;\n  return preferredLanguages(this.request.headers['accept-language'], available);\n};\n\n$xFYh$var$Negotiator.prototype.mediaType = function mediaType(available) {\n  var set = this.mediaTypes(available);\n  return set && set[0];\n};\n\n$xFYh$var$Negotiator.prototype.mediaTypes = function mediaTypes(available) {\n  var preferredMediaTypes = $xFYh$var$loadModule('mediaType').preferredMediaTypes;\n  return preferredMediaTypes(this.request.headers.accept, available);\n}; // Backwards compatibility\n\n\n$xFYh$var$Negotiator.prototype.preferredCharset = $xFYh$var$Negotiator.prototype.charset;\n$xFYh$var$Negotiator.prototype.preferredCharsets = $xFYh$var$Negotiator.prototype.charsets;\n$xFYh$var$Negotiator.prototype.preferredEncoding = $xFYh$var$Negotiator.prototype.encoding;\n$xFYh$var$Negotiator.prototype.preferredEncodings = $xFYh$var$Negotiator.prototype.encodings;\n$xFYh$var$Negotiator.prototype.preferredLanguage = $xFYh$var$Negotiator.prototype.language;\n$xFYh$var$Negotiator.prototype.preferredLanguages = $xFYh$var$Negotiator.prototype.languages;\n$xFYh$var$Negotiator.prototype.preferredMediaType = $xFYh$var$Negotiator.prototype.mediaType;\n$xFYh$var$Negotiator.prototype.preferredMediaTypes = $xFYh$var$Negotiator.prototype.mediaTypes;\n/**\n * Load the given module.\n * @private\n */\n\nfunction $xFYh$var$loadModule(moduleName) {\n  var module = $xFYh$var$modules[moduleName];\n\n  if (module !== undefined) {\n    return module;\n  } // This uses a switch for static require analysis\n\n\n  switch (moduleName) {\n    case 'charset':\n      module = $parcel$require(\"xFYh\", \"./lib/charset\");\n      break;\n\n    case 'encoding':\n      module = $parcel$require(\"xFYh\", \"./lib/encoding\");\n      break;\n\n    case 'language':\n      module = $parcel$require(\"xFYh\", \"./lib/language\");\n      break;\n\n    case 'mediaType':\n      module = $parcel$require(\"xFYh\", \"./lib/mediaType\");\n      break;\n\n    default:\n      throw new Error('Cannot find module \\'' + moduleName + '\\'');\n  } // Store to prevent invoking require()\n\n\n  $xFYh$var$modules[moduleName] = module;\n  return module;\n}"},"sourceMaps":null,"error":null,"hash":"04211e6e7bedce723a6b8e1e69adeebb","cacheData":{"env":{},"imports":{"$require$./lib/charset":["./lib/charset","*"],"$require$./lib/encoding":["./lib/encoding","*"],"$require$./lib/language":["./lib/language","*"],"$require$./lib/mediaType":["./lib/mediaType","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}