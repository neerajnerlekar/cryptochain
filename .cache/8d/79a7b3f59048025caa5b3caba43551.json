{"id":"SYhk","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\package.json","includedInParent":true,"mtime":1598465886305},{"name":"process-nextick-args","loc":{"line":26,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\process-nextick-args\\index.js"},{"name":"isarray","loc":{"line":32,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\isarray\\index.js"},{"name":"events","loc":{"line":42,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\events\\events.js"},{"name":"./internal/streams/stream","loc":{"line":50,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\internal\\streams\\stream-browser.js"},{"name":"safe-buffer","loc":{"line":55,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"},{"name":"core-util-is","loc":{"line":67,"column":33},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\core-util-is\\lib\\util.js"},{"name":"inherits","loc":{"line":68,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\inherits\\inherits_browser.js"},{"name":"util","loc":{"line":72,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"./internal/streams/BufferList","loc":{"line":81,"column":25},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\internal\\streams\\BufferList.js"},{"name":"./internal/streams/destroy","loc":{"line":82,"column":26},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\internal\\streams\\destroy.js"},{"name":"./_stream_duplex","loc":{"line":179,"column":29},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_duplex.js"},{"name":"string_decoder/","loc":{"line":328,"column":46},"shouldWrap":true,"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\string_decoder\\lib\\string_decoder.js"},{"name":"process","parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\readable-stream\\lib\\_stream_readable.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\process\\browser.js"}],"generated":{"js":"\nvar $SYhk$exports = {};\nvar $SYhk$var$process = $parcel$require(\"SYhk\", \"process\");\n\n/*<replacement>*/\nvar $SYhk$var$pna = $parcel$require(\"SYhk\", \"process-nextick-args\");\n/*</replacement>*/\n\n$SYhk$exports = $SYhk$var$Readable;\n/*<replacement>*/\n\nvar $SYhk$var$isArray = $parcel$require(\"SYhk\", \"isarray\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar $SYhk$var$Duplex;\n/*</replacement>*/\n\n$SYhk$var$Readable.ReadableState = $SYhk$var$ReadableState;\n/*<replacement>*/\n\nvar $SYhk$var$EE = $parcel$require(\"SYhk\", \"events\").EventEmitter;\n\nvar $SYhk$var$EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar $SYhk$var$Stream = $parcel$require(\"SYhk\", \"./internal/streams/stream\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar $SYhk$var$Buffer = $parcel$require(\"SYhk\", \"safe-buffer\").Buffer;\n\nvar $SYhk$var$OurUint8Array = $parcel$global.Uint8Array || function () {};\n\nfunction $SYhk$var$_uint8ArrayToBuffer(chunk) {\n  return $SYhk$var$Buffer.from(chunk);\n}\n\nfunction $SYhk$var$_isUint8Array(obj) {\n  return $SYhk$var$Buffer.isBuffer(obj) || obj instanceof $SYhk$var$OurUint8Array;\n}\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar $SYhk$var$util = Object.create($parcel$require(\"SYhk\", \"core-util-is\"));\n$SYhk$var$util.inherits = $parcel$require(\"SYhk\", \"inherits\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar $SYhk$var$debugUtil = $parcel$require(\"SYhk\", \"util\");\nvar $SYhk$var$debug = void 0;\n\nif ($SYhk$var$debugUtil && $SYhk$var$debugUtil.debuglog) {\n  $SYhk$var$debug = $SYhk$var$debugUtil.debuglog('stream');\n} else {\n  $SYhk$var$debug = function () {};\n}\n/*</replacement>*/\n\n\nvar $SYhk$var$BufferList = $parcel$require(\"SYhk\", \"./internal/streams/BufferList\");\nvar $SYhk$var$destroyImpl = $parcel$require(\"SYhk\", \"./internal/streams/destroy\");\nvar $SYhk$var$StringDecoder;\n$SYhk$var$util.inherits($SYhk$var$Readable, $SYhk$var$Stream);\nvar $SYhk$var$kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction $SYhk$var$prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if ($SYhk$var$isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction $SYhk$var$ReadableState(options, stream) {\n  $SYhk$var$Duplex = $SYhk$var$Duplex || $parcel$require(\"SYhk\", \"./_stream_duplex\");\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  var isDuplex = stream instanceof $SYhk$var$Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm; // cast to ints.\n\n  this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new $SYhk$var$BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!$SYhk$var$StringDecoder) $SYhk$var$StringDecoder = $parcel$require(\"SYhk\", \"string_decoder/\").StringDecoder;\n    this.decoder = new $SYhk$var$StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction $SYhk$var$Readable(options) {\n  $SYhk$var$Duplex = $SYhk$var$Duplex || $parcel$require(\"SYhk\", \"./_stream_duplex\");\n  if (!(this instanceof $SYhk$var$Readable)) return new $SYhk$var$Readable(options);\n  this._readableState = new $SYhk$var$ReadableState(options, this); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  $SYhk$var$Stream.call(this);\n}\n\nObject.defineProperty($SYhk$var$Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\n$SYhk$var$Readable.prototype.destroy = $SYhk$var$destroyImpl.destroy;\n$SYhk$var$Readable.prototype._undestroy = $SYhk$var$destroyImpl.undestroy;\n\n$SYhk$var$Readable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\n$SYhk$var$Readable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = $SYhk$var$Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return $SYhk$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\n$SYhk$var$Readable.prototype.unshift = function (chunk) {\n  return $SYhk$var$readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction $SYhk$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    $SYhk$var$onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = $SYhk$var$chunkInvalid(state, chunk);\n\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== $SYhk$var$Buffer.prototype) {\n        chunk = $SYhk$var$_uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else $SYhk$var$addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) $SYhk$var$addChunk(stream, state, chunk, false);else $SYhk$var$maybeReadMore(stream, state);\n        } else {\n          $SYhk$var$addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return $SYhk$var$needMoreData(state);\n}\n\nfunction $SYhk$var$addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) $SYhk$var$emitReadable(stream);\n  }\n\n  $SYhk$var$maybeReadMore(stream, state);\n}\n\nfunction $SYhk$var$chunkInvalid(state, chunk) {\n  var er;\n\n  if (!$SYhk$var$_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  return er;\n} // if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\n\n\nfunction $SYhk$var$needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n$SYhk$var$Readable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\n$SYhk$var$Readable.prototype.setEncoding = function (enc) {\n  if (!$SYhk$var$StringDecoder) $SYhk$var$StringDecoder = $parcel$require(\"SYhk\", \"string_decoder/\").StringDecoder;\n  this._readableState.decoder = new $SYhk$var$StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n}; // Don't raise the hwm > 8MB\n\n\nvar $SYhk$var$MAX_HWM = 0x800000;\n\nfunction $SYhk$var$computeNewHighWaterMark(n) {\n  if (n >= $SYhk$var$MAX_HWM) {\n    n = $SYhk$var$MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction $SYhk$var$howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = $SYhk$var$computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\n$SYhk$var$Readable.prototype.read = function (n) {\n  $SYhk$var$debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    $SYhk$var$debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) $SYhk$var$endReadable(this);else $SYhk$var$emitReadable(this);\n    return null;\n  }\n\n  n = $SYhk$var$howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) $SYhk$var$endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  $SYhk$var$debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    $SYhk$var$debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    $SYhk$var$debug('reading or ended', doRead);\n  } else if (doRead) {\n    $SYhk$var$debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = $SYhk$var$howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = $SYhk$var$fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) $SYhk$var$endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction $SYhk$var$onEofChunk(stream, state) {\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true; // emit 'readable' now to make sure it gets picked up.\n\n  $SYhk$var$emitReadable(stream);\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction $SYhk$var$emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    $SYhk$var$debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) $SYhk$var$pna.nextTick($SYhk$var$emitReadable_, stream);else $SYhk$var$emitReadable_(stream);\n  }\n}\n\nfunction $SYhk$var$emitReadable_(stream) {\n  $SYhk$var$debug('emit readable');\n  stream.emit('readable');\n  $SYhk$var$flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction $SYhk$var$maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    $SYhk$var$pna.nextTick($SYhk$var$maybeReadMore_, stream, state);\n  }\n}\n\nfunction $SYhk$var$maybeReadMore_(stream, state) {\n  var len = state.length;\n\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    $SYhk$var$debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\n$SYhk$var$Readable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\n$SYhk$var$Readable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  $SYhk$var$debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $SYhk$var$process.stdout && dest !== $SYhk$var$process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) $SYhk$var$pna.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    $SYhk$var$debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    $SYhk$var$debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = $SYhk$var$pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    $SYhk$var$debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  } // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n\n\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    $SYhk$var$debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $SYhk$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        $SYhk$var$debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    $SYhk$var$debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if ($SYhk$var$EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  $SYhk$var$prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    $SYhk$var$debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    $SYhk$var$debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    $SYhk$var$debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction $SYhk$var$pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    $SYhk$var$debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && $SYhk$var$EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      $SYhk$var$flow(src);\n    }\n  };\n}\n\n$SYhk$var$Readable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = $SYhk$var$indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\n$SYhk$var$Readable.prototype.on = function (ev, fn) {\n  var res = $SYhk$var$Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n\n      if (!state.reading) {\n        $SYhk$var$pna.nextTick($SYhk$var$nReadingNextTick, this);\n      } else if (state.length) {\n        $SYhk$var$emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\n\n$SYhk$var$Readable.prototype.addListener = $SYhk$var$Readable.prototype.on;\n\nfunction $SYhk$var$nReadingNextTick(self) {\n  $SYhk$var$debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\n$SYhk$var$Readable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    $SYhk$var$debug('resume');\n    state.flowing = true;\n    $SYhk$var$resume(this, state);\n  }\n\n  return this;\n};\n\nfunction $SYhk$var$resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    $SYhk$var$pna.nextTick($SYhk$var$resume_, stream, state);\n  }\n}\n\nfunction $SYhk$var$resume_(stream, state) {\n  if (!state.reading) {\n    $SYhk$var$debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  $SYhk$var$flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\n$SYhk$var$Readable.prototype.pause = function () {\n  $SYhk$var$debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (false !== this._readableState.flowing) {\n    $SYhk$var$debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  return this;\n};\n\nfunction $SYhk$var$flow(stream) {\n  var state = stream._readableState;\n  $SYhk$var$debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {}\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\n$SYhk$var$Readable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    $SYhk$var$debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    $SYhk$var$debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < $SYhk$var$kProxyEvents.length; n++) {\n    stream.on($SYhk$var$kProxyEvents[n], this.emit.bind(this, $SYhk$var$kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    $SYhk$var$debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty($SYhk$var$Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n}); // exposed for testing purposes only.\n\n$SYhk$var$Readable._fromList = $SYhk$var$fromList; // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction $SYhk$var$fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = $SYhk$var$fromListPartial(n, state.buffer, state.decoder);\n  }\n  return ret;\n} // Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction $SYhk$var$fromListPartial(n, list, hasStrings) {\n  var ret;\n\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? $SYhk$var$copyFromBufferString(n, list) : $SYhk$var$copyFromBuffer(n, list);\n  }\n\n  return ret;\n} // Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction $SYhk$var$copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n\n      break;\n    }\n\n    ++c;\n  }\n\n  list.length -= c;\n  return ret;\n} // Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction $SYhk$var$copyFromBuffer(n, list) {\n  var ret = $SYhk$var$Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n\n      break;\n    }\n\n    ++c;\n  }\n\n  list.length -= c;\n  return ret;\n}\n\nfunction $SYhk$var$endReadable(stream) {\n  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    $SYhk$var$pna.nextTick($SYhk$var$endReadableNT, state, stream);\n  }\n}\n\nfunction $SYhk$var$endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction $SYhk$var$indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}"},"sourceMaps":null,"error":null,"hash":"043a1ce8b65e10f5ba44c0f2cc686590","cacheData":{"env":{},"imports":{"$require$process-nextick-args":["process-nextick-args","*"],"$require$isarray":["isarray","*"],"$require$events":["events","*"],"$require$./internal/streams/stream":["./internal/streams/stream","*"],"$require$safe-buffer":["safe-buffer","*"],"$require$core-util-is":["core-util-is","*"],"$require$inherits":["inherits","*"],"$require$util":["util","*"],"$require$./internal/streams/BufferList":["./internal/streams/BufferList","*"],"$require$./internal/streams/destroy":["./internal/streams/destroy","*"],"$require$./_stream_duplex":["./_stream_duplex","*"],"$require$string_decoder/":["string_decoder/","*"],"$require$process":["process","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}