{"id":"yHDV","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\package.json","includedInParent":true,"mtime":1598465888872},{"name":"http-errors","loc":{"line":14,"column":26},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\read.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\http-errors\\index.js"},{"name":"raw-body","loc":{"line":15,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\read.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\raw-body\\index.js"},{"name":"iconv-lite","loc":{"line":16,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\read.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\iconv-lite\\lib\\index.js"},{"name":"on-finished","loc":{"line":17,"column":25},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\read.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\on-finished\\index.js"},{"name":"zlib","loc":{"line":18,"column":19},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\node_modules\\body-parser\\lib\\read.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-zlib\\lib\\index.js"}],"generated":{"js":"var $yHDV$exports = {};\n\n/**\n * Module dependencies.\n * @private\n */\nvar $yHDV$var$createError = $parcel$require(\"yHDV\", \"http-errors\");\nvar $yHDV$var$getBody = $parcel$require(\"yHDV\", \"raw-body\");\nvar $yHDV$var$iconv = $parcel$require(\"yHDV\", \"iconv-lite\");\nvar $yHDV$var$onFinished = $parcel$require(\"yHDV\", \"on-finished\");\nvar $yHDV$var$zlib = $parcel$require(\"yHDV\", \"zlib\");\n/**\n * Module exports.\n */\n\n$yHDV$exports = $yHDV$var$read;\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} options\n * @private\n */\n\nfunction $yHDV$var$read(req, res, next, parse, debug, options) {\n  var length;\n  var opts = options;\n  var stream; // flag as parsed\n\n  req._body = true; // read options\n\n  var encoding = opts.encoding !== null ? opts.encoding : null;\n  var verify = opts.verify;\n\n  try {\n    // get the content stream\n    stream = $yHDV$var$contentstream(req, debug, opts.inflate);\n    length = stream.length;\n    stream.length = undefined;\n  } catch (err) {\n    return next(err);\n  } // set raw-body options\n\n\n  opts.length = length;\n  opts.encoding = verify ? null : encoding; // assert charset is supported\n\n  if (opts.encoding === null && encoding !== null && !$yHDV$var$iconv.encodingExists(encoding)) {\n    return next($yHDV$var$createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase(),\n      type: 'charset.unsupported'\n    }));\n  } // read body\n\n\n  debug('read body');\n  $yHDV$var$getBody(stream, opts, function (error, body) {\n    if (error) {\n      var _error;\n\n      if (error.type === 'encoding.unsupported') {\n        // echo back charset\n        _error = $yHDV$var$createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase(),\n          type: 'charset.unsupported'\n        });\n      } else {\n        // set status code on error\n        _error = $yHDV$var$createError(400, error);\n      } // read off entire request\n\n\n      stream.resume();\n      $yHDV$var$onFinished(req, function onfinished() {\n        next($yHDV$var$createError(400, _error));\n      });\n      return;\n    } // verify\n\n\n    if (verify) {\n      try {\n        debug('verify body');\n        verify(req, res, body, encoding);\n      } catch (err) {\n        next($yHDV$var$createError(403, err, {\n          body: body,\n          type: err.type || 'entity.verify.failed'\n        }));\n        return;\n      }\n    } // parse\n\n\n    var str = body;\n\n    try {\n      debug('parse body');\n      str = typeof body !== 'string' && encoding !== null ? $yHDV$var$iconv.decode(body, encoding) : body;\n      req.body = parse(str);\n    } catch (err) {\n      next($yHDV$var$createError(400, err, {\n        body: str,\n        type: err.type || 'entity.parse.failed'\n      }));\n      return;\n    }\n\n    next();\n  });\n}\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\n\nfunction $yHDV$var$contentstream(req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase();\n  var length = req.headers['content-length'];\n  var stream;\n  debug('content-encoding \"%s\"', encoding);\n\n  if (inflate === false && encoding !== 'identity') {\n    throw $yHDV$var$createError(415, 'content encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    });\n  }\n\n  switch (encoding) {\n    case 'deflate':\n      stream = $yHDV$var$zlib.createInflate();\n      debug('inflate body');\n      req.pipe(stream);\n      break;\n\n    case 'gzip':\n      stream = $yHDV$var$zlib.createGunzip();\n      debug('gunzip body');\n      req.pipe(stream);\n      break;\n\n    case 'identity':\n      stream = req;\n      stream.length = length;\n      break;\n\n    default:\n      throw $yHDV$var$createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding,\n        type: 'encoding.unsupported'\n      });\n  }\n\n  return stream;\n}"},"sourceMaps":null,"error":null,"hash":"80e586240e66c2b07cc15cb20f9c0efb","cacheData":{"env":{},"imports":{"$require$http-errors":["http-errors","*"],"$require$raw-body":["raw-body","*"],"$require$iconv-lite":["iconv-lite","*"],"$require$on-finished":["on-finished","*"],"$require$zlib":["zlib","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}