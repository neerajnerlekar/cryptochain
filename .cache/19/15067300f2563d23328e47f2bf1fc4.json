{"id":"BRYs","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\sha.js\\package.json","includedInParent":true,"mtime":1598465896804},{"name":"safe-buffer","loc":{"line":1,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\sha.js\\hash.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"}],"generated":{"js":"\nvar $BRYs$exports = {};\nvar $BRYs$var$Buffer = $parcel$require(\"BRYs\", \"safe-buffer\").Buffer; // prototype class for hash functions\n\nfunction $BRYs$var$Hash(blockSize, finalSize) {\n  this._block = $BRYs$var$Buffer.alloc(blockSize);\n  this._finalSize = finalSize;\n  this._blockSize = blockSize;\n  this._len = 0;\n}\n\n$BRYs$var$Hash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8';\n    data = $BRYs$var$Buffer.from(data, enc);\n  }\n\n  var block = this._block;\n  var blockSize = this._blockSize;\n  var length = data.length;\n  var accum = this._len;\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize;\n    var remainder = Math.min(length - offset, blockSize - assigned);\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i];\n    }\n\n    accum += remainder;\n    offset += remainder;\n\n    if (accum % blockSize === 0) {\n      this._update(block);\n    }\n  }\n\n  this._len += length;\n  return this;\n};\n\n$BRYs$var$Hash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize;\n  this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n\n  this._block.fill(0, rem + 1);\n\n  if (rem >= this._finalSize) {\n    this._update(this._block);\n\n    this._block.fill(0);\n  }\n\n  var bits = this._len * 8; // uint32\n\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64\n\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0;\n    var highBits = (bits - lowBits) / 0x100000000;\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8);\n\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4);\n  }\n\n  this._update(this._block);\n\n  var hash = this._hash();\n\n  return enc ? hash.toString(enc) : hash;\n};\n\n$BRYs$var$Hash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass');\n};\n\n$BRYs$exports = $BRYs$var$Hash;"},"sourceMaps":null,"error":null,"hash":"4f3bf67228be228515d0568fb758e791","cacheData":{"env":{},"imports":{"$require$safe-buffer":["safe-buffer","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}