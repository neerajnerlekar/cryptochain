{"id":"B6jI","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\safe-buffer\\package.json","includedInParent":true,"mtime":1598465925174},{"name":"buffer","loc":{"line":3,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-sign\\node_modules\\safe-buffer\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\buffer\\index.js"}],"generated":{"js":"\nvar $B6jI$export$Buffer,\n    $B6jI$exports = {};\n\n/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n\n/* eslint-disable node/no-deprecated-api */\nvar $B6jI$var$buffer = $parcel$require(\"B6jI\", \"buffer\");\nvar $B6jI$var$Buffer = $B6jI$var$buffer.Buffer; // alternative to using Object.keys for old browsers\n\nfunction $B6jI$var$copyProps(src, dst) {\n  for (var key in src) {\n    dst[key] = src[key];\n  }\n}\n\nif ($B6jI$var$Buffer.from && $B6jI$var$Buffer.alloc && $B6jI$var$Buffer.allocUnsafe && $B6jI$var$Buffer.allocUnsafeSlow) {\n  $B6jI$exports = $B6jI$var$buffer;\n} else {\n  // Copy properties from require('buffer')\n  $B6jI$var$copyProps($B6jI$var$buffer, $B6jI$exports);\n  $B6jI$export$Buffer = $B6jI$var$SafeBuffer\n  $B6jI$exports.Buffer = $B6jI$export$Buffer;\n}\n\nfunction $B6jI$var$SafeBuffer(arg, encodingOrOffset, length) {\n  return $B6jI$var$Buffer(arg, encodingOrOffset, length);\n}\n\n$B6jI$var$SafeBuffer.prototype = Object.create($B6jI$var$Buffer.prototype); // Copy static methods from Buffer\n\n$B6jI$var$copyProps($B6jI$var$Buffer, $B6jI$var$SafeBuffer);\n\n$B6jI$var$SafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number');\n  }\n\n  return $B6jI$var$Buffer(arg, encodingOrOffset, length);\n};\n\n$B6jI$var$SafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n\n  var buf = $B6jI$var$Buffer(size);\n\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding);\n    } else {\n      buf.fill(fill);\n    }\n  } else {\n    buf.fill(0);\n  }\n\n  return buf;\n};\n\n$B6jI$var$SafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n\n  return $B6jI$var$Buffer(size);\n};\n\n$B6jI$var$SafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n\n  return $B6jI$var$buffer.SlowBuffer(size);\n};"},"sourceMaps":null,"error":null,"hash":"9e2024227b1d3c0842c441c7ca018240","cacheData":{"env":{},"imports":{"$require$buffer":["buffer","*"]},"exports":{"Buffer":"$B6jI$export$Buffer"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}