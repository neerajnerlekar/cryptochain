{"id":"rW1N","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\package.json","includedInParent":true,"mtime":1598465886486},{"name":"evp_bytestokey","loc":{"line":5,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\fixProc.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\evp_bytestokey\\index.js"},{"name":"browserify-aes","loc":{"line":6,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\fixProc.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\browser.js"},{"name":"safe-buffer","loc":{"line":7,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parse-asn1\\fixProc.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"}],"generated":{"js":"\nvar $rW1N$exports = {};\n// adapted from https://github.com/apatil/pemstrip\nvar $rW1N$var$findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r+/=]+)[\\n\\r]+/m;\nvar $rW1N$var$startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;\nvar $rW1N$var$fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r+/=]+)-----END \\1-----$/m;\nvar $rW1N$var$evp = $parcel$require(\"rW1N\", \"evp_bytestokey\");\nvar $rW1N$var$ciphers = $parcel$require(\"rW1N\", \"browserify-aes\");\nvar $rW1N$var$Buffer = $parcel$require(\"rW1N\", \"safe-buffer\").Buffer;\n\n$rW1N$exports = function (okey, password) {\n  var key = okey.toString();\n  var match = key.match($rW1N$var$findProc);\n  var decrypted;\n\n  if (!match) {\n    var match2 = key.match($rW1N$var$fullRegex);\n    decrypted = $rW1N$var$Buffer.from(match2[2].replace(/[\\r\\n]/g, ''), 'base64');\n  } else {\n    var suite = 'aes' + match[1];\n    var iv = $rW1N$var$Buffer.from(match[2], 'hex');\n    var cipherText = $rW1N$var$Buffer.from(match[3].replace(/[\\r\\n]/g, ''), 'base64');\n    var cipherKey = $rW1N$var$evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;\n    var out = [];\n    var cipher = $rW1N$var$ciphers.createDecipheriv(suite, cipherKey, iv);\n    out.push(cipher.update(cipherText));\n    out.push(cipher.final());\n    decrypted = $rW1N$var$Buffer.concat(out);\n  }\n\n  var tag = key.match($rW1N$var$startRegex)[1];\n  return {\n    tag: tag,\n    data: decrypted\n  };\n};"},"sourceMaps":null,"error":null,"hash":"456ab715b2908b6b6c53b1301af280ee","cacheData":{"env":{},"imports":{"$require$evp_bytestokey":["evp_bytestokey","*"],"$require$browserify-aes":["browserify-aes","*"],"$require$safe-buffer":["safe-buffer","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}