{"id":"vjjj","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\package.json","includedInParent":true,"mtime":1598465880614},{"name":"debug","loc":{"line":16,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\lib\\view.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\debug\\src\\browser.js"},{"name":"path","loc":{"line":17,"column":19},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\lib\\view.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\path-browserify\\index.js"},{"name":"fs","loc":{"line":18,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\express\\lib\\view.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"}],"generated":{"js":"var $vjjj$exports = {};\n\n/**\n * Module dependencies.\n * @private\n */\nvar $vjjj$var$debug = $parcel$require(\"vjjj\", \"debug\")('express:view');\nvar $vjjj$var$path = $parcel$require(\"vjjj\", \"path\");\nvar $vjjj$var$fs = $parcel$require(\"vjjj\", \"fs\");\n/**\n * Module variables.\n * @private\n */\n\nvar $vjjj$var$dirname = $vjjj$var$path.dirname;\nvar $vjjj$var$basename = $vjjj$var$path.basename;\nvar $vjjj$var$extname = $vjjj$var$path.extname;\nvar $vjjj$var$join = $vjjj$var$path.join;\nvar $vjjj$var$resolve = $vjjj$var$path.resolve;\n/**\n * Module exports.\n * @public\n */\n\n$vjjj$exports = $vjjj$var$View;\n/**\n * Initialize a new `View` with the given `name`.\n *\n * Options:\n *\n *   - `defaultEngine` the default template engine name\n *   - `engines` template engine require() cache\n *   - `root` root path for view lookup\n *\n * @param {string} name\n * @param {object} options\n * @public\n */\n\nfunction $vjjj$var$View(name, options) {\n  var opts = options || {};\n  this.defaultEngine = opts.defaultEngine;\n  this.ext = $vjjj$var$extname(name);\n  this.name = name;\n  this.root = opts.root;\n\n  if (!this.ext && !this.defaultEngine) {\n    throw new Error('No default engine was specified and no extension was provided.');\n  }\n\n  var fileName = name;\n\n  if (!this.ext) {\n    // get extension from default engine name\n    this.ext = this.defaultEngine[0] !== '.' ? '.' + this.defaultEngine : this.defaultEngine;\n    fileName += this.ext;\n  }\n\n  if (!opts.engines[this.ext]) {\n    // load engine\n    var mod = this.ext.substr(1);\n    $vjjj$var$debug('require \"%s\"', mod); // default engine export\n\n    var fn = require(mod).__express;\n\n    if (typeof fn !== 'function') {\n      throw new Error('Module \"' + mod + '\" does not provide a view engine.');\n    }\n\n    opts.engines[this.ext] = fn;\n  } // store loaded engine\n\n\n  this.engine = opts.engines[this.ext]; // lookup path\n\n  this.path = this.lookup(fileName);\n}\n/**\n * Lookup view by the given `name`\n *\n * @param {string} name\n * @private\n */\n\n\n$vjjj$var$View.prototype.lookup = function lookup(name) {\n  var path;\n  var roots = [].concat(this.root);\n  $vjjj$var$debug('lookup \"%s\"', name);\n\n  for (var i = 0; i < roots.length && !path; i++) {\n    var root = roots[i]; // resolve the path\n\n    var loc = $vjjj$var$resolve(root, name);\n    var dir = $vjjj$var$dirname(loc);\n    var file = $vjjj$var$basename(loc); // resolve the file\n\n    path = this.resolve(dir, file);\n  }\n\n  return path;\n};\n/**\n * Render with the given options.\n *\n * @param {object} options\n * @param {function} callback\n * @private\n */\n\n\n$vjjj$var$View.prototype.render = function render(options, callback) {\n  $vjjj$var$debug('render \"%s\"', this.path);\n  this.engine(this.path, options, callback);\n};\n/**\n * Resolve the file within the given directory.\n *\n * @param {string} dir\n * @param {string} file\n * @private\n */\n\n\n$vjjj$var$View.prototype.resolve = function resolve(dir, file) {\n  var ext = this.ext; // <path>.<ext>\n\n  var path = $vjjj$var$join(dir, file);\n  var stat = $vjjj$var$tryStat(path);\n\n  if (stat && stat.isFile()) {\n    return path;\n  } // <path>/index.<ext>\n\n\n  path = $vjjj$var$join(dir, $vjjj$var$basename(file, ext), 'index' + ext);\n  stat = $vjjj$var$tryStat(path);\n\n  if (stat && stat.isFile()) {\n    return path;\n  }\n};\n/**\n * Return a stat, maybe.\n *\n * @param {string} path\n * @return {fs.Stats}\n * @private\n */\n\n\nfunction $vjjj$var$tryStat(path) {\n  $vjjj$var$debug('stat \"%s\"', path);\n\n  try {\n    return $vjjj$var$fs.statSync(path);\n  } catch (e) {\n    return undefined;\n  }\n}"},"sourceMaps":null,"error":null,"hash":"fd056ade7d4e1c7cc5532dc46f422198","cacheData":{"env":{},"imports":{"$require$debug":["debug","*"],"$require$path":["path","*"],"$require$fs":["fs","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}