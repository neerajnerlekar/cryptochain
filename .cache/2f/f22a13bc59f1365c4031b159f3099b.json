{"id":"jpOk","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\package.json","includedInParent":true,"mtime":1598465886486},{"name":"create-hash/md5","loc":{"line":1,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\lib\\sync-browser.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\create-hash\\md5.js"},{"name":"ripemd160","loc":{"line":2,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\lib\\sync-browser.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\ripemd160\\index.js"},{"name":"sha.js","loc":{"line":3,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\lib\\sync-browser.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\sha.js\\index.js"},{"name":"safe-buffer","loc":{"line":4,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\lib\\sync-browser.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"},{"name":"./precondition","loc":{"line":6,"column":30},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\lib\\sync-browser.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\lib\\precondition.js"},{"name":"./default-encoding","loc":{"line":7,"column":30},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\lib\\sync-browser.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\lib\\default-encoding.js"},{"name":"./to-buffer","loc":{"line":8,"column":23},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\lib\\sync-browser.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\pbkdf2\\lib\\to-buffer.js"}],"generated":{"js":"\nvar $jpOk$exports = {};\nvar $jpOk$var$md5 = $parcel$require(\"jpOk\", \"create-hash/md5\");\nvar $jpOk$var$RIPEMD160 = $parcel$require(\"jpOk\", \"ripemd160\");\nvar $jpOk$var$sha = $parcel$require(\"jpOk\", \"sha.js\");\nvar $jpOk$var$Buffer = $parcel$require(\"jpOk\", \"safe-buffer\").Buffer;\nvar $jpOk$var$checkParameters = $parcel$require(\"jpOk\", \"./precondition\");\nvar $jpOk$var$defaultEncoding = $parcel$require(\"jpOk\", \"./default-encoding\");\nvar $jpOk$var$toBuffer = $parcel$require(\"jpOk\", \"./to-buffer\");\nvar $jpOk$var$ZEROS = $jpOk$var$Buffer.alloc(128);\nvar $jpOk$var$sizes = {\n  md5: 16,\n  sha1: 20,\n  sha224: 28,\n  sha256: 32,\n  sha384: 48,\n  sha512: 64,\n  rmd160: 20,\n  ripemd160: 20\n};\n\nfunction $jpOk$var$Hmac(alg, key, saltLen) {\n  var hash = $jpOk$var$getDigest(alg);\n  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;\n\n  if (key.length > blocksize) {\n    key = hash(key);\n  } else if (key.length < blocksize) {\n    key = $jpOk$var$Buffer.concat([key, $jpOk$var$ZEROS], blocksize);\n  }\n\n  var ipad = $jpOk$var$Buffer.allocUnsafe(blocksize + $jpOk$var$sizes[alg]);\n  var opad = $jpOk$var$Buffer.allocUnsafe(blocksize + $jpOk$var$sizes[alg]);\n\n  for (var i = 0; i < blocksize; i++) {\n    ipad[i] = key[i] ^ 0x36;\n    opad[i] = key[i] ^ 0x5C;\n  }\n\n  var ipad1 = $jpOk$var$Buffer.allocUnsafe(blocksize + saltLen + 4);\n  ipad.copy(ipad1, 0, 0, blocksize);\n  this.ipad1 = ipad1;\n  this.ipad2 = ipad;\n  this.opad = opad;\n  this.alg = alg;\n  this.blocksize = blocksize;\n  this.hash = hash;\n  this.size = $jpOk$var$sizes[alg];\n}\n\n$jpOk$var$Hmac.prototype.run = function (data, ipad) {\n  data.copy(ipad, this.blocksize);\n  var h = this.hash(ipad);\n  h.copy(this.opad, this.blocksize);\n  return this.hash(this.opad);\n};\n\nfunction $jpOk$var$getDigest(alg) {\n  function shaFunc(data) {\n    return $jpOk$var$sha(alg).update(data).digest();\n  }\n\n  function rmd160Func(data) {\n    return new $jpOk$var$RIPEMD160().update(data).digest();\n  }\n\n  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;\n  if (alg === 'md5') return $jpOk$var$md5;\n  return shaFunc;\n}\n\nfunction $jpOk$var$pbkdf2(password, salt, iterations, keylen, digest) {\n  $jpOk$var$checkParameters(iterations, keylen);\n  password = $jpOk$var$toBuffer(password, $jpOk$var$defaultEncoding, 'Password');\n  salt = $jpOk$var$toBuffer(salt, $jpOk$var$defaultEncoding, 'Salt');\n  digest = digest || 'sha1';\n  var hmac = new $jpOk$var$Hmac(digest, password, salt.length);\n  var DK = $jpOk$var$Buffer.allocUnsafe(keylen);\n  var block1 = $jpOk$var$Buffer.allocUnsafe(salt.length + 4);\n  salt.copy(block1, 0, 0, salt.length);\n  var destPos = 0;\n  var hLen = $jpOk$var$sizes[digest];\n  var l = Math.ceil(keylen / hLen);\n\n  for (var i = 1; i <= l; i++) {\n    block1.writeUInt32BE(i, salt.length);\n    var T = hmac.run(block1, hmac.ipad1);\n    var U = T;\n\n    for (var j = 1; j < iterations; j++) {\n      U = hmac.run(U, hmac.ipad2);\n\n      for (var k = 0; k < hLen; k++) T[k] ^= U[k];\n    }\n\n    T.copy(DK, destPos);\n    destPos += hLen;\n  }\n\n  return DK;\n}\n\n$jpOk$exports = $jpOk$var$pbkdf2;"},"sourceMaps":null,"error":null,"hash":"c4e61cb81b98d00d71e95e00f6a4fcf2","cacheData":{"env":{},"imports":{"$require$create-hash/md5":["create-hash/md5","*"],"$require$ripemd160":["ripemd160","*"],"$require$sha.js":["sha.js","*"],"$require$safe-buffer":["safe-buffer","*"],"$require$./precondition":["./precondition","*"],"$require$./default-encoding":["./default-encoding","*"],"$require$./to-buffer":["./to-buffer","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}