{"id":"YuLE","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\mime\\package.json","includedInParent":true,"mtime":1598465914259},{"name":"path","loc":{"line":1,"column":19},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\mime\\mime.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\path-browserify\\index.js"},{"name":"fs","loc":{"line":2,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\mime\\mime.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"},{"name":"./types.json","loc":{"line":87,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\mime\\mime.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\mime\\types.json"}],"generated":{"js":"var $YuLE$exports = {};\nvar $YuLE$var$path = $parcel$require(\"YuLE\", \"path\");\nvar $YuLE$var$fs = $parcel$require(\"YuLE\", \"fs\");\n\nfunction $YuLE$var$Mime() {\n  // Map of extension -> mime type\n  this.types = Object.create(null); // Map of mime type -> extension\n\n  this.extensions = Object.create(null);\n}\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * @param map (Object) type definitions\n */\n\n\n$YuLE$var$Mime.prototype.define = function (map) {\n  for (var type in map) {\n    var exts = map[type];\n\n    for (var i = 0; i < exts.length; i++) {\n      if (undefined && this.types[exts[i]]) {\n        console.warn((this._loading || \"define()\").replace(/.*\\//, ''), 'changes \"' + exts[i] + '\" extension type from ' + this.types[exts[i]] + ' to ' + type);\n      }\n\n      this.types[exts[i]] = type;\n    } // Default extension is the first one we encounter\n\n\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n};\n/**\n * Load an Apache2-style \".types\" file\n *\n * This may be called multiple times (it's expected).  Where files declare\n * overlapping types/extensions, the last file wins.\n *\n * @param file (String) path of file to load.\n */\n\n\n$YuLE$var$Mime.prototype.load = function (file) {\n  this._loading = file; // Read file and split into lines\n\n  var map = {},\n      content = $YuLE$var$fs.readFileSync(file, 'ascii'),\n      lines = content.split(/[\\r\\n]+/);\n  lines.forEach(function (line) {\n    // Clean up whitespace/comments, and split into fields\n    var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n    map[fields.shift()] = fields;\n  });\n  this.define(map);\n  this._loading = null;\n};\n/**\n * Lookup a mime type based on extension\n */\n\n\n$YuLE$var$Mime.prototype.lookup = function (path, fallback) {\n  var ext = path.replace(/^.*[\\.\\/\\\\]/, '').toLowerCase();\n  return this.types[ext] || fallback || this.default_type;\n};\n/**\n * Return file extension associated with a mime type\n */\n\n\n$YuLE$var$Mime.prototype.extension = function (mimeType) {\n  var type = mimeType.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)[1].toLowerCase();\n  return this.extensions[type];\n}; // Default instance\n\n\nvar $YuLE$var$mime = new $YuLE$var$Mime(); // Define built-in types\n\n$YuLE$var$mime.define($parcel$require(\"YuLE\", \"./types.json\")); // Default type\n\n$YuLE$var$mime.default_type = $YuLE$var$mime.lookup('bin'); //\n// Additional API specific to the default instance\n//\n\n$YuLE$var$mime.Mime = $YuLE$var$Mime;\n/**\n * Lookup a charset based on mime type.\n */\n\n$YuLE$var$mime.charsets = {\n  lookup: function (mimeType, fallback) {\n    // Assume text types are utf8\n    return /^text\\/|^application\\/(javascript|json)/.test(mimeType) ? 'UTF-8' : fallback;\n  }\n};\n$YuLE$exports = $YuLE$var$mime;"},"sourceMaps":null,"error":null,"hash":"7e9becc9536b6ddb031ac019ac3908eb","cacheData":{"env":{},"imports":{"$require$path":["path","*"],"$require$fs":["fs","*"],"$require$./types.json":["./types.json","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}