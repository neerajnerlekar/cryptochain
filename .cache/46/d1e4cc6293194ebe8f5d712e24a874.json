{"id":"CycQ","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\package.json","includedInParent":true,"mtime":1598465911093},{"name":"minimalistic-assert","loc":{"line":3,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\utils.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\minimalistic-assert\\index.js"},{"name":"inherits","loc":{"line":4,"column":23},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\utils.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\inherits\\inherits_browser.js"}],"generated":{"js":"var $CycQ$exports = {};\nvar $CycQ$var$assert = $parcel$require(\"CycQ\", \"minimalistic-assert\");\nvar $CycQ$var$inherits = $parcel$require(\"CycQ\", \"inherits\");\nvar $CycQ$export$inherits = $CycQ$var$inherits;\n$CycQ$exports.inherits = $CycQ$export$inherits;\n\nfunction $CycQ$var$isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction $CycQ$var$toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if ($CycQ$var$isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n\n      for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n  }\n\n  return res;\n}\n\nvar $CycQ$export$toArray = $CycQ$var$toArray;\n$CycQ$exports.toArray = $CycQ$export$toArray;\n\nfunction $CycQ$var$toHex(msg) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) res += $CycQ$var$zero2(msg[i].toString(16));\n\n  return res;\n}\n\nvar $CycQ$export$toHex = $CycQ$var$toHex;\n$CycQ$exports.toHex = $CycQ$export$toHex;\n\nfunction $CycQ$var$htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\n\nvar $CycQ$export$htonl = $CycQ$var$htonl;\n$CycQ$exports.htonl = $CycQ$export$htonl;\n\nfunction $CycQ$var$toHex32(msg, endian) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = $CycQ$var$htonl(w);\n    res += $CycQ$var$zero8(w.toString(16));\n  }\n\n  return res;\n}\n\nvar $CycQ$export$toHex32 = $CycQ$var$toHex32;\n$CycQ$exports.toHex32 = $CycQ$export$toHex32;\n\nfunction $CycQ$var$zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\n\nvar $CycQ$export$zero2 = $CycQ$var$zero2;\n$CycQ$exports.zero2 = $CycQ$export$zero2;\n\nfunction $CycQ$var$zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\n\nvar $CycQ$export$zero8 = $CycQ$var$zero8;\n$CycQ$exports.zero8 = $CycQ$export$zero8;\n\nfunction $CycQ$var$join32(msg, start, end, endian) {\n  var len = end - start;\n  $CycQ$var$assert(len % 4 === 0);\n  var res = new Array(len / 4);\n\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n\n  return res;\n}\n\nvar $CycQ$export$join32 = $CycQ$var$join32;\n$CycQ$exports.join32 = $CycQ$export$join32;\n\nfunction $CycQ$var$split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n\n  return res;\n}\n\nvar $CycQ$export$split32 = $CycQ$var$split32;\n$CycQ$exports.split32 = $CycQ$export$split32;\n\nfunction $CycQ$var$rotr32(w, b) {\n  return w >>> b | w << 32 - b;\n}\n\nvar $CycQ$export$rotr32 = $CycQ$var$rotr32;\n$CycQ$exports.rotr32 = $CycQ$export$rotr32;\n\nfunction $CycQ$var$rotl32(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nvar $CycQ$export$rotl32 = $CycQ$var$rotl32;\n$CycQ$exports.rotl32 = $CycQ$export$rotl32;\n\nfunction $CycQ$var$sum32(a, b) {\n  return a + b >>> 0;\n}\n\nvar $CycQ$export$sum32 = $CycQ$var$sum32;\n$CycQ$exports.sum32 = $CycQ$export$sum32;\n\nfunction $CycQ$var$sum32_3(a, b, c) {\n  return a + b + c >>> 0;\n}\n\nvar $CycQ$export$sum32_3 = $CycQ$var$sum32_3;\n$CycQ$exports.sum32_3 = $CycQ$export$sum32_3;\n\nfunction $CycQ$var$sum32_4(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\n\nvar $CycQ$export$sum32_4 = $CycQ$var$sum32_4;\n$CycQ$exports.sum32_4 = $CycQ$export$sum32_4;\n\nfunction $CycQ$var$sum32_5(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\n\nvar $CycQ$export$sum32_5 = $CycQ$var$sum32_5;\n$CycQ$exports.sum32_5 = $CycQ$export$sum32_5;\n\nfunction $CycQ$var$sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\n\nvar $CycQ$export$sum64 = $CycQ$var$sum64;\n$CycQ$exports.sum64 = $CycQ$export$sum64;\n\nfunction $CycQ$var$sum64_hi(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\n\nvar $CycQ$export$sum64_hi = $CycQ$var$sum64_hi;\n$CycQ$exports.sum64_hi = $CycQ$export$sum64_hi;\n\nfunction $CycQ$var$sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\n\nvar $CycQ$export$sum64_lo = $CycQ$var$sum64_lo;\n$CycQ$exports.sum64_lo = $CycQ$export$sum64_lo;\n\nfunction $CycQ$var$sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\n\nvar $CycQ$export$sum64_4_hi = $CycQ$var$sum64_4_hi;\n$CycQ$exports.sum64_4_hi = $CycQ$export$sum64_4_hi;\n\nfunction $CycQ$var$sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\n\nvar $CycQ$export$sum64_4_lo = $CycQ$var$sum64_4_lo;\n$CycQ$exports.sum64_4_lo = $CycQ$export$sum64_4_lo;\n\nfunction $CycQ$var$sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\n\nvar $CycQ$export$sum64_5_hi = $CycQ$var$sum64_5_hi;\n$CycQ$exports.sum64_5_hi = $CycQ$export$sum64_5_hi;\n\nfunction $CycQ$var$sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\n\nvar $CycQ$export$sum64_5_lo = $CycQ$var$sum64_5_lo;\n$CycQ$exports.sum64_5_lo = $CycQ$export$sum64_5_lo;\n\nfunction $CycQ$var$rotr64_hi(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\n\nvar $CycQ$export$rotr64_hi = $CycQ$var$rotr64_hi;\n$CycQ$exports.rotr64_hi = $CycQ$export$rotr64_hi;\n\nfunction $CycQ$var$rotr64_lo(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nvar $CycQ$export$rotr64_lo = $CycQ$var$rotr64_lo;\n$CycQ$exports.rotr64_lo = $CycQ$export$rotr64_lo;\n\nfunction $CycQ$var$shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\n\nvar $CycQ$export$shr64_hi = $CycQ$var$shr64_hi;\n$CycQ$exports.shr64_hi = $CycQ$export$shr64_hi;\n\nfunction $CycQ$var$shr64_lo(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\nvar $CycQ$export$shr64_lo = $CycQ$var$shr64_lo;\n$CycQ$exports.shr64_lo = $CycQ$export$shr64_lo;"},"sourceMaps":null,"error":null,"hash":"2f09f36162e6d9910027cf2d4da4a83e","cacheData":{"env":{},"imports":{"$require$minimalistic-assert":["minimalistic-assert","*"],"$require$inherits":["inherits","*"]},"exports":{"inherits":"$CycQ$export$inherits","toArray":"$CycQ$export$toArray","toHex":"$CycQ$export$toHex","htonl":"$CycQ$export$htonl","toHex32":"$CycQ$export$toHex32","zero2":"$CycQ$export$zero2","zero8":"$CycQ$export$zero8","join32":"$CycQ$export$join32","split32":"$CycQ$export$split32","rotr32":"$CycQ$export$rotr32","rotl32":"$CycQ$export$rotl32","sum32":"$CycQ$export$sum32","sum32_3":"$CycQ$export$sum32_3","sum32_4":"$CycQ$export$sum32_4","sum32_5":"$CycQ$export$sum32_5","sum64":"$CycQ$export$sum64","sum64_hi":"$CycQ$export$sum64_hi","sum64_lo":"$CycQ$export$sum64_lo","sum64_4_hi":"$CycQ$export$sum64_4_hi","sum64_4_lo":"$CycQ$export$sum64_4_lo","sum64_5_hi":"$CycQ$export$sum64_5_hi","sum64_5_lo":"$CycQ$export$sum64_5_lo","rotr64_hi":"$CycQ$export$rotr64_hi","rotr64_lo":"$CycQ$export$rotr64_lo","shr64_hi":"$CycQ$export$shr64_hi","shr64_lo":"$CycQ$export$shr64_lo"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}