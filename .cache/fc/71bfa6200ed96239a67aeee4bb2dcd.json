{"id":"aRr3","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\mime-types\\package.json","includedInParent":true,"mtime":1598465914282},{"name":"mime-db","loc":{"line":15,"column":17},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\mime-types\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\mime-db\\index.js"},{"name":"path","loc":{"line":16,"column":22},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\mime-types\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\path-browserify\\index.js"}],"generated":{"js":"var $aRr3$exports = {};\n\n/**\n * Module dependencies.\n * @private\n */\nvar $aRr3$var$db = $parcel$require(\"aRr3\", \"mime-db\");\nvar $aRr3$var$extname = $parcel$require(\"aRr3\", \"path\").extname;\n/**\n * Module variables.\n * @private\n */\n\nvar $aRr3$var$EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\nvar $aRr3$var$TEXT_TYPE_REGEXP = /^text\\//i;\n/**\n * Module exports.\n * @public\n */\n\nvar $aRr3$export$charset = $aRr3$var$charset;\n$aRr3$exports.charset = $aRr3$export$charset;\nvar $aRr3$export$charsets = {\n  lookup: $aRr3$var$charset\n};\n$aRr3$exports.charsets = $aRr3$export$charsets;\nvar $aRr3$export$contentType = $aRr3$var$contentType;\n$aRr3$exports.contentType = $aRr3$export$contentType;\nvar $aRr3$export$extension = $aRr3$var$extension;\n$aRr3$exports.extension = $aRr3$export$extension;\nvar $aRr3$export$extensions = Object.create(null);\n$aRr3$exports.extensions = $aRr3$export$extensions;\nvar $aRr3$export$lookup = $aRr3$var$lookup;\n$aRr3$exports.lookup = $aRr3$export$lookup;\nvar $aRr3$export$types = Object.create(null);\n$aRr3$exports.types = $aRr3$export$types; // Populate the extensions/types maps\n\n$aRr3$var$populateMaps($aRr3$exports.extensions, $aRr3$exports.types);\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction $aRr3$var$charset(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  } // TODO: use media-typer\n\n\n  var match = $aRr3$var$EXTRACT_TYPE_REGEXP.exec(type);\n  var mime = match && $aRr3$var$db[match[1].toLowerCase()];\n\n  if (mime && mime.charset) {\n    return mime.charset;\n  } // default text/* to utf-8\n\n\n  if (match && $aRr3$var$TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8';\n  }\n\n  return false;\n}\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\n\nfunction $aRr3$var$contentType(str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false;\n  }\n\n  var mime = str.indexOf('/') === -1 ? $aRr3$exports.lookup(str) : str;\n\n  if (!mime) {\n    return false;\n  } // TODO: use content-type or other module\n\n\n  if (mime.indexOf('charset') === -1) {\n    var charset = $aRr3$exports.charset(mime);\n    if (charset) mime += '; charset=' + charset.toLowerCase();\n  }\n\n  return mime;\n}\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\n\nfunction $aRr3$var$extension(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  } // TODO: use media-typer\n\n\n  var match = $aRr3$var$EXTRACT_TYPE_REGEXP.exec(type); // get extensions\n\n  var exts = match && $aRr3$exports.extensions[match[1].toLowerCase()];\n\n  if (!exts || !exts.length) {\n    return false;\n  }\n\n  return exts[0];\n}\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\n\nfunction $aRr3$var$lookup(path) {\n  if (!path || typeof path !== 'string') {\n    return false;\n  } // get the extension (\"ext\" or \".ext\" or full path)\n\n\n  var extension = $aRr3$var$extname('x.' + path).toLowerCase().substr(1);\n\n  if (!extension) {\n    return false;\n  }\n\n  return $aRr3$exports.types[extension] || false;\n}\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\n\nfunction $aRr3$var$populateMaps(extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana'];\n  Object.keys($aRr3$var$db).forEach(function forEachMimeType(type) {\n    var mime = $aRr3$var$db[type];\n    var exts = mime.extensions;\n\n    if (!exts || !exts.length) {\n      return;\n    } // mime -> extensions\n\n\n    extensions[type] = exts; // extension -> mime\n\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i];\n\n      if (types[extension]) {\n        var from = preference.indexOf($aRr3$var$db[types[extension]].source);\n        var to = preference.indexOf(mime.source);\n\n        if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {\n          // skip the remapping\n          continue;\n        }\n      } // set the extension -> mime\n\n\n      types[extension] = type;\n    }\n  });\n}"},"sourceMaps":null,"error":null,"hash":"a96df8e56ea4b665884ec54ca9f8e0a0","cacheData":{"env":{},"imports":{"$require$mime-db":["mime-db","*"],"$require$path":["path","*"]},"exports":{"charset":"$aRr3$export$charset","charsets":"$aRr3$export$charsets","contentType":"$aRr3$export$contentType","extension":"$aRr3$export$extension","extensions":"$aRr3$export$extensions","lookup":"$aRr3$export$lookup","types":"$aRr3$export$types"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}