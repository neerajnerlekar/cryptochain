{"id":"LF14","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\stream-http\\package.json","includedInParent":true,"mtime":1598465880655}],"generated":{"js":"var $LF14$exports = {};\nvar $LF14$export$fetch = $LF14$var$isFunction($parcel$global.fetch) && $LF14$var$isFunction($parcel$global.ReadableStream);\n$LF14$exports.fetch = $LF14$export$fetch;\nvar $LF14$export$writableStream = $LF14$var$isFunction($parcel$global.WritableStream);\n$LF14$exports.writableStream = $LF14$export$writableStream;\nvar $LF14$export$abortController = $LF14$var$isFunction($parcel$global.AbortController);\n$LF14$exports.abortController = $LF14$export$abortController;\nvar $LF14$export$blobConstructor = false;\n$LF14$exports.blobConstructor = $LF14$export$blobConstructor;\n\ntry {\n  new Blob([new ArrayBuffer(1)]);\n  $LF14$export$blobConstructor = true\n  $LF14$exports.blobConstructor = $LF14$export$blobConstructor;\n} catch (e) {} // The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\n\n\nvar $LF14$var$xhr;\n\nfunction $LF14$var$getXHR() {\n  // Cache the xhr value\n  if ($LF14$var$xhr !== undefined) return $LF14$var$xhr;\n\n  if ($parcel$global.XMLHttpRequest) {\n    $LF14$var$xhr = new $parcel$global.XMLHttpRequest(); // If XDomainRequest is available (ie only, where xhr might not work\n    // cross domain), use the page location. Otherwise use example.com\n    // Note: this doesn't actually make an http request.\n\n    try {\n      $LF14$var$xhr.open('GET', $parcel$global.XDomainRequest ? '/' : 'https://example.com');\n    } catch (e) {\n      $LF14$var$xhr = null;\n    }\n  } else {\n    // Service workers don't have XHR\n    $LF14$var$xhr = null;\n  }\n\n  return $LF14$var$xhr;\n}\n\nfunction $LF14$var$checkTypeSupport(type) {\n  var xhr = $LF14$var$getXHR();\n  if (!xhr) return false;\n\n  try {\n    xhr.responseType = type;\n    return xhr.responseType === type;\n  } catch (e) {}\n\n  return false;\n} // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n// Safari 7.1 appears to have fixed this bug.\n\n\nvar $LF14$var$haveArrayBuffer = typeof $parcel$global.ArrayBuffer !== 'undefined';\nvar $LF14$var$haveSlice = $LF14$var$haveArrayBuffer && $LF14$var$isFunction($parcel$global.ArrayBuffer.prototype.slice); // If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\n\nvar $LF14$export$arraybuffer = $LF14$exports.fetch || $LF14$var$haveArrayBuffer && $LF14$var$checkTypeSupport('arraybuffer');\n$LF14$exports.arraybuffer = $LF14$export$arraybuffer; // These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\n\nvar $LF14$export$msstream = !$LF14$exports.fetch && $LF14$var$haveSlice && $LF14$var$checkTypeSupport('ms-stream');\n$LF14$exports.msstream = $LF14$export$msstream;\nvar $LF14$export$mozchunkedarraybuffer = !$LF14$exports.fetch && $LF14$var$haveArrayBuffer && $LF14$var$checkTypeSupport('moz-chunked-arraybuffer');\n$LF14$exports.mozchunkedarraybuffer = $LF14$export$mozchunkedarraybuffer; // If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\n\nvar $LF14$export$overrideMimeType = $LF14$exports.fetch || ($LF14$var$getXHR() ? $LF14$var$isFunction($LF14$var$getXHR().overrideMimeType) : false);\n$LF14$exports.overrideMimeType = $LF14$export$overrideMimeType;\nvar $LF14$export$vbArray = $LF14$var$isFunction($parcel$global.VBArray);\n$LF14$exports.vbArray = $LF14$export$vbArray;\n\nfunction $LF14$var$isFunction(value) {\n  return typeof value === 'function';\n}\n\n$LF14$var$xhr = null; // Help gc"},"sourceMaps":null,"error":null,"hash":"844fa572f6ba74fa6e57d91004026220","cacheData":{"env":{},"imports":{},"exports":{"fetch":"$LF14$export$fetch","writableStream":"$LF14$export$writableStream","abortController":"$LF14$export$abortController","blobConstructor":"$LF14$export$blobConstructor","arraybuffer":"$LF14$export$arraybuffer","msstream":"$LF14$export$msstream","mozchunkedarraybuffer":"$LF14$export$mozchunkedarraybuffer","overrideMimeType":"$LF14$export$overrideMimeType","vbArray":"$LF14$export$vbArray"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}