{"id":"bsRH","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\des.js\\package.json","includedInParent":true,"mtime":1598465911105},{"name":"minimalistic-assert","loc":{"line":3,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\des.js\\lib\\des\\cbc.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\minimalistic-assert\\index.js"},{"name":"inherits","loc":{"line":4,"column":23},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\des.js\\lib\\des\\cbc.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\inherits\\inherits_browser.js"}],"generated":{"js":"var $bsRH$exports = {};\nvar $bsRH$var$assert = $parcel$require(\"bsRH\", \"minimalistic-assert\");\nvar $bsRH$var$inherits = $parcel$require(\"bsRH\", \"inherits\");\nvar $bsRH$var$proto = {};\n\nfunction $bsRH$var$CBCState(iv) {\n  $bsRH$var$assert.equal(iv.length, 8, 'Invalid IV length');\n  this.iv = new Array(8);\n\n  for (var i = 0; i < this.iv.length; i++) this.iv[i] = iv[i];\n}\n\nfunction $bsRH$var$instantiate(Base) {\n  function CBC(options) {\n    Base.call(this, options);\n\n    this._cbcInit();\n  }\n\n  $bsRH$var$inherits(CBC, Base);\n  var keys = Object.keys($bsRH$var$proto);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    CBC.prototype[key] = $bsRH$var$proto[key];\n  }\n\n  CBC.create = function create(options) {\n    return new CBC(options);\n  };\n\n  return CBC;\n}\n\nvar $bsRH$export$instantiate = $bsRH$var$instantiate;\n$bsRH$exports.instantiate = $bsRH$export$instantiate;\n\n$bsRH$var$proto._cbcInit = function _cbcInit() {\n  var state = new $bsRH$var$CBCState(this.options.iv);\n  this._cbcState = state;\n};\n\n$bsRH$var$proto._update = function _update(inp, inOff, out, outOff) {\n  var state = this._cbcState;\n  var superProto = this.constructor.super_.prototype;\n  var iv = state.iv;\n\n  if (this.type === 'encrypt') {\n    for (var i = 0; i < this.blockSize; i++) iv[i] ^= inp[inOff + i];\n\n    superProto._update.call(this, iv, 0, out, outOff);\n\n    for (var i = 0; i < this.blockSize; i++) iv[i] = out[outOff + i];\n  } else {\n    superProto._update.call(this, inp, inOff, out, outOff);\n\n    for (var i = 0; i < this.blockSize; i++) out[outOff + i] ^= iv[i];\n\n    for (var i = 0; i < this.blockSize; i++) iv[i] = inp[inOff + i];\n  }\n};"},"sourceMaps":null,"error":null,"hash":"c298e56fa051fdb24bede32d4e280a23","cacheData":{"env":{},"imports":{"$require$minimalistic-assert":["minimalistic-assert","*"],"$require$inherits":["inherits","*"]},"exports":{"instantiate":"$bsRH$export$instantiate"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}