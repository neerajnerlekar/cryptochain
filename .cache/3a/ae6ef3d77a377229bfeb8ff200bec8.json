{"id":"exPG","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\package.json","includedInParent":true,"mtime":1598465911093},{"name":"../utils","loc":{"line":3,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\sha\\256.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\utils.js"},{"name":"../common","loc":{"line":4,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\sha\\256.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\common.js"},{"name":"./common","loc":{"line":5,"column":24},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\sha\\256.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\sha\\common.js"},{"name":"minimalistic-assert","loc":{"line":6,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\hash.js\\lib\\hash\\sha\\256.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\minimalistic-assert\\index.js"}],"generated":{"js":"var $exPG$exports = {};\nvar $exPG$var$utils = $parcel$require(\"exPG\", \"../utils\");\nvar $exPG$var$common = $parcel$require(\"exPG\", \"../common\");\nvar $exPG$var$shaCommon = $parcel$require(\"exPG\", \"./common\");\nvar $exPG$var$assert = $parcel$require(\"exPG\", \"minimalistic-assert\");\nvar $exPG$var$sum32 = $exPG$var$utils.sum32;\nvar $exPG$var$sum32_4 = $exPG$var$utils.sum32_4;\nvar $exPG$var$sum32_5 = $exPG$var$utils.sum32_5;\nvar $exPG$var$ch32 = $exPG$var$shaCommon.ch32;\nvar $exPG$var$maj32 = $exPG$var$shaCommon.maj32;\nvar $exPG$var$s0_256 = $exPG$var$shaCommon.s0_256;\nvar $exPG$var$s1_256 = $exPG$var$shaCommon.s1_256;\nvar $exPG$var$g0_256 = $exPG$var$shaCommon.g0_256;\nvar $exPG$var$g1_256 = $exPG$var$shaCommon.g1_256;\nvar $exPG$var$BlockHash = $exPG$var$common.BlockHash;\nvar $exPG$var$sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\nfunction $exPG$var$SHA256() {\n  if (!(this instanceof $exPG$var$SHA256)) return new $exPG$var$SHA256();\n  $exPG$var$BlockHash.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = $exPG$var$sha256_K;\n  this.W = new Array(64);\n}\n\n$exPG$var$utils.inherits($exPG$var$SHA256, $exPG$var$BlockHash);\n$exPG$exports = $exPG$var$SHA256;\n$exPG$var$SHA256.blockSize = 512;\n$exPG$var$SHA256.outSize = 256;\n$exPG$var$SHA256.hmacStrength = 192;\n$exPG$var$SHA256.padLength = 64;\n\n$exPG$var$SHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = $exPG$var$sum32_4($exPG$var$g1_256(W[i - 2]), W[i - 7], $exPG$var$g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  $exPG$var$assert(this.k.length === W.length);\n\n  for (i = 0; i < W.length; i++) {\n    var T1 = $exPG$var$sum32_5(h, $exPG$var$s1_256(e), $exPG$var$ch32(e, f, g), this.k[i], W[i]);\n    var T2 = $exPG$var$sum32($exPG$var$s0_256(a), $exPG$var$maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = $exPG$var$sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = $exPG$var$sum32(T1, T2);\n  }\n\n  this.h[0] = $exPG$var$sum32(this.h[0], a);\n  this.h[1] = $exPG$var$sum32(this.h[1], b);\n  this.h[2] = $exPG$var$sum32(this.h[2], c);\n  this.h[3] = $exPG$var$sum32(this.h[3], d);\n  this.h[4] = $exPG$var$sum32(this.h[4], e);\n  this.h[5] = $exPG$var$sum32(this.h[5], f);\n  this.h[6] = $exPG$var$sum32(this.h[6], g);\n  this.h[7] = $exPG$var$sum32(this.h[7], h);\n};\n\n$exPG$var$SHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return $exPG$var$utils.toHex32(this.h, 'big');else return $exPG$var$utils.split32(this.h, 'big');\n};"},"sourceMaps":null,"error":null,"hash":"ce49116197469366ff3de95a66eebc5b","cacheData":{"env":{},"imports":{"$require$../utils":["../utils","*"],"$require$../common":["../common","*"],"$require$./common":["./common","*"],"$require$minimalistic-assert":["minimalistic-assert","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}