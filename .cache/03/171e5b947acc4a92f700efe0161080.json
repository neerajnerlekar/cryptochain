{"id":"BYFN","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\debug\\package.json","includedInParent":true,"mtime":1598465910446},{"name":"./debug","loc":{"line":7,"column":35},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\debug\\src\\browser.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\debug\\src\\debug.js"},{"name":"process","parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\debug\\src\\browser.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\process\\browser.js"}],"generated":{"js":"var $BYFN$exports = {};\nvar $BYFN$var$process = $parcel$require(\"BYFN\", \"process\");\n\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n$BYFN$exports = $BYFN$exports = $parcel$require(\"BYFN\", \"./debug\");\nvar $BYFN$export$log = $BYFN$var$log;\n$BYFN$exports.log = $BYFN$export$log;\nvar $BYFN$export$formatArgs = $BYFN$var$formatArgs;\n$BYFN$exports.formatArgs = $BYFN$export$formatArgs;\nvar $BYFN$export$save = $BYFN$var$save;\n$BYFN$exports.save = $BYFN$export$save;\nvar $BYFN$export$load = $BYFN$var$load;\n$BYFN$exports.load = $BYFN$export$load;\nvar $BYFN$export$useColors = $BYFN$var$useColors;\n$BYFN$exports.useColors = $BYFN$export$useColors;\nvar $BYFN$export$storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : $BYFN$var$localstorage();\n$BYFN$exports.storage = $BYFN$export$storage;\n/**\n * Colors.\n */\n\nvar $BYFN$export$colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];\n$BYFN$exports.colors = $BYFN$export$colors;\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction $BYFN$var$useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  } // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\n\n$BYFN$exports.formatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction $BYFN$var$formatArgs(args) {\n  var useColors = this.useColors;\n  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + $BYFN$exports.humanize(this.diff);\n  if (!useColors) return;\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if ('%%' === match) return;\n    index++;\n\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction $BYFN$var$log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction $BYFN$var$save(namespaces) {\n  try {\n    if (null == namespaces) {\n      $BYFN$exports.storage.removeItem('debug');\n    } else {\n      $BYFN$exports.storage.debug = namespaces;\n    }\n  } catch (e) {}\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction $BYFN$var$load() {\n  var r;\n\n  try {\n    r = $BYFN$exports.storage.debug;\n  } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof $BYFN$var$process !== 'undefined' && 'env' in $BYFN$var$process) {\n    r = undefined;\n  }\n\n  return r;\n}\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\n\n$BYFN$exports.enable($BYFN$var$load());\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction $BYFN$var$localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}"},"sourceMaps":null,"error":null,"hash":"6ad16bae0e5ff5df34060de918763723","cacheData":{"env":{},"imports":{"$require$./debug":["./debug","*"],"$require$process":["process","*"]},"exports":{"log":"$BYFN$export$log","formatArgs":"$BYFN$export$formatArgs","save":"$BYFN$export$save","load":"$BYFN$export$load","useColors":"$BYFN$export$useColors","storage":"$BYFN$export$storage","colors":"$BYFN$export$colors"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}