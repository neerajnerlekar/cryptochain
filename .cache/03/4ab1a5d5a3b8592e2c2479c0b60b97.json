{"id":"yldK","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\package.json","includedInParent":true,"mtime":1598465897439},{"name":"inherits","loc":{"line":3,"column":25},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\base\\buffer.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\inherits\\inherits_browser.js"},{"name":"../base/reporter","loc":{"line":4,"column":25},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\base\\buffer.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\base\\reporter.js"},{"name":"safer-buffer","loc":{"line":5,"column":23},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\asn1.js\\lib\\asn1\\base\\buffer.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safer-buffer\\safer.js"}],"generated":{"js":"\nvar $yldK$exports = {};\nconst $yldK$var$inherits = $parcel$require(\"yldK\", \"inherits\");\nconst $yldK$var$Reporter = $parcel$require(\"yldK\", \"../base/reporter\").Reporter;\nconst $yldK$var$Buffer = $parcel$require(\"yldK\", \"safer-buffer\").Buffer;\n\nfunction $yldK$var$DecoderBuffer(base, options) {\n  $yldK$var$Reporter.call(this, options);\n\n  if (!$yldK$var$Buffer.isBuffer(base)) {\n    this.error('Input not Buffer');\n    return;\n  }\n\n  this.base = base;\n  this.offset = 0;\n  this.length = base.length;\n}\n\n$yldK$var$inherits($yldK$var$DecoderBuffer, $yldK$var$Reporter);\nvar $yldK$export$DecoderBuffer = $yldK$var$DecoderBuffer;\n$yldK$exports.DecoderBuffer = $yldK$export$DecoderBuffer;\n\n$yldK$var$DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {\n  if (data instanceof $yldK$var$DecoderBuffer) {\n    return true;\n  } // Or accept compatible API\n\n\n  const isCompatible = typeof data === 'object' && $yldK$var$Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';\n  return isCompatible;\n};\n\n$yldK$var$DecoderBuffer.prototype.save = function save() {\n  return {\n    offset: this.offset,\n    reporter: $yldK$var$Reporter.prototype.save.call(this)\n  };\n};\n\n$yldK$var$DecoderBuffer.prototype.restore = function restore(save) {\n  // Return skipped data\n  const res = new $yldK$var$DecoderBuffer(this.base);\n  res.offset = save.offset;\n  res.length = this.offset;\n  this.offset = save.offset;\n  $yldK$var$Reporter.prototype.restore.call(this, save.reporter);\n  return res;\n};\n\n$yldK$var$DecoderBuffer.prototype.isEmpty = function isEmpty() {\n  return this.offset === this.length;\n};\n\n$yldK$var$DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n  if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);else return this.error(fail || 'DecoderBuffer overrun');\n};\n\n$yldK$var$DecoderBuffer.prototype.skip = function skip(bytes, fail) {\n  if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');\n  const res = new $yldK$var$DecoderBuffer(this.base); // Share reporter state\n\n  res._reporterState = this._reporterState;\n  res.offset = this.offset;\n  res.length = this.offset + bytes;\n  this.offset += bytes;\n  return res;\n};\n\n$yldK$var$DecoderBuffer.prototype.raw = function raw(save) {\n  return this.base.slice(save ? save.offset : this.offset, this.length);\n};\n\nfunction $yldK$var$EncoderBuffer(value, reporter) {\n  if (Array.isArray(value)) {\n    this.length = 0;\n    this.value = value.map(function (item) {\n      if (!$yldK$var$EncoderBuffer.isEncoderBuffer(item)) item = new $yldK$var$EncoderBuffer(item, reporter);\n      this.length += item.length;\n      return item;\n    }, this);\n  } else if (typeof value === 'number') {\n    if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');\n    this.value = value;\n    this.length = 1;\n  } else if (typeof value === 'string') {\n    this.value = value;\n    this.length = $yldK$var$Buffer.byteLength(value);\n  } else if ($yldK$var$Buffer.isBuffer(value)) {\n    this.value = value;\n    this.length = value.length;\n  } else {\n    return reporter.error('Unsupported type: ' + typeof value);\n  }\n}\n\nvar $yldK$export$EncoderBuffer = $yldK$var$EncoderBuffer;\n$yldK$exports.EncoderBuffer = $yldK$export$EncoderBuffer;\n\n$yldK$var$EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {\n  if (data instanceof $yldK$var$EncoderBuffer) {\n    return true;\n  } // Or accept compatible API\n\n\n  const isCompatible = typeof data === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';\n  return isCompatible;\n};\n\n$yldK$var$EncoderBuffer.prototype.join = function join(out, offset) {\n  if (!out) out = $yldK$var$Buffer.alloc(this.length);\n  if (!offset) offset = 0;\n  if (this.length === 0) return out;\n\n  if (Array.isArray(this.value)) {\n    this.value.forEach(function (item) {\n      item.join(out, offset);\n      offset += item.length;\n    });\n  } else {\n    if (typeof this.value === 'number') out[offset] = this.value;else if (typeof this.value === 'string') out.write(this.value, offset);else if ($yldK$var$Buffer.isBuffer(this.value)) this.value.copy(out, offset);\n    offset += this.length;\n  }\n\n  return out;\n};"},"sourceMaps":null,"error":null,"hash":"d0f365f21cd74fa98e9cb07300623778","cacheData":{"env":{},"imports":{"$require$inherits":["inherits","*"],"$require$../base/reporter":["../base/reporter","*"],"$require$safer-buffer":["safer-buffer","*"]},"exports":{"DecoderBuffer":"$yldK$export$DecoderBuffer","EncoderBuffer":"$yldK$export$EncoderBuffer"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}