{"id":"LKkn","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\package.json","includedInParent":true,"mtime":1598465886487},{"name":"buffer-xor","loc":{"line":1,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\modes\\ofb.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\buffer-xor\\index.js"},{"name":"buffer","parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\modes\\ofb.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\buffer\\index.js"}],"generated":{"js":"var $LKkn$exports = {};\nvar $LKkn$var$Buffer = $parcel$require(\"LKkn\", \"buffer\").Buffer;\nvar $LKkn$var$xor = $parcel$require(\"LKkn\", \"buffer-xor\");\n\nfunction $LKkn$var$getBlock(self) {\n  self._prev = self._cipher.encryptBlock(self._prev);\n  return self._prev;\n}\n\nvar $LKkn$export$encrypt = function (self, chunk) {\n  while (self._cache.length < chunk.length) {\n    self._cache = $LKkn$var$Buffer.concat([self._cache, $LKkn$var$getBlock(self)]);\n  }\n\n  var pad = self._cache.slice(0, chunk.length);\n\n  self._cache = self._cache.slice(chunk.length);\n  return $LKkn$var$xor(chunk, pad);\n};\n\n$LKkn$exports.encrypt = $LKkn$export$encrypt;"},"sourceMaps":null,"error":null,"hash":"c1526860785a0f6771af47a9d51e265c","cacheData":{"env":{},"imports":{"$require$buffer-xor":["buffer-xor","*"],"$require$buffer":["buffer","*"]},"exports":{"encrypt":"$LKkn$export$encrypt"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}