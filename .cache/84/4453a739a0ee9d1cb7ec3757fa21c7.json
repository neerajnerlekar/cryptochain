{"id":"eH11","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\package.json","includedInParent":true,"mtime":1598465886487},{"name":"buffer-xor","loc":{"line":1,"column":18},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\modes\\ctr.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\buffer-xor\\index.js"},{"name":"safe-buffer","loc":{"line":2,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\modes\\ctr.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\safe-buffer\\index.js"},{"name":"../incr32","loc":{"line":3,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\modes\\ctr.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\browserify-aes\\incr32.js"}],"generated":{"js":"\nvar $eH11$exports = {};\nvar $eH11$var$xor = $parcel$require(\"eH11\", \"buffer-xor\");\nvar $eH11$var$Buffer = $parcel$require(\"eH11\", \"safe-buffer\").Buffer;\nvar $eH11$var$incr32 = $parcel$require(\"eH11\", \"../incr32\");\n\nfunction $eH11$var$getBlock(self) {\n  var out = self._cipher.encryptBlockRaw(self._prev);\n\n  $eH11$var$incr32(self._prev);\n  return out;\n}\n\nvar $eH11$var$blockSize = 16;\n\nvar $eH11$export$encrypt = function (self, chunk) {\n  var chunkNum = Math.ceil(chunk.length / $eH11$var$blockSize);\n  var start = self._cache.length;\n  self._cache = $eH11$var$Buffer.concat([self._cache, $eH11$var$Buffer.allocUnsafe(chunkNum * $eH11$var$blockSize)]);\n\n  for (var i = 0; i < chunkNum; i++) {\n    var out = $eH11$var$getBlock(self);\n    var offset = start + i * $eH11$var$blockSize;\n\n    self._cache.writeUInt32BE(out[0], offset + 0);\n\n    self._cache.writeUInt32BE(out[1], offset + 4);\n\n    self._cache.writeUInt32BE(out[2], offset + 8);\n\n    self._cache.writeUInt32BE(out[3], offset + 12);\n  }\n\n  var pad = self._cache.slice(0, chunk.length);\n\n  self._cache = self._cache.slice(chunk.length);\n  return $eH11$var$xor(chunk, pad);\n};\n\n$eH11$exports.encrypt = $eH11$export$encrypt;"},"sourceMaps":null,"error":null,"hash":"f1f3a31bce1270ebeacb35d23af30cdf","cacheData":{"env":{},"imports":{"$require$buffer-xor":["buffer-xor","*"],"$require$safe-buffer":["safe-buffer","*"],"$require$../incr32":["../incr32","*"]},"exports":{"encrypt":"$eH11$export$encrypt"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}