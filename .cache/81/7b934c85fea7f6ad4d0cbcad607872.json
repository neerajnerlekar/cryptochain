{"id":"Man0","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\cookie-signature\\package.json","includedInParent":true,"mtime":1598465923855},{"name":"crypto","loc":{"line":5,"column":21},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\cookie-signature\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\crypto-browserify\\index.js"}],"generated":{"js":"var $Man0$exports = {};\n\n/**\n * Module dependencies.\n */\nvar $Man0$var$crypto = $parcel$require(\"Man0\", \"crypto\");\n/**\n * Sign the given `val` with `secret`.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String}\n * @api private\n */\n\nvar $Man0$export$sign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + $Man0$var$crypto.createHmac('sha256', secret).update(val).digest('base64').replace(/\\=+$/, '');\n};\n\n$Man0$exports.sign = $Man0$export$sign;\n/**\n * Unsign and decode the given `val` with `secret`,\n * returning `false` if the signature is invalid.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String|Boolean}\n * @api private\n */\n\nvar $Man0$export$unsign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.')),\n      mac = $Man0$exports.sign(str, secret);\n  return $Man0$var$sha1(mac) == $Man0$var$sha1(val) ? str : false;\n};\n\n$Man0$exports.unsign = $Man0$export$unsign;\n/**\n * Private\n */\n\nfunction $Man0$var$sha1(str) {\n  return $Man0$var$crypto.createHash('sha1').update(str).digest('hex');\n}"},"sourceMaps":null,"error":null,"hash":"dd052a371be5bdb980d3f4b9f55f05cd","cacheData":{"env":{},"imports":{"$require$crypto":["crypto","*"]},"exports":{"sign":"$Man0$export$sign","unsign":"$Man0$export$unsign"},"wildcards":[],"sideEffects":true,"isCommonJS":true,"shouldWrap":false}}