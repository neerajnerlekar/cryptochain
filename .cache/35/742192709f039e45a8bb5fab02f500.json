{"id":"kIvU","dependencies":[{"name":"F:\\Programs\\bbc\\cryptochain\\package.json","includedInParent":true,"mtime":1598477104553},{"name":"F:\\Programs\\bbc\\cryptochain\\.babelrc","includedInParent":true,"mtime":1598465557409},{"name":"F:\\Programs\\bbc\\cryptochain\\node_modules\\statuses\\package.json","includedInParent":true,"mtime":1598465895061},{"name":"./codes.json","loc":{"line":15,"column":20},"parent":"F:\\Programs\\bbc\\cryptochain\\node_modules\\statuses\\index.js","resolved":"F:\\Programs\\bbc\\cryptochain\\node_modules\\statuses\\codes.json"}],"generated":{"js":"var $kIvU$exports = {};\n\n/**\n * Module dependencies.\n * @private\n */\nvar $kIvU$var$codes = $parcel$require(\"kIvU\", \"./codes.json\");\n/**\n * Module exports.\n * @public\n */\n\n$kIvU$exports = $kIvU$var$status; // status code to message map\n\n$kIvU$var$status.STATUS_CODES = $kIvU$var$codes; // array of status codes\n\n$kIvU$var$status.codes = $kIvU$var$populateStatusesMap($kIvU$var$status, $kIvU$var$codes); // status codes for redirects\n\n$kIvU$var$status.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}; // status codes for empty bodies\n\n$kIvU$var$status.empty = {\n  204: true,\n  205: true,\n  304: true\n}; // status codes for when you should retry the request\n\n$kIvU$var$status.retry = {\n  502: true,\n  503: true,\n  504: true\n};\n/**\n * Populate the statuses map for given codes.\n * @private\n */\n\nfunction $kIvU$var$populateStatusesMap(statuses, codes) {\n  var arr = [];\n  Object.keys(codes).forEach(function forEachCode(code) {\n    var message = codes[code];\n    var status = Number(code); // Populate properties\n\n    statuses[status] = message;\n    statuses[message] = status;\n    statuses[message.toLowerCase()] = status; // Add to array\n\n    arr.push(status);\n  });\n  return arr;\n}\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\n\nfunction $kIvU$var$status(code) {\n  if (typeof code === 'number') {\n    if (!$kIvU$var$status[code]) throw new Error('invalid status code: ' + code);\n    return code;\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  } // '403'\n\n\n  var n = parseInt(code, 10);\n\n  if (!isNaN(n)) {\n    if (!$kIvU$var$status[n]) throw new Error('invalid status code: ' + n);\n    return n;\n  }\n\n  n = $kIvU$var$status[code.toLowerCase()];\n  if (!n) throw new Error('invalid status message: \"' + code + '\"');\n  return n;\n}"},"sourceMaps":null,"error":null,"hash":"5cfcc7b5381e80825af277907e9957ed","cacheData":{"env":{},"imports":{"$require$./codes.json":["./codes.json","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}